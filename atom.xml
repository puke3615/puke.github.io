<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Puke&#39;s Blog</title>
  
  <subtitle>Keep learning as long as living.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://puke3615.github.io/"/>
  <updated>2018-12-12T11:57:53.000Z</updated>
  <id>http://puke3615.github.io/</id>
  
  <author>
    <name>Puke</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dart语法要点汇总</title>
    <link href="http://puke3615.github.io/2018/12/12/Flutter-Dart/"/>
    <id>http://puke3615.github.io/2018/12/12/Flutter-Dart/</id>
    <published>2018-12-12T02:53:55.000Z</published>
    <updated>2018-12-12T11:57:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="一个基础的Dart程序"><a href="#一个基础的Dart程序" class="headerlink" title="一个基础的Dart程序"></a>一个基础的Dart程序</h3><p>[In]</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main为Dart程序入口</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// 调用printNumber方法</span></span><br><span class="line">  <span class="keyword">var</span> number = <span class="number">58</span>;</span><br><span class="line">  printNumber(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法返回类型缺省时，默认返回类型为dynamic</span></span><br><span class="line">printNumber(<span class="built_in">int</span> number) &#123;</span><br><span class="line">  <span class="comment">// 1. 字符串用单/双引号均可</span></span><br><span class="line">  <span class="comment">// 2. 字符串中支持$&#123;&#125;表达式, 单字符变量时可简化为$</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"The number is $number."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[Out]</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The number is 58.</span><br></pre></td></tr></table></figure><ul><li>Dart单行注释用<code>//</code>，多行注释用<code>/**/</code>（同Java）</li><li><code>var</code>是一种不需要指定类型的声明方式</li><li><code>int</code>是一种数据类型，对应的还有<code>String</code>、<code>List</code>和<code>bool</code>类型</li><li>字符串的标识用单、双引号均可（同Python、JS）</li><li>字符串中支持<code>${number}</code>表达式, 单字符变量时可简化为<code>$number</code>（同JS的<font color="red">&#96;{$number}&#96;</font>）</li></ul><a id="more"></a><blockquote><p>当你在学习Dart语言时，你需要清楚这概念：</p><ul><li>所有的东西都是一个对象，每个对象都是一个class的实例，即使是数字、函数、<code>null</code>都是对象，并且所有的对象都集成自Object类。</li><li>尽管Dart语言是一种强类型语言，但你在类型声明时仍然可以不指定类型，因为Dart可以自动进行类型推断。在上面的代码中，<code>number</code>变量的类型就被推断为<code>int</code>，当你并不想显式地声明类型时，你可以使用置顶的类型<a href="https://www.dartlang.org/guides/language/effective-dart/design#do-annotate-with-object-instead-of-dynamic-to-indicate-any-object-is-allowed" target="_blank" rel="noopener">dynamic</a>来标识。</li><li>Dart语言同样支持泛型，如<code>List&lt;int&gt;</code>、<code>List&lt;dynamic&gt;</code>（同Java）。</li><li>Dart语言支持顶级方法（即不与类绑定的方法，如上的<code>main</code>方法），以及绑定类和实例的方法（分别对应静态方法和实例方法），而且还支持方法嵌套（同Python、JS）。</li><li>和Java不同的是，Dart语言并不支持<code>publish</code>、<code>protected</code>、<code>private</code>这些关键字，它是通过前缀<code>_</code>来标识为私有域的（同Python），<a href="https://www.dartlang.org/guides/language/language-tour#libraries-and-visibility" target="_blank" rel="noopener">参</a>。</li></ul></blockquote><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>这是一个创建并初始化变量的例子</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Bob'</span>;</span><br></pre></td></tr></table></figure><p><code>name</code>变量类型被推断为<code>String</code>，你也能更改为制定的类型。如果一个变量的类型并不限制于单一类型，你也可以使用<code>dynamic</code>或<code>Object</code>进行声明，如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dynamic</span> name = <span class="string">'Bob'</span>;</span><br></pre></td></tr></table></figure><p>同样也可以选择制定的声明方式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> name = <span class="string">'Bob'</span>;</span><br></pre></td></tr></table></figure><p>但根据Dart推荐的编码风格，在局部变量中使用<code>var</code>要更优于制定的类型声明。</p><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>Dart中声明时如果未初始化，会被自动初始化为<code>null</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> lineCount;</span><br><span class="line"><span class="keyword">assert</span>(lineCount == <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>assert</code>只在开发环境有效，在实际的生产环境无效</p></blockquote><h4 id="final与const"><a href="#final与const" class="headerlink" title="final与const"></a>final与const</h4><p><code>final</code>和<code>const</code>标识该变量只能被赋值一次，区别在于<code>final</code>是运行时赋值，<code>const</code>是编译时赋值。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> nickname = <span class="string">'Jack'</span>;</span><br><span class="line"><span class="comment">// final修饰时, 可省略类型声明</span></span><br><span class="line"><span class="keyword">final</span> name = <span class="string">'Jack'</span>;</span><br></pre></td></tr></table></figure><p><code>const</code>不仅可以用来声明变量，还能用来创建常量值，如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此时不能在对列表a进行更新操作</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">const</span> [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure><h3 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h3><h4 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h4><p>包含<code>int</code>和<code>double</code>，不包含<del><code>float</code></del></p><p>常用的类型转换</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String -&gt; int</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">int</span>.parse(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">assert</span>(a == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String -&gt; double</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">double</span>.parse(<span class="string">'1.1'</span>);</span><br><span class="line"><span class="keyword">assert</span>(b == <span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// int -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> c = <span class="number">1.</span>toString();</span><br><span class="line"><span class="keyword">assert</span>(c == <span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// double -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> d = <span class="number">3.14159</span>.toStringAsFixed(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">assert</span>(d == <span class="string">'3.14'</span>);</span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li><p>单引号、双引号均可</p></li><li><p>字符串拼接时，换行可省略加号，如</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'123'</span></span><br><span class="line">    <span class="string">'456'</span>;</span><br><span class="line"><span class="built_in">print</span>(a);</span><br><span class="line"><span class="comment">// Out: 123456</span></span><br></pre></td></tr></table></figure></li><li><p>字符串可以用索引，但不支持负值索引（区分于Python），如</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'Jack'</span>;</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// Out: a</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>在Dart语言中，数组即列表</p><p>[In]</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="keyword">var</span> list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">  <span class="comment">// 增</span></span><br><span class="line">  list.add(<span class="string">'d'</span>);</span><br><span class="line">  <span class="comment">// 删</span></span><br><span class="line">  list.remove(<span class="string">'b'</span>);</span><br><span class="line">  <span class="comment">// 改</span></span><br><span class="line">  list[<span class="number">1</span>] = <span class="string">'cc'</span>;</span><br><span class="line">  <span class="comment">// 查</span></span><br><span class="line">  <span class="keyword">var</span> last = list[list.length - <span class="number">1</span>];</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'list is $list'</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'last is $last'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[Out]</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list is [a, cc, d]</span><br><span class="line">last is d</span><br></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>[In]</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> map = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;;</span><br><span class="line">  <span class="comment">// 增</span></span><br><span class="line">  map[<span class="string">'c'</span>] = <span class="number">3</span>;</span><br><span class="line">  <span class="comment">// 删</span></span><br><span class="line">  map.remove(<span class="string">'a'</span>);</span><br><span class="line">  <span class="comment">// 改</span></span><br><span class="line">  map[<span class="string">'b'</span>] = <span class="number">22</span>;</span><br><span class="line">  <span class="comment">// 查</span></span><br><span class="line">  <span class="keyword">var</span> cValue = map[<span class="string">'c'</span>];</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'map is $map'</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'cValue is $cValue'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[Out]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map is &#123;b: 22, c: 3&#125;</span><br><span class="line">cValue is 3</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>Dart是一门完全面向对象的语言，即使它的函数也是一个对象，并且有自己的类型——<code>Function</code>。这就意味着函数可以被赋值为一个变量，或者作为一个参数在其他函数之间传递。</p><p>对于只包含一个表达式的方法体，你也可以使用<code>=&gt;</code>的简写形式，如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> say() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'123'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该写法与以上有同样效果</span></span><br><span class="line"><span class="keyword">void</span> say2() =&gt; <span class="built_in">print</span>(<span class="string">'123'</span>);</span><br></pre></td></tr></table></figure><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><p>Dart的可选参数分为<code>命名可选参数</code>和<code>位置可选参数</code>两种（两者之间互斥，即不能同时使用）。</p><p><strong>命名可选参数</strong></p><p>[In]</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  say(age: <span class="number">27</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> say(&#123;<span class="built_in">String</span> name=<span class="string">'Jack'</span>, <span class="built_in">int</span> age=<span class="number">20</span>&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'$name\'s age is $age.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[Out]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jack&apos;s age is 27.</span><br></pre></td></tr></table></figure><p><strong>位置可选参数</strong></p><p>[In]</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  say(<span class="string">'Tom'</span>, <span class="number">27</span>, <span class="string">'Love game.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> say(<span class="built_in">String</span> name, <span class="built_in">int</span> age, [<span class="built_in">String</span> remark]) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'$name\'s age is $age.<span class="subst">$&#123;remark??<span class="string">''</span>&#125;</span>'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[Out]</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tom's age is 27.Love game.</span><br></pre></td></tr></table></figure><p><strong>默认参数值</strong></p><p>参数可用<code>=</code>声明默认值，默认值只能是编译时常量。</p><blockquote><p>注：<code>命名可选参数</code>的默认参数值可使用<code>:</code>指定，但对于<code>位置可选参数</code>不支持，推荐统一使用<code>=</code>的默认参数指定方式</p></blockquote><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>[In]</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> list = [<span class="string">'Android'</span>, <span class="string">'iOS'</span>, <span class="string">'WindowPhone'</span>];</span><br><span class="line">  list.forEach((item) &#123;</span><br><span class="line">    <span class="built_in">print</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[Out]</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Android</span><br><span class="line">iOS</span><br><span class="line">WindowPhone</span><br></pre></td></tr></table></figure><h3 id="特殊操作符"><a href="#特殊操作符" class="headerlink" title="特殊操作符"></a>特殊操作符</h3><ul><li><p><code>is</code> &lt;=&gt; Java的<code>instanceof</code></p></li><li><p><code>a?.b</code> &lt;=&gt; <code>a == null ? null : a.b</code></p></li><li><p><code>a??b</code> &lt;=&gt; <code>a == null ? b : a</code></p></li><li><p><code>a ??= b</code> &lt;=&gt; <code>a = a == null ? b : a</code></p></li><li><p><code>a as String</code> &lt;=&gt; Java的<code>(String) a</code></p></li><li><p><code>..</code>级别操作符</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">querySelector</span>(<span class="string">'#confirm'</span>);</span><br><span class="line">button.text = <span class="string">'Confirm'</span>;</span><br><span class="line">button.classes.add(<span class="string">'important'</span>);</span><br><span class="line">button.onClick.listen((e) =&gt; <span class="built_in">window</span>.alert(<span class="string">'Confirmed!'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该写法等价上述写法</span></span><br><span class="line"><span class="built_in">querySelector</span>(<span class="string">'#confirm'</span>) <span class="comment">// Get an object.</span></span><br><span class="line">  ..text = <span class="string">'Confirm'</span> <span class="comment">// Use its members.</span></span><br><span class="line">  ..classes.add(<span class="string">'important'</span>)</span><br><span class="line">  ..onClick.listen((e) =&gt; <span class="built_in">window</span>.alert(<span class="string">'Confirmed!'</span>));</span><br></pre></td></tr></table></figure></li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抛异常</span></span><br><span class="line"><span class="keyword">throw</span> FormatException(<span class="string">'Expected at least 1 section'</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="string">'Out of llamas!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获异常</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  breedMoreLlamas();</span><br><span class="line">&#125; on OutOfLlamasException &#123;</span><br><span class="line">  <span class="comment">// A specific exception</span></span><br><span class="line">  buyMoreLlamas();</span><br><span class="line">&#125; on Exception <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// Anything else that is an exception</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Unknown exception: $e'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// No specified type, handles all</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Something really unknown: $e'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125; on Exception <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Exception details:\n $e'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e, s) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Exception details:\n $e'</span>);</span><br><span class="line">  <span class="comment">// 第二个参数s是一个错误堆栈实例</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Stack trace:\n $s'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">dynamic</span> foo = <span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">print</span>(foo++); <span class="comment">// Runtime error</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'misbehave() partially handled <span class="subst">$&#123;e.runtimeType&#125;</span>.'</span>);</span><br><span class="line">  <span class="comment">// 关键字rethrow重新抛出异常</span></span><br><span class="line">  <span class="keyword">rethrow</span>; <span class="comment">// Allow callers to see the exception. </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重载操作符"><a href="#重载操作符" class="headerlink" title="重载操作符"></a>重载操作符</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> x, y;</span><br><span class="line"></span><br><span class="line">  Vector(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  Vector <span class="keyword">operator</span> +(Vector v) =&gt; Vector(x + v.x, y + v.y);</span><br><span class="line">  Vector <span class="keyword">operator</span> -(Vector v) =&gt; Vector(x - v.x, y - v.y);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Operator == and hashCode not shown. For details, see note below.</span></span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">final</span> v = Vector(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">final</span> w = Vector(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span>(v + w == Vector(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">  <span class="keyword">assert</span>(v - w == Vector(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><ul><li><code>sync* + yield</code>返回<code>Iterable</code>对象</li><li><code>async* + yield</code>返回<code>Stream</code>对象</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Iterable</span>&lt;<span class="built_in">int</span>&gt; naturalsTo(<span class="built_in">int</span> n) <span class="keyword">sync</span>* &#123;</span><br><span class="line">  <span class="built_in">int</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (k &lt; n) <span class="keyword">yield</span> k++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; asynchronousNaturalsTo(<span class="built_in">int</span> n) <span class="keyword">async</span>* &#123;</span><br><span class="line">  <span class="built_in">int</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (k &lt; n) <span class="keyword">yield</span> k++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果生成器返回值是可迭代的，亦可使用<code>yield*</code>来提高性能，如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Iterable</span>&lt;<span class="built_in">int</span>&gt; naturalsDownFrom(<span class="built_in">int</span> n) <span class="keyword">sync</span>* &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> n;</span><br><span class="line">    <span class="keyword">yield</span>* naturalsDownFrom(n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可调用的类"><a href="#可调用的类" class="headerlink" title="可调用的类"></a>可调用的类</h3><p>给类定义<code>call</code>方法能使得当前类是Callable的（同Python）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WannabeFunction</span> </span>&#123;</span><br><span class="line">  call(<span class="built_in">String</span> a, <span class="built_in">String</span> b, <span class="built_in">String</span> c) =&gt; <span class="string">'$a $b $c!'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> wf = <span class="keyword">new</span> WannabeFunction();</span><br><span class="line">  <span class="keyword">var</span> out = wf(<span class="string">"Hi"</span>,<span class="string">"there,"</span>,<span class="string">"gang"</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'$out'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;一个基础的Dart程序&quot;&gt;&lt;a href=&quot;#一个基础的Dart程序&quot; class=&quot;headerlink&quot; title=&quot;一个基础的Dart程序&quot;&gt;&lt;/a&gt;一个基础的Dart程序&lt;/h3&gt;&lt;p&gt;[In]&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// main为Dart程序入口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 调用printNumber方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; number = &lt;span class=&quot;number&quot;&gt;58&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  printNumber(number);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 方法返回类型缺省时，默认返回类型为dynamic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printNumber(&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; number) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 1. 字符串用单/双引号均可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 2. 字符串中支持$&amp;#123;&amp;#125;表达式, 单字符变量时可简化为$&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;The number is $number.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;[Out]&lt;/p&gt;
&lt;figure class=&quot;highlight console&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;The number is 58.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Dart单行注释用&lt;code&gt;//&lt;/code&gt;，多行注释用&lt;code&gt;/**/&lt;/code&gt;（同Java）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt;是一种不需要指定类型的声明方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;是一种数据类型，对应的还有&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;List&lt;/code&gt;和&lt;code&gt;bool&lt;/code&gt;类型&lt;/li&gt;
&lt;li&gt;字符串的标识用单、双引号均可（同Python、JS）&lt;/li&gt;
&lt;li&gt;字符串中支持&lt;code&gt;${number}&lt;/code&gt;表达式, 单字符变量时可简化为&lt;code&gt;$number&lt;/code&gt;（同JS的&lt;font color=&quot;red&quot;&gt;&amp;#96;{$number}&amp;#96;&lt;/font&gt;）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Dart" scheme="http://puke3615.github.io/tags/Dart/"/>
    
      <category term="Flutter" scheme="http://puke3615.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>彻底解耦RecyclerView.Adapter</title>
    <link href="http://puke3615.github.io/2018/08/26/Android-RecyclerView-Architecture-Design/"/>
    <id>http://puke3615.github.io/2018/08/26/Android-RecyclerView-Architecture-Design/</id>
    <published>2018-08-26T11:46:41.000Z</published>
    <updated>2018-09-03T04:42:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>在RecyclerView中的ItemType很多时，Adapter的代码量也会随之不断增加，最近我一直在思考如何通过代码设计的方式来解决这种具象的业务问题，能否找到解决该类问题的通法？如何设计出一种模式，使得增删改一种ItemType时的成本降到最低？如何能够彻底解耦掉这些问题的核心大类——Adapter？</p><a id="more"></a><p>我们在使用RecyclerView的时候，总会遇到多项ItemType的场景。随着业务复杂度的增加，ItemType会越变越多，导致代码量越来越多，最终发展为“上帝类”，本文将从代码设计的角度来找到解决这类问题的通法。</p><h1 id="业务场景还原"><a href="#业务场景还原" class="headerlink" title="业务场景还原"></a>业务场景还原</h1><p>这里先通过Demo来还原一下真实的业务场景，后面便基于该场景进行问题的串联。假设现在只有三种ItemType，为了简单起见就分别对应A、B、C三种类型。</p><h2 id="渲染数据"><a href="#渲染数据" class="headerlink" title="渲染数据"></a>渲染数据</h2><p>一般对应的数据也会有个字段来标识当前数据隶属于哪种type，首先定义实体ItemData。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemData</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * typeA: A类型</span></span><br><span class="line"><span class="comment">     * typeB: B类型</span></span><br><span class="line"><span class="comment">     * typeC: C类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String type;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String textA;</span><br><span class="line">    <span class="keyword">public</span> String textB;</span><br><span class="line">    <span class="keyword">public</span> String textC;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通用模板"><a href="#通用模板" class="headerlink" title="通用模板"></a>通用模板</h2><p>然后就是通用的代码模板，几乎所有的RyclerView.Adapter都会要写的数据传递和更新的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ItemData&gt; dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TargetAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据刷新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(@Nullable List&lt;ItemData&gt; dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource.clear();</span><br><span class="line">        <span class="keyword">if</span> (dataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dataSource.addAll(dataSource);</span><br><span class="line">        &#125;</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDataSource</span><span class="params">(@Nullable List&lt;ItemData&gt; dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSource != <span class="keyword">null</span> &amp;&amp; !dataSource.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dataSource.addAll(dataSource);</span><br><span class="line">            notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ItemType相关"><a href="#ItemType相关" class="headerlink" title="ItemType相关"></a>ItemType相关</h2><h3 id="定义ItemType"><a href="#定义ItemType" class="headerlink" title="定义ItemType"></a>定义ItemType</h3><p>ItemType具体的值需要我们自己去定义，这里由于我们预先知道了一共三种type，所以预定义好如下常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_A = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_B = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_C = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="重写getItemViewType"><a href="#重写getItemViewType" class="headerlink" title="重写getItemViewType"></a>重写getItemViewType</h3><p>重写该方法是为了告诉RecyclerView当前数据项对应哪中具体的ItemType。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    ItemData itemData = dataSource.get(position);</span><br><span class="line">    <span class="keyword">switch</span> (itemData.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"typeA"</span>:</span><br><span class="line">            <span class="keyword">return</span> TYPE_A;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"typeB"</span>:</span><br><span class="line">            <span class="keyword">return</span> TYPE_B;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"typeC"</span>:</span><br><span class="line">            <span class="keyword">return</span> TYPE_C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TYPE_C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义对应type的ViewHolder"><a href="#定义对应type的ViewHolder" class="headerlink" title="定义对应type的ViewHolder"></a>定义对应type的ViewHolder</h3><p>我们假设一个ViewHolder只对应单独的TextView，也只有一种普通的事件处理的需求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">    TextView textView;</span><br><span class="line">    AViewHolder(View itemView) &#123;</span><br><span class="line">        <span class="keyword">super</span>(itemView);</span><br><span class="line">        textView = itemView.findViewById(R.id.item_text_a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中B、C对应类似的代码，这里就不贴出来了。</p><h3 id="重写onCreateViewHolder"><a href="#重写onCreateViewHolder" class="headerlink" title="重写onCreateViewHolder"></a>重写onCreateViewHolder</h3><p>重写该方法是为了给RecyclerView新建一个当前这种类型对应的ViewHolder实例。该方法的代码量直观感觉上不是太多，但却是后续进行代码解耦的难点所在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    LayoutInflater inflater = LayoutInflater.from(parent.getContext());</span><br><span class="line">    <span class="keyword">final</span> View itemView;</span><br><span class="line">    <span class="keyword">switch</span> (viewType) &#123;</span><br><span class="line">        <span class="keyword">case</span> TYPE_A:</span><br><span class="line">            itemView = inflater.inflate(R.layout.item_a, parent, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AViewHolder(itemView);</span><br><span class="line">        <span class="keyword">case</span> TYPE_B:</span><br><span class="line">            itemView = inflater.inflate(R.layout.item_b, parent, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BViewHolder(itemView);</span><br><span class="line">        <span class="keyword">case</span> TYPE_C:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            itemView = inflater.inflate(R.layout.item_c, parent, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CViewHolder(itemView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写onBindViewHolder"><a href="#重写onBindViewHolder" class="headerlink" title="重写onBindViewHolder"></a>重写onBindViewHolder</h3><p>最后一步，重写该方法是为了处理ItemView的渲染和交互逻辑。该方法是Adapter逐渐臃肿的直接原因，这里为了简化Demo，已经将方法的处理逻辑简化掉了很多了，只包含一个TextView的渲染和点击交互，但即便如此该方法仍然占用接近40行的代码量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> viewType = getItemViewType(position);</span><br><span class="line">    <span class="keyword">final</span> Context context = holder.itemView.getContext();</span><br><span class="line">    ItemData itemData = dataSource.get(position);</span><br><span class="line">    <span class="keyword">switch</span> (viewType) &#123;</span><br><span class="line">        <span class="keyword">case</span> TYPE_A:</span><br><span class="line">            AViewHolder aViewHolder = (AViewHolder) holder;</span><br><span class="line">            aViewHolder.textView.setText(itemData.textA);</span><br><span class="line">            aViewHolder.textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(context, <span class="string">"Click Item A"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TYPE_B:</span><br><span class="line">            BViewHolder bViewHolder = (BViewHolder) holder;</span><br><span class="line">            bViewHolder.textView.setText(itemData.textB);</span><br><span class="line">            bViewHolder.textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(context, <span class="string">"Click Item B"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TYPE_C:</span><br><span class="line">            CViewHolder cViewHolder = (CViewHolder) holder;</span><br><span class="line">            cViewHolder.textView.setText(itemData.textC);</span><br><span class="line">            cViewHolder.textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(context, <span class="string">"Click Item C"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h2><p>截止到目前，场景还原部分已经全部完成，此时的代码量已经有小200行了，而实际业务场景中的代码量只会多不会少。为了便于后续的描述，最后贴出当前Adapter全量的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_A = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_B = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_C = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ItemData&gt; dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TargetAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据刷新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(@Nullable List&lt;ItemData&gt; dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource.clear();</span><br><span class="line">        <span class="keyword">if</span> (dataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dataSource.addAll(dataSource);</span><br><span class="line">        &#125;</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDataSource</span><span class="params">(@Nullable List&lt;ItemData&gt; dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSource != <span class="keyword">null</span> &amp;&amp; !dataSource.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dataSource.addAll(dataSource);</span><br><span class="line">            notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        LayoutInflater inflater = LayoutInflater.from(parent.getContext());</span><br><span class="line">        <span class="keyword">final</span> View itemView;</span><br><span class="line">        <span class="keyword">switch</span> (viewType) &#123;</span><br><span class="line">            <span class="keyword">case</span> TYPE_A:</span><br><span class="line">                itemView = inflater.inflate(R.layout.item_a, parent, <span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AViewHolder(itemView);</span><br><span class="line">            <span class="keyword">case</span> TYPE_B:</span><br><span class="line">                itemView = inflater.inflate(R.layout.item_b, parent, <span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> BViewHolder(itemView);</span><br><span class="line">            <span class="keyword">case</span> TYPE_C:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                itemView = inflater.inflate(R.layout.item_c, parent, <span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CViewHolder(itemView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> viewType = getItemViewType(position);</span><br><span class="line">        <span class="keyword">final</span> Context context = holder.itemView.getContext();</span><br><span class="line">        ItemData itemData = dataSource.get(position);</span><br><span class="line">        <span class="keyword">switch</span> (viewType) &#123;</span><br><span class="line">            <span class="keyword">case</span> TYPE_A:</span><br><span class="line">                AViewHolder aViewHolder = (AViewHolder) holder;</span><br><span class="line">                aViewHolder.textView.setText(itemData.textA);</span><br><span class="line">                aViewHolder.textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                        Toast.makeText(context, <span class="string">"Click Item A"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TYPE_B:</span><br><span class="line">                BViewHolder bViewHolder = (BViewHolder) holder;</span><br><span class="line">                bViewHolder.textView.setText(itemData.textB);</span><br><span class="line">                bViewHolder.textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                        Toast.makeText(context, <span class="string">"Click Item B"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TYPE_C:</span><br><span class="line">                CViewHolder cViewHolder = (CViewHolder) holder;</span><br><span class="line">                cViewHolder.textView.setText(itemData.textC);</span><br><span class="line">                cViewHolder.textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                        Toast.makeText(context, <span class="string">"Click Item C"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        ItemData itemData = dataSource.get(position);</span><br><span class="line">        <span class="keyword">switch</span> (itemData.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"typeA"</span>:</span><br><span class="line">                <span class="keyword">return</span> TYPE_A;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"typeB"</span>:</span><br><span class="line">                <span class="keyword">return</span> TYPE_B;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"typeC"</span>:</span><br><span class="line">                <span class="keyword">return</span> TYPE_C;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> TYPE_C;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TextView textView;</span><br><span class="line"></span><br><span class="line">        AViewHolder(View itemView) &#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            textView = itemView.findViewById(R.id.item_text_a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TextView textView;</span><br><span class="line"></span><br><span class="line">        BViewHolder(View itemView) &#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            textView = itemView.findViewById(R.id.item_text_b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TextView textView;</span><br><span class="line"></span><br><span class="line">        CViewHolder(View itemView) &#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            textView = itemView.findViewById(R.id.item_text_c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开发痛点梳理"><a href="#开发痛点梳理" class="headerlink" title="开发痛点梳理"></a>开发痛点梳理</h1><p>面向开发者而言，我们评判一个架构设计好坏的原则通常有两个维度——拓展性和维护性（当然还有健壮性，或称为鲁棒性，但该指标主要依赖于边界条件和异常情况的处理，它是所有编码的基本要求，这里不做赘述）。下面就基于这两个维度进行展开说明</p><h2 id="拓展性"><a href="#拓展性" class="headerlink" title="拓展性"></a>拓展性</h2><p><b>拓展性主要体现在基于当前的架构设计进行新功能增加时<span style="color: red">对原有代码</span>所带来改动成本和波及范围方面，拓展性越差的设计所带来的改动成本和代码波及范围就越大，反之就越小。</b></p><p>下面结合一个具象的例子来体会当前的代码设计下的改动成本，假设现在添加一个新类型D，那我们需要如下改动：</p><ol><li><p>首先需要添加一个新的ItemType常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_D = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></li><li><p>然后需要getItemViewType方法添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"typeD"</span>:</span><br><span class="line">    <span class="keyword">return</span> TYPE_D;</span><br></pre></td></tr></table></figure></li><li><p>然后需要新的ViewHolder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">    TextView textView;</span><br><span class="line">    DViewHolder(View itemView) &#123;</span><br><span class="line">        <span class="keyword">super</span>(itemView);</span><br><span class="line">        textView = itemView.findViewById(R.id.item_text_d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后onCreateViewHolder方法添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> TYPE_D:</span><br><span class="line">    itemView = inflater.inflate(R.layout.item_d, parent, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DViewHolder(itemView);</span><br></pre></td></tr></table></figure></li><li><p>最后onBindViewHolder方法添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> TYPE_D:</span><br><span class="line">    DViewHolder dViewHolder = (DViewHolder) holder;</span><br><span class="line">    dViewHolder.textView.setText(itemData.textD);</span><br><span class="line">    dViewHolder.textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">"Click Item D"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></li></ol><p>至此，一个新类型的ViewHolder的逻辑已经全部添加完成，一共需要添加上述的5处的代码。</p><p>说下我个人最直观的感受——繁琐，非常繁琐！我新建一种类型的ViewHolder需要在一个几百行、甚至几千行代码的Adapter大类中去分别找到这5处不同的代码位置，然后逐一进行更改，缺一不可。万一我漏掉了一处怎么办？万一其中一处的代码我copy错了怎么办？都不能正常显示出新加项。而实际的开发场景中，我确实会很容易犯此类错误，以至于新添加一项ViewHolder就像背口诀一样逐一确认，防止漏加错加。</p><p>我希望的场景是怎样的，我希望新加ViewHolder时只需要添加一个类，从而<b>低耦合</b>；我希望这个类包含且只包含新加项的代码逻辑，从而<b>高内聚</b>。</p><h2 id="维护性"><a href="#维护性" class="headerlink" title="维护性"></a>维护性</h2><p><b>维护性主要体现在基于当前的架构设计进行老功能修改时<span style="color: red">对原有代码</span>所带来改动成本和波及范围方面，维护性越差的设计所带来的改动成本和代码波及范围就越大，反之就越小。此外，基于维护性而言编码最忌讳的就是“上帝类”的出现。</b></p><p>我们不需要也不希望一个类身兼多职、包罗万象。和企业用人不同的是，企业在资金有限的情况下，为减少开支尤为钟爱全能型人才，人越多使用成本越大；而编码方面，我们不怕小类多，我们怕大类不纯。权且不说什么单一原则、设计模式，我们就说最实在的，维护代码量太大的类，逻辑找起来揪心、改起来闹心。</p><p>比如现在要更改一下CViewHolder中的文本颜色逻辑，要根据数据进行动态设置。实际上只需要添加如下这一行代码即可，而我们定位到待添加代码的位置却要产生额外的检索时间消耗，即便我们的IDE很强大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cViewHolder.textView.setTextColor(itemData.isVip ? Color.YELLOW : Color.BLACK);</span><br></pre></td></tr></table></figure><h2 id="明确目的"><a href="#明确目的" class="headerlink" title="明确目的"></a>明确目的</h2><p>基于对上面开发痛点的梳理，现在总结下接下来最主要的目标——<b>解耦Adapter，将各自ViewHolder的代码逻辑独立出去。</b></p><h1 id="彻底解耦Adapter"><a href="#彻底解耦Adapter" class="headerlink" title="彻底解耦Adapter"></a>彻底解耦Adapter</h1><p>对于解耦Adapter，由于之前我也有这方面的思考和尝试，也把ViewHolder从Adapter中进行抽离，但一直都不彻底，因为一个很核心的原因——ItemType，我在网上也看过很多的RecyclerView解耦方案，也同样有这个不足。</p><h2 id="解耦从哪里开始"><a href="#解耦从哪里开始" class="headerlink" title="解耦从哪里开始"></a>解耦从哪里开始</h2><p>对于一个泛化意义的类，它开始转变复杂的最根本原因在于抽象语义的方法被业务场景具象化。所以我开始直接去找抽象语义的方法，就是如下的三个，而接下来解耦的主要工作就是这三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建RecyclerView.ViewHolder实例</span></span><br><span class="line">RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ViewHolder数据绑定</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 判断当前项对应哪个ItemType</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="创建抽象基类"><a href="#创建抽象基类" class="headerlink" title="创建抽象基类"></a>创建抽象基类</h2><p>我们需要把多种类型ViewHolder里公有的逻辑抽象出来，而这些公有逻辑需要一个抽象基类作为逻辑载体。所以我们创建一个BaseViewHolder类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(itemView);</span><br><span class="line">        context = itemView.getContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindData</span><span class="params">(ItemData data)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在这个基类非常简单，只有一个onBindData的方法，用来让Adapter对ViewHolder进行数据绑定。有了该类之后，我便可以解耦出第一个方法onBindViewHolder了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull BaseViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    ItemData itemData = dataSource.get(position);</span><br><span class="line">    holder.onBindData(itemData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一步我们相当于把具象化（A、B、C、D）的数据绑定逻辑抽象到基类里去了，然后只需要我们的具象ViewHolder继承该基类进行onBindData方法的重写即可，以AViewHolder为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AViewHolder</span> <span class="keyword">extends</span> <span class="title">BaseViewHolder</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(itemView);</span><br><span class="line">        textView = itemView.findViewById(R.id.item_text_a);</span><br><span class="line">        textView.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindData</span><span class="params">(ItemData data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onBindData(data);</span><br><span class="line">        textView.setText(data.textA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(context, <span class="string">"Click Item A"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与最开始我们在Adapter写的ViewHolder不同的是，ViewHolder不再仅仅是View的载体了，在当前这种模式下ViewHolder还包含数据绑定和事件处理逻辑。</p><p>同理，我们也对另外的B、C、D三种类型进行对应ViewHolder的创建。</p><p>而到了这一步，我们做的虽然并不是很多，但我们实际上已经完成了Adapter中很大部分的代码解耦了。因为上面也提到过，代码量占比最多的onBindViewHolder方法已经被我们<code>holder.onBindData(itemData);</code>这一行代码搞定了。</p><h2 id="选择，继续剥离还是适可而止"><a href="#选择，继续剥离还是适可而止" class="headerlink" title="选择，继续剥离还是适可而止"></a>选择，继续剥离还是适可而止</h2><p>事先着重强调一点，选择没有明确对错，主要是看哪种更合适自己当前的业务场景。</p><ul><li>如果只是简单的一两个ViewHolder的场景，哪怕连BaseViewHolder都没必要抽取；</li><li>如果类型稍微多一些，比如3-5种时，就要考虑抽取基类了，因为此时的代码量正常情况下已经足以让你的Adapter变得很臃肿、很庞大了；</li><li>如果类型更多，或者说明确知道后续还会有拓展，那仅仅到这一步还是远远不够的，因为Adapter里面还会包含各种type常量的声明，各种ViewHolder的创建。而且类型越多、对应的ViewHolder就越多，Adapter类就会越混乱、越庞大；</li></ul><p>接下来就针对于继续剥离的分支进行讲述。</p><h2 id="陷入僵局，蛇咬住了自己的尾巴"><a href="#陷入僵局，蛇咬住了自己的尾巴" class="headerlink" title="陷入僵局，蛇咬住了自己的尾巴"></a>陷入僵局，蛇咬住了自己的尾巴</h2><p>接下来，我们重点看onCreateViewHolder方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BaseViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span></span>;</span><br></pre></td></tr></table></figure><p>入参是parrent和viewType，我们需要在该方法返回一个BaseViewHolder的实例给我们的RecyclerView。我们能不能把该方法再进行抽象？那我们又如何去根据viewType来实例化我们具象的BaseViewHolder？上面我们之所以能把onBindViewHolder的逻辑往基类里面抽取，是因为有具象的ViewHolder实例，我们可以通过具象的子ViewHolder实例来调用自己重写的逻辑块。但这里不一样，因为这里是创建BaseViewHolder的地方，也就是说此时我们根本没有ViewHolder实例，所以我们无法将这个创建逻辑通过BaseViewHolder进行抽象表征。</p><blockquote><p>RecyclerView：我告诉你viewType，你给我创建一个ViewHolder实例。</p><p>Adapter：我可以创建，但我不知道你要哪种实例。你给我ViewHolder，我得问它。</p><p>RecyclerView：你不给我创建ViewHolder，我怎么给你？</p><p>Adapter：你不给我ViewHolder，我怎么创建？</p></blockquote><p><b style="color: red">我们现在把具象的ViewHolder作为具象的逻辑载体；而实例化这些具象ViewHolder对象也属于具象的逻辑。</b>这就好像是蛇咬住了自己的尾巴。</p><h2 id="破局，再向上抽象一层"><a href="#破局，再向上抽象一层" class="headerlink" title="破局，再向上抽象一层"></a>破局，再向上抽象一层</h2><p>ViewHolder能具象解决的是视图渲染和用户交互，不能解决的是自身实例的创建。所以我打算在ViewHolder的基础上再向上抽象一层，专门为了解决ViewHolder的实例化问题。而在Java中这种专门为了创建实例的方法，我们一般称之为工厂方法，所以我就打算BaseViewHolder里新建一个工厂类，同时各个子ViewHolder里都有对应的Factory来继承它，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建当前ViewHolder实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function">BaseViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前Factory对应的ItemType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getItemType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象出来的工厂接口中有个getItemType方法，用以告诉Adapter当前ViewHolder对应的ItemType。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;? extends BaseViewHolder.Factory&gt; factories;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TargetAdapter</span><span class="params">(@NonNull List&lt;? extends BaseViewHolder.Factory&gt; factories)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dataSource = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">this</span>.factories = factories;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    BaseViewHolder.Factory targetFactory = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (BaseViewHolder.Factory factory : factories) &#123;</span><br><span class="line">        <span class="keyword">if</span> (factory.getItemType() == viewType) &#123;</span><br><span class="line">            targetFactory = factory;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (targetFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No factory found with viewType equals "</span> + viewType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> targetFactory.onCreateViewHolder(parent, viewType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Adapter中就用当前项的ItemType来跟每个Factory返回的进行比对，看是否是当前ViewHolder能识别的，进而决定调用哪个Factory类的实例方法。</p><p>对应的，我们现在就可以把Adapter中创建ViewHolder的代码迁移到子类中去了，如下为AViewHolder的内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">BaseViewHolder</span>.<span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        LayoutInflater inflater = LayoutInflater.from(parent.getContext());</span><br><span class="line">        <span class="keyword">final</span> View itemView = inflater.inflate(R.layout.item_a, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AViewHolder(itemView);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的抽离方式，我们把另外几个类型（B、C、D）都添加如上的Factory类。</p><h2 id="最难的问题，还是来了"><a href="#最难的问题，还是来了" class="headerlink" title="最难的问题，还是来了"></a>最难的问题，还是来了</h2><p>onCreateViewHolder方法已经解耦出去了，但马上便遇到另一个问题，每个Factory内都要返回一个ItemType，而返回的ItemType实际上是不能重复的，因为Adapter创建ViewHolder是根据ItemType来区分的。现在我们的ViewHolder虽然从Adapter抽离出来了，但是ViewHolder之间却还有这种相互制约的关系。我每新添加一个新类型的ViewHolder时都还需要看一下之前的ViewHolder里对应返回的ItemType以免冲突，这种方式着实很不方便，这个问题记为①先暂且放下。</p><p>除此之外我们还有第②个问题，那边是此时的Adapter还有最有一个未解耦也是最难解耦的方法——getItemType，我们再看下该方法的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    ItemData itemData = dataSource.get(position);</span><br><span class="line">    <span class="keyword">switch</span> (itemData.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"typeA"</span>:</span><br><span class="line">            <span class="keyword">return</span> TYPE_A;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"typeB"</span>:</span><br><span class="line">            <span class="keyword">return</span> TYPE_B;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"typeC"</span>:</span><br><span class="line">            <span class="keyword">return</span> TYPE_C;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"typeD"</span>:</span><br><span class="line">            <span class="keyword">return</span> TYPE_D;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TYPE_C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到这里的TYPE_A、TYPE_B等常量不仅在这里使用，而且还要跟抽取的Factory中返回的getItemType要对应上。</p><p>而这两个问题都是ItemType相关的逻辑，为了更加透彻的了解ItemType真实用意，我们来看下源码的解释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the view type of the item at &lt;code&gt;position&lt;/code&gt; for the purposes</span></span><br><span class="line"><span class="comment"> * of view recycling.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The default implementation of this method returns 0, making the assumption of</span></span><br><span class="line"><span class="comment"> * a single view type for the adapter. Unlike ListView adapters, types need not</span></span><br><span class="line"><span class="comment"> * be contiguous. Consider using id resources to uniquely identify item view types.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> position position to query</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> integer value identifying the type of the view needed to represent the item at</span></span><br><span class="line"><span class="comment"> *                 &lt;code&gt;position&lt;/code&gt;. Type codes need not be contiguous.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大意是说，它跟ListView里的getItemType不同的是，这里的ItemType可以是不连续的，但必须是唯一的，可以考虑使用id作为唯一标识。确实是很不错的建议，这样便能解决第一个ItemType冲突的问题。但是第二个问题依然解决不了，因为我还需要去做数据层的<code>ItemData#type</code>到View层的ItemType的关系映射。</p><p>很坦白的说，我在这个问题上思考了很久，我尝试在网上去寻找一些框架、源码、解决方案，但最终一无所获。</p><h2 id="寻根溯源，从根本上解决"><a href="#寻根溯源，从根本上解决" class="headerlink" title="寻根溯源，从根本上解决"></a>寻根溯源，从根本上解决</h2><p>我开始进行了很长一段时间的思维脑洞，促使我最终开始慢慢理清问题的脉络</p><ul><li><p>Adapter为什么要有ItemType的概念，用来干什么？</p><p>我们的RecyclerView有复用View的机制，同时RecyclerView中还可以包含不同种的类型的View，那在复用的时候，它需要一个表明当前数据项对应哪中类型View的标识，而这个标识便是ItemType。</p></li><li><p>ItemType在当前场景下的整条链路关系是怎样的？</p><ul><li>后端返回的是ItemData数据实体，该实体的type字段用以标识当前的类型</li><li>我们重写Adapter的getItemType方法，在这里做一层后端type字段到Adapter中ItemType的映射关系，然后告诉Adapter当前的ItemType</li><li>Adapter用我们告诉它的ItemType来查找对应缓存的子ViewHolder是否足够使用，够则复用，不够则创建，而这里的创建便是onCreateViewHolder方法</li><li>无论创建还是复用，得到这个ViewHolder对象之后，都会再调用onBindViewHolder方法让我们进行页面渲染和事件绑定</li></ul></li></ul><p>据上，ItemType的根本作用就是唯一标识ViewHolder的类型，而实际上ItemData中的type已经是为了标识而存在的，我们重写Adapter的getItemType方法只是为了将type字段的字符串标识值翻译成int标识值以适配Adapter中关于ItemType的约定。既然如此，那我们为什么不把这层映射关系通过编码的方式实现来取代这种手动一对一映射的方式呢？</p><p>于是，便有了下一个版本的Factory类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建当前ViewHolder实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function">BaseViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前Factory对应的ItemType标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们的Factory不在依赖于一个具象写死且无含义的ItemType，而是对应一个带有语义的字符串，而且上面也提到，后端返回给我们的type其实就是一个字符串的值（如”typeA”,”typeB”…），这样我们就能解耦掉Adapter中的最后一个方法getItmeType了，现在的Adapter变动的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;? extends BaseViewHolder.Factory&gt; factories;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Integer&gt; type2ItemType = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseAdapter</span><span class="params">(@NonNull HolderContext holderContext, @NonNull List&lt;? extends BaseViewHolder.Factory&gt; factories)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.holderContext = holderContext;</span><br><span class="line">    <span class="keyword">this</span>.dataSource = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">this</span>.factories = factories;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; factories.size(); i++) &#123;</span><br><span class="line">        BaseViewHolder.Factory factory = factories.get(i);</span><br><span class="line">        String type = factory.getType();</span><br><span class="line">        Integer itemType = type2ItemType.get(type);</span><br><span class="line">        <span class="keyword">if</span> (itemType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String currentFactory = factory.getClass().getName();</span><br><span class="line">            String sameFactory = factories.get(itemType).getClass().getName();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Same type found: "</span> + currentFactory + <span class="string">" and "</span> + sameFactory);</span><br><span class="line">        &#125;</span><br><span class="line">        type2ItemType.put(type, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    BaseViewHolder.Factory targetFactory = factories.get(viewType);</span><br><span class="line">    <span class="keyword">if</span> (targetFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No factory found with type equals "</span> + viewType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> targetFactory.onCreateViewHolder(parent, viewType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    ItemData itemData = dataSource.get(position);</span><br><span class="line">    String type = itemData.type;</span><br><span class="line">    <span class="keyword">return</span> type2ItemType.get(type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里之所以要记录数据type和ItemType的映射关系，是因为我们需要在getItemViewType方法中知道<code>type =&gt; ItemType</code>的映射关系，进而将我们语义理解的type转为RecyclerView能够识别的ItemType。</li><li>同时还做了针对注册同名type情况的异常检查，如果两个Factory的type是相同的，那么Adapter将在构造方法中把这种错误尽可能早的检查并暴露出来。</li></ul><p>与此对应的，子ViewHolder的Factory也需要做出细微的调整：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">BaseViewHolder</span>.<span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        LayoutInflater inflater = LayoutInflater.from(parent.getContext());</span><br><span class="line">        <span class="keyword">final</span> View itemView = inflater.inflate(R.layout.item_a, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AViewHolder(itemView);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"typeA"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="渲染问题刚解决，通信问题又出现"><a href="#渲染问题刚解决，通信问题又出现" class="headerlink" title="渲染问题刚解决，通信问题又出现"></a>渲染问题刚解决，通信问题又出现</h2><p>前面花费了很大的精力将ViewHolder从Adapter中解耦出来，已经完全解决了ViewHolder中View的渲染问题，但接踵而至的便是通信问题，比如，我在点击ViewHolder中的某一个子View的时候，我需要对应的Activity去做一些一些逻辑处理，或者说我需要在ViewHolder中取获取Activity的内部状态（如获取成员变量）。</p><blockquote><p>注：我看过很多在ViewHolder等组件中直接通过将context强转成当前页面的Activity，然后调用其方法的写法，如果页面、业务逻辑不是复杂这个写法尚可，一旦变得复杂，这种写法是很不推荐的。业务主体类不要被其子组件显式调用，如果一定需要调用，那就替换为通过Callback来隐式调用的方式。否则就会出现，A类依赖B，B类依赖A这种相互依赖的关系，会让逻辑变得异常混乱；而且如果子组件要被复用时，代码中的这种强转+显式调用的代码将成为抽取抽象逻辑时很大的一个坑。</p></blockquote><p>该问题出现的根本原因，其实并不是我们解耦的ViewHolder导致的，对于一个普通的Activity =&gt; Adapter =&gt; ViewHolder这样的调用链而言也一样会存在该问题。只不过我们的设计结构在这条链路上多添加了一个Factory的节点而已，添加之后的链路变成了Activity =&gt; Adapter =&gt; Factory =&gt; ViewHolder。所以我们需要一个上下文类，来<b>穿透</b>这条调用链路，然后ViewHolder中触发的事件便可以通过该上下文类将事件透传到Activity中去。这样描述起来可能会写生硬，下面直接看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义上下文类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HolderContext</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* A被点击时触发 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onClickA</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Activity中实现HolderContext接口并将实现类传递给Adapter</span></span><br><span class="line">HolderContext holderContext = <span class="keyword">new</span> HolderContext() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Click Item A"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> TargetAdapter(holderContext, Collections.singletonList(<span class="keyword">new</span> AViewHolder.Factory()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Adapter将holderContext传递给Factory</span></span><br><span class="line"><span class="keyword">return</span> targetFactory.onCreateViewHolder(holderContext, parent, viewType);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Factory中构造AViewHolder时，将该参数传递进来</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AViewHolder(itemView, holderContext);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// AViewHolder中监听到点击事件后，通过HolderContext将事件透传出去</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    holderContext.onClickA();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一整条链路便串联起来了，ViewHolder与Activity的通信就直接通过HolderContext即可完成，而不需要Adapter和Factory的任何额外处理。这条链路的传递看起来很长、很复杂，但其实这层传递只需要写一遍，后续拓展如果再需要添加一个BViewHolder的事件，只需要在HolderContext中添加一个onClickB方法，并在Activity中实现即可。</p><h2 id="端上结构设计已解耦，数据再解耦"><a href="#端上结构设计已解耦，数据再解耦" class="headerlink" title="端上结构设计已解耦，数据再解耦"></a>端上结构设计已解耦，数据再解耦</h2><p>到了这里，基于结构设计的维度，Adapter中已经不再是与业务耦合的类了，但是当前类还包含ItemData这个数据类，我想把该类再进行一层抽象，从而让Adapter完全与业务无关，因为只有使得它完全与业务无关，我才能进而对于该类进行抽象，做成了抽象也就意味着通用。</p><p>接下来把ItemData替换为如下的IType接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IType</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function">String <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来把Adapetr中出现ItemData的地方全部替换为IType即可</p><h2 id="收官，最终的模样"><a href="#收官，最终的模样" class="headerlink" title="收官，最终的模样"></a>收官，最终的模样</h2><p>前面都是以遇到的问题为线索逐一进行解决，下面可以看下Adapter最终的代码结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">BaseViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;IType&gt; dataSource;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HolderContext holderContext;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;? extends BaseViewHolder.Factory&gt; factories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Integer&gt; type2ItemType = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseAdapter</span><span class="params">(@NonNull HolderContext holderContext, @NonNull List&lt;? extends BaseViewHolder.Factory&gt; factories)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.holderContext = holderContext;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.factories = factories;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; factories.size(); i++) &#123;</span><br><span class="line">            BaseViewHolder.Factory factory = factories.get(i);</span><br><span class="line">            String type = factory.getType();</span><br><span class="line">            Integer itemType = type2ItemType.get(type);</span><br><span class="line">            <span class="keyword">if</span> (itemType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                String currentFactory = factory.getClass().getName();</span><br><span class="line">                String sameFactory = factories.get(itemType).getClass().getName();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Same type found: "</span> + currentFactory + <span class="string">" and "</span> + sameFactory);</span><br><span class="line">            &#125;</span><br><span class="line">            type2ItemType.put(type, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        IType iType = dataSource.get(position);</span><br><span class="line">        String type = iType.getType();</span><br><span class="line">        <span class="keyword">return</span> type2ItemType.get(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        BaseViewHolder.Factory targetFactory = factories.get(viewType);</span><br><span class="line">        <span class="keyword">if</span> (targetFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No factory found with type equals "</span> + viewType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> targetFactory.onCreateViewHolder(holderContext, parent, viewType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据刷新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(@Nullable List&lt;IType&gt; dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource.clear();</span><br><span class="line">        <span class="keyword">if</span> (dataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dataSource.addAll(dataSource);</span><br><span class="line">        &#125;</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDataSource</span><span class="params">(@Nullable List&lt;IType&gt; dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSource != <span class="keyword">null</span> &amp;&amp; !dataSource.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dataSource.addAll(dataSource);</span><br><span class="line">            notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull BaseViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        IType itemData = dataSource.get(position);</span><br><span class="line">        holder.onBindData(itemData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到了这一步，Adapter的代码量已经精简到原来的一半左右，并且不再冗余任何具象业务逻辑的代码，这也就意味着该类不再是基于当前业务维度的类，而是一个解耦掉ViewHolder且从具象业务逻辑中泛化出来的抽象类，所以对于任何需要添加多个ItemType的Recycler.Adapter场景均可基于该类进行添加。</p><h2 id="痛点不再痛"><a href="#痛点不再痛" class="headerlink" title="痛点不再痛"></a>痛点不再痛</h2><p>回顾以上提到的两个痛点，维护性和拓展性，现在就开始基于本文最开始业务场景进行类型E这种Type进行拓展，来看下对应的代码改动：</p><h3 id="1-添加一个独立的EViewHolder类"><a href="#1-添加一个独立的EViewHolder类" class="headerlink" title="1. 添加一个独立的EViewHolder类"></a>1. 添加一个独立的EViewHolder类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EViewHolder</span> <span class="keyword">extends</span> <span class="title">BaseViewHolder</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TextView textView;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EViewHolder</span><span class="params">(View itemView, HolderContext holderContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(itemView, holderContext);</span><br><span class="line">        textView = itemView.findViewById(R.id.item_text_e);</span><br><span class="line">        textView.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindData</span><span class="params">(IType iType)</span> </span>&#123;</span><br><span class="line">        ItemData data = (ItemData) iType;</span><br><span class="line">        textView.setText(data.textE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(context, <span class="string">"Click Item E"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">BaseViewHolder</span>.<span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull HolderContext holderContext, @NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">            LayoutInflater inflater = LayoutInflater.from(parent.getContext());</span><br><span class="line">            View view = inflater.inflate(R.layout.item_e, parent, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EViewHolder(view, holderContext);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"typeE"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-注册EViewHolder-Factory"><a href="#2-注册EViewHolder-Factory" class="headerlink" title="2. 注册EViewHolder.Factory"></a>2. 注册EViewHolder.Factory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adapter = <span class="keyword">new</span> BaseAdapter(holderContext, Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> AViewHolder.Factory(),</span><br><span class="line">        <span class="keyword">new</span> BViewHolder.Factory(),</span><br><span class="line">        <span class="keyword">new</span> CViewHolder.Factory(),</span><br><span class="line">        <span class="keyword">new</span> DViewHolder.Factory(),</span><br><span class="line">        <span class="keyword">new</span> EViewHolder.Factory()</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p><b>是的，仅此两步就已经结束了！</b></p><p>回顾最开始提到的低耦合高内聚的原则，再对比一下在解耦前后来新添加EViewHolder对应的代码改动。</p><p>关于耦合，整个Activity与EViewHolder唯一耦合的地方只有一处绑定关系的代码——<code>new EViewHolder.Factory()</code>，而如果业务上有临时变更不需要展示EViewHolder项，只需要注释掉该行代码即可（Adapter需要添加通用的边界处理逻辑，不赘述）。</p><p>关于内聚，对比最开始的结构，每种类型的ViewHolder代码都是散落在Adapter中的各个地方：ItemType的声明写在Adapter的常量中，ViewHolder的创建写在了onCreateViewHolder方法中，ViewHolder的渲染写在了onBindViewHolder中，后端数据的type到ItemType的映射写在了getItemType中。而解耦之后，这里所有与ItemType有关的具象业务逻辑全部都内聚在<code>EViewHolder.java</code>一个文件中了。</p><p>至此，Adapter解耦的一整套链路全部已经打通了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>由于本文整篇较长，所以这里再做一下前面核心脉络的回顾：</p><ul><li>开发痛点是RecyclerView.Adapter的拓展性和维护性不够好，而基于这两者再进行分析，可归纳为一点——Adapter与ViewHolder之间的耦合性太强，所以明确接下来的目的就是解耦Adapter与ViewHolder</li><li>接下来便开始解耦Adapter中最关键的三个方法：onBindViewHolder、onCreateViewHolder、getItemType<ul><li>解耦onBindViewHolder通过抽象BaseViewHolder的方式解决</li><li>解耦onCreateViewHolder通过ViewHolder中新建Factory方式解决</li><li>解耦getItemType通过将最开始的Factory中的getItemType返回具象ItemType的方式替换为getType返回数据层面的type的方式解决</li></ul></li><li>然后进行数据层的抽象，将ItemData业务实体替换为Adapter关注的IType抽象接口</li><li>最后进行业务层的业务层的彻底剥离，将所有业务无关项进行Base类统一抽象</li></ul><p><strong><a href="https://github.com/puke3615/RecyclerViewWithoutItemType" target="_blank" rel="noopener">Github源码</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在RecyclerView中的ItemType很多时，Adapter的代码量也会随之不断增加，最近我一直在思考如何通过代码设计的方式来解决这种具象的业务问题，能否找到解决该类问题的通法？如何设计出一种模式，使得增删改一种ItemType时的成本降到最低？如何能够彻底解耦掉这些问题的核心大类——Adapter？&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://puke3615.github.io/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://puke3615.github.io/tags/RecyclerView/"/>
    
      <category term="代码设计" scheme="http://puke3615.github.io/tags/%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView的优化原理</title>
    <link href="http://puke3615.github.io/2018/08/26/Android-RecyclerView-Theory/"/>
    <id>http://puke3615.github.io/2018/08/26/Android-RecyclerView-Theory/</id>
    <published>2018-08-26T07:38:38.000Z</published>
    <updated>2018-08-26T11:45:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android端Native业务开发中涉及到列表的场景时，我们最先想到的就是使用<code>RecyclerView</code>或<code>ListView</code>（两者基本原理是相通的，以下均以<code>RecyclerView</code>为例说明），这篇文章将尝试通过基于一个具体场景来说明<code>RecyclerView</code>内部的优化原理。</p><a id="more"></a><h2 id="全量加载替换为逐项懒加载"><a href="#全量加载替换为逐项懒加载" class="headerlink" title="全量加载替换为逐项懒加载"></a>全量加载替换为逐项懒加载</h2><p>为了对比说明<code>RecyclerView</code>的优势，这里以<code>LinearLayout</code>作为参考进行对比。</p><p>在列表场景中，我们使用<code>RecyclerView</code>来代替<code>LinearLayout</code>，是因为前者通过对单项<code>ItemView</code>进行加载的方式来渲染整个页面，而不是基于整个页面进行一次性渲染。</p><p>举个例子，假如一个页面需要加载有100项的列表，其中每一项加载耗时需要5ms。如果使用传统的<code>LinearLayout</code>，一次性全部加载的时间就是<code>100 * 5ms = 500ms</code>，500ms加载时间对于用户而言是什么？以Android系统为了使得用户能在端上拥有60FPS的体验，而做出的每过<code>1s / 60FPS ≈ 16ms</code>发出一个<code>VSYNC</code>信号进行UI刷新为准，500ms就意味着在加载这个列表时将出现<code>(500ms - 16ms) / 16ms ≈ 30</code>帧的丢失，而用户感受到的就是当前列表加载时非常卡顿。而如果使用<code>RecyclerView</code>方式进行进行渲染，则每项渲染时间为5ms，两项渲染的间隙里仍然可以进行<code>VSYNC</code>对应的UI刷新操作，这种场景下几乎不会造成丢帧现象。</p><p>除此之外，<code>RecyclerView</code>对单项进行加载并非简单地从1次加载100项拆分为100次加载各加载1项，它在此基础上还做了懒加载的操作，即只有当用户界面滑动到当前项时才会进行加载。</p><p>举个例子，用户手机一屏最多能展示10项时，此时<code>RecyclerView</code>便只会渲染10次，每次渲染1项。当用户往下滑动到第11项准备要“露出来”的时候，<code>RecyclerView</code>才会渲染第11项，剩下的89项也是同样的加载方式。这样的设计带来的好处同常用的懒加载类似，就是将短时间内的密集型任务进行离散化分配，尽可能降低CPU的压力。</p><blockquote><p>该特性是RecylerView内部实现的，面向开发者是透明的</p></blockquote><h2 id="ItemView复用"><a href="#ItemView复用" class="headerlink" title="ItemView复用"></a>ItemView复用</h2><p>仅仅单项懒加载还不够，还要更快，这时我们需要将矛头指向耗时操作的罪魁祸首——<code>LayoutInflater#inflate</code>。在这一步中，Android系统会去解析<code>layout.xml</code>的资源文件，然后还可能会进行一系列的反射操作来实例化View，这一步的操作相较于View信息的填充而言，是尤为耗时的。而对于100项的列表，如果我们每次都去进行<code>inflate</code>操作的话，也将会对运行性能带来不少压力。</p><p><code>RecyclerView</code>对应该问题解法就是<b>复用</b>，它内部会有个<code>mCachedViews</code>的缓存变量，可以抽象理解为里面存储着每一个创建的子View，每次渲染子View时如果缓存中有未使用的子View会优先从缓存中取，当缓存的View不足以界面展示时，它就会再去创建新View并添加进去。</p><p>比如，总共需要展示100项，一屏显示10项，此时缓存中包含10个子View。</p><ul><li>当滑动到第11项时，发现缓存的10项全部用来UI展示，没有未使用的子View，此时便再创建一项子View并放到缓存中</li><li>当滑动到第12项时，此时第1项已经完全从屏幕上方滑到屏幕显示之外了，该项便是未使用的子View，此时<code>RecylerView</code>会直接复用该项来渲染第12项</li><li>后续项的加载都会隶属于上面的两种情况</li></ul><blockquote><p>注：该特性也是RecyclerView内部实现的，一样不需要开发者额外处理；而更早设计的ListView会不存在该特性的，我们开发者一般会通过<code>View#setTag</code>方式来手动实现该特性。这也是为什么RecyclerView的官方Api中直接显式的提出<code>ViewHolder</code>概念而ListView中并未有任何<code>ViewHolder</code>概念（ListView的<code>ViewHolder</code>是我们开发中手动加入的）的原因。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android端Native业务开发中涉及到列表的场景时，我们最先想到的就是使用&lt;code&gt;RecyclerView&lt;/code&gt;或&lt;code&gt;ListView&lt;/code&gt;（两者基本原理是相通的，以下均以&lt;code&gt;RecyclerView&lt;/code&gt;为例说明），这篇文章将尝试通过基于一个具体场景来说明&lt;code&gt;RecyclerView&lt;/code&gt;内部的优化原理。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://puke3615.github.io/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://puke3615.github.io/tags/RecyclerView/"/>
    
      <category term="性能优化" scheme="http://puke3615.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>基于深度学习的文本生成过程</title>
    <link href="http://puke3615.github.io/2018/08/10/ML-Text-Generator/"/>
    <id>http://puke3615.github.io/2018/08/10/ML-Text-Generator/</id>
    <published>2018-08-10T01:37:52.000Z</published>
    <updated>2018-08-12T15:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：基于RNN的文本生成器涉及到很多知识点，本文结合一个比较小的例子进行整个生成模型的流程总结，只涉及思路，不包含算法和代码，目的是理清整个预处理、训练、生成预测的流程。</p><a id="more"></a><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这短短的一生，我们最终都会失去。你不妨大胆一些，爱一个人，攀一座山，追一个梦。</span><br></pre></td></tr></table></figure><p>这里选择了电影《大鱼海棠》中一句很经典的台词作为示例，进行整个流程的总结。最终的目的是让我们的模型能够自动生成该句子。</p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>在目前深度学习框架如同雨后春笋般萌生的时代里，深度学习模型的搭建本身不再是高门槛的事情，相比之下数据预处理却是一个尤为重要且直接关系到最终生成结果的一环。</p><h3 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h3><p>一句话，一篇文章，我们要训练它，首先需要把它变成结构化、计算机可理解的序列。</p><p>这里我们就需要将上面的这段话进行拆分为很多个词，以供下一步处理。而我们常用的拆词有两种方式，基于char和基于word（对应到中文就是基于字和基于词），下面将展开说明两种拆词方式。</p><h4 id="基于char分词"><a href="#基于char分词" class="headerlink" title="基于char分词"></a>基于char分词</h4><p>最直观的看这种拆词方式，直接看拆分的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'这'</span>, <span class="string">'短'</span>, <span class="string">'短'</span>, <span class="string">'的'</span>, <span class="string">'一'</span>, <span class="string">'生'</span>, <span class="string">'，'</span>, <span class="string">'我'</span>, <span class="string">'们'</span>, <span class="string">'最'</span>, <span class="string">'终'</span>, <span class="string">'都'</span>, <span class="string">'会'</span>, <span class="string">'失'</span>, <span class="string">'去'</span>, <span class="string">'。'</span>, <span class="string">'你'</span>, <span class="string">'不'</span>, <span class="string">'妨'</span>, <span class="string">'大'</span>, <span class="string">'胆'</span>, <span class="string">'一'</span>, <span class="string">'些'</span>, <span class="string">'，'</span>, <span class="string">'爱'</span>, <span class="string">'一'</span>, <span class="string">'个'</span>, <span class="string">'人'</span>, <span class="string">'，'</span>, <span class="string">'攀'</span>, <span class="string">'一'</span>, <span class="string">'座'</span>, <span class="string">'山'</span>, <span class="string">'，'</span>, <span class="string">'追'</span>, <span class="string">'一'</span>, <span class="string">'个'</span>, <span class="string">'梦'</span>, <span class="string">'。'</span>]</span><br></pre></td></tr></table></figure><p>这种方式中的一个字、一个标点符号、一个空格、一个换行符，都是一个独立的词，我们都要进行统计。同时，在拆词时我们还需要对每个词进行词频统计并按照词频从高到低进行排序，以供接下来的去词使用，我们统计得出如下的结果</p><p><img src="/2018/08/10/ML-Text-Generator/char_freq.png" alt=""></p><h4 id="基于word分词"><a href="#基于word分词" class="headerlink" title="基于word分词"></a>基于word分词</h4><p>基于词进行拆分的方式是指拆分后的句子中会直接包含一些词语而非单字。对于英文就是一个单词，对于中文可以是一个字，也可以是一个词语。如果是一个词语，那该词语一定是确实有含义的而非任意进行组合。比如基于该示例进行的拆词结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'这'</span>, <span class="string">'短短的'</span>, <span class="string">'一生'</span>, <span class="string">'，'</span>, <span class="string">'我们'</span>, <span class="string">'最终'</span>, <span class="string">'都'</span>, <span class="string">'会'</span>, <span class="string">'失去'</span>, <span class="string">'。'</span>, <span class="string">'你'</span>, <span class="string">'不妨'</span>, <span class="string">'大胆'</span>, <span class="string">'一些'</span>, <span class="string">'，'</span>, <span class="string">'爱'</span>, <span class="string">'一个'</span>, <span class="string">'人'</span>, <span class="string">'，'</span>, <span class="string">'攀'</span>, <span class="string">'一座'</span>, <span class="string">'山'</span>, <span class="string">'，'</span>, <span class="string">'追'</span>, <span class="string">'一个'</span>, <span class="string">'梦'</span>, <span class="string">'。'</span>]</span><br></pre></td></tr></table></figure><p>对应的词频统计如下</p><p><img src="/2018/08/10/ML-Text-Generator/word_freq.png" alt=""></p><h3 id="去词"><a href="#去词" class="headerlink" title="去词"></a>去词</h3><p>在本示例汇总，去词步骤是可以省略的，因为总次数特别少。但对于几百M、甚至几十G的文本而言，该步骤会显得尤为重要。如果一本小说中有5000个字（去重后），但可能其有1000个词只出现过10次以下的，这部分词我们需要剔除掉，因为对于整个庞大的数据集而言这种低频次的词是可以忽略不计的。从这个维度来说只能说明保留低频词的不必要性，而实际上，我们还需要从另一维度来说明取出低频词的必要性，那就是防止维度爆炸，关于这一点会在后面提到。</p><h3 id="数据映射"><a href="#数据映射" class="headerlink" title="数据映射"></a>数据映射</h3><p>上面提到我们需要将数据转化为计算机可理解的序列，而实际上仅仅将句子转化为词的层面上，还是不够的。我们需要对词在进行数字形式的离散化，以便后面我们的模型能够进行识别。</p><p>这里我们就以上面基于char分词的结果进行映射选择，我们的词和数字索引的映射关系是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"一"</span>: <span class="number">0</span></span><br><span class="line"><span class="string">"，"</span>: <span class="number">1</span></span><br><span class="line"><span class="string">"短"</span>: <span class="number">2</span></span><br><span class="line"><span class="string">"个"</span>: <span class="number">3</span></span><br><span class="line"><span class="string">"。"</span>: <span class="number">4</span></span><br><span class="line"><span class="string">"都"</span>: <span class="number">5</span></span><br><span class="line"><span class="string">"追"</span>: <span class="number">6</span></span><br><span class="line"><span class="string">"这"</span>: <span class="number">7</span></span><br><span class="line"><span class="string">"胆"</span>: <span class="number">8</span></span><br><span class="line"><span class="string">"终"</span>: <span class="number">9</span></span><br><span class="line"><span class="string">"的"</span>: <span class="number">10</span></span><br><span class="line"><span class="string">"生"</span>: <span class="number">11</span></span><br><span class="line"><span class="string">"爱"</span>: <span class="number">12</span></span><br><span class="line"><span class="string">"梦"</span>: <span class="number">13</span></span><br><span class="line"><span class="string">"最"</span>: <span class="number">14</span></span><br><span class="line"><span class="string">"攀"</span>: <span class="number">15</span></span><br><span class="line"><span class="string">"我"</span>: <span class="number">16</span></span><br><span class="line"><span class="string">"座"</span>: <span class="number">17</span></span><br><span class="line"><span class="string">"山"</span>: <span class="number">18</span></span><br><span class="line"><span class="string">"妨"</span>: <span class="number">19</span></span><br><span class="line"><span class="string">"失"</span>: <span class="number">20</span></span><br><span class="line"><span class="string">"大"</span>: <span class="number">21</span></span><br><span class="line"><span class="string">"去"</span>: <span class="number">22</span></span><br><span class="line"><span class="string">"你"</span>: <span class="number">23</span></span><br><span class="line"><span class="string">"会"</span>: <span class="number">24</span></span><br><span class="line"><span class="string">"们"</span>: <span class="number">25</span></span><br><span class="line"><span class="string">"人"</span>: <span class="number">26</span></span><br><span class="line"><span class="string">"些"</span>: <span class="number">27</span></span><br><span class="line"><span class="string">"不"</span>: <span class="number">28</span></span><br></pre></td></tr></table></figure><p>该映射关系非常重要，将纵向贯穿到接下来的数据处理、模型训练和最后的模型预测的整个流程。由于该映射关系是标识<code>词 =&gt; 词索引</code>的，所以我们简称之为<code>word2index</code>；相反的，我们还需要一个<code>词索引 =&gt; 词</code>的反向映射关系，即<code>0: &quot;一&quot;, 1: &quot;，&quot;, 2: &quot;短&quot;, …</code>这种形式的映射关系，我们简称之为<code>index2word</code>。</p><h3 id="数据对齐"><a href="#数据对齐" class="headerlink" title="数据对齐"></a>数据对齐</h3><p>宏观来说，RNN模型是专门用来处理序列数据的，它最大的优势就是能够打破普通神经网络中维度固定的限制；但微观来说，RNN模型的基本单元又是一个个基本的神经元组成的，所以更小范畴内来看，在数据处理方面还是需要对训练数据进行数据对齐操作的。</p><p>具体的对齐操作是指我们根据指定长度（比如5）的词作为输入，前面不足该长度的用起始符（这里用<code>【</code>）代替，该输入序列的下一词会作为对应的输出，然后再结合该输出作为下次预测的输入继续进行预测，直到预测到结束符（这里用<code>】</code>标识）为止，便完成了一整个预测流程。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">['【', '【', '【', '【', '【'] =&gt; '这'</span><br><span class="line">['【', '【', '【', '【', '这'] =&gt; '短'</span><br><span class="line">['【', '【', '【', '这', '短'] =&gt; '短'</span><br><span class="line">['【', '【', '这', '短', '短'] =&gt; '的'</span><br><span class="line">['【', '这', '短', '短', '的'] =&gt; '一'</span><br><span class="line">['这', '短', '短', '的', '一'] =&gt; '生'</span><br><span class="line">['短', '短', '的', '一', '生'] =&gt; '，'</span><br><span class="line">['短', '的', '一', '生', '，'] =&gt; '我'</span><br><span class="line">['的', '一', '生', '，', '我'] =&gt; '们'</span><br><span class="line">['一', '生', '，', '我', '们'] =&gt; '最'</span><br><span class="line">['生', '，', '我', '们', '最'] =&gt; '终'</span><br><span class="line">['，', '我', '们', '最', '终'] =&gt; '都'</span><br><span class="line">['我', '们', '最', '终', '都'] =&gt; '会'</span><br><span class="line">['们', '最', '终', '都', '会'] =&gt; '失'</span><br><span class="line">['最', '终', '都', '会', '失'] =&gt; '去'</span><br><span class="line">['终', '都', '会', '失', '去'] =&gt; '。'</span><br><span class="line">['都', '会', '失', '去', '。'] =&gt; '你'</span><br><span class="line">['会', '失', '去', '。', '你'] =&gt; '不'</span><br><span class="line">['失', '去', '。', '你', '不'] =&gt; '妨'</span><br><span class="line">['去', '。', '你', '不', '妨'] =&gt; '大'</span><br><span class="line">['。', '你', '不', '妨', '大'] =&gt; '胆'</span><br><span class="line">['你', '不', '妨', '大', '胆'] =&gt; '一'</span><br><span class="line">['不', '妨', '大', '胆', '一'] =&gt; '些'</span><br><span class="line">['妨', '大', '胆', '一', '些'] =&gt; '，'</span><br><span class="line">['大', '胆', '一', '些', '，'] =&gt; '爱'</span><br><span class="line">['胆', '一', '些', '，', '爱'] =&gt; '一'</span><br><span class="line">['一', '些', '，', '爱', '一'] =&gt; '个'</span><br><span class="line">['些', '，', '爱', '一', '个'] =&gt; '人'</span><br><span class="line">['，', '爱', '一', '个', '人'] =&gt; '，'</span><br><span class="line">['爱', '一', '个', '人', '，'] =&gt; '攀'</span><br><span class="line">['一', '个', '人', '，', '攀'] =&gt; '一'</span><br><span class="line">['个', '人', '，', '攀', '一'] =&gt; '座'</span><br><span class="line">['人', '，', '攀', '一', '座'] =&gt; '山'</span><br><span class="line">['，', '攀', '一', '座', '山'] =&gt; '，'</span><br><span class="line">['攀', '一', '座', '山', '，'] =&gt; '追'</span><br><span class="line">['一', '座', '山', '，', '追'] =&gt; '一'</span><br><span class="line">['座', '山', '，', '追', '一'] =&gt; '个'</span><br><span class="line">['山', '，', '追', '一', '个'] =&gt; '梦'</span><br><span class="line">['，', '追', '一', '个', '梦'] =&gt; '。'</span><br><span class="line">['追', '一', '个', '梦', '。'] =&gt; '】'</span><br></pre></td></tr></table></figure><p>上面的映射关系是为了便于我们理解而写的形式，而实际上提供给我们模型学习的数据是通过上面的<code>word2index</code>映射的数据。如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">['39', '39', '39', '39', '39'] =&gt; ' 7'</span><br><span class="line">['39', '39', '39', '39', ' 7'] =&gt; ' 2'</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">[' 1', ' 6', ' 0', ' 3', '13'] =&gt; ' 4'</span><br><span class="line">[' 6', ' 0', ' 3', '13', ' 4'] =&gt; '40'</span><br></pre></td></tr></table></figure><p>由于index形式的数据可读性不好，就不一一展示出来了。</p><blockquote><p>注：word形式的数据到index形式的数据需要特别注意的一点是，<code>【</code>和<code>】</code>这两个标识符在<code>word2index</code>中是没有对应的index的，这个时候需要我们来约定一种映射关系：起始符对应总词数，结束符对应总词数 + 1。比如对于本例公有有39个词，那词索引范围就是0-38，此时起始符就对应总词数39，结束符就对应总次数39+1=40。</p></blockquote><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><h3 id="数据供给方式"><a href="#数据供给方式" class="headerlink" title="数据供给方式"></a>数据供给方式</h3><p>数据供给是指预处理后的数据供给模型进行训练，一般的数据供给的方式有两种：全量供给和基于生成器的供给。</p><h4 id="全量"><a href="#全量" class="headerlink" title="全量"></a>全量</h4><p>顾名思义，全量供给是指一次性把所有的数据全部提供给模型，告诉模型如何每次吃下多少（batch_size）条数据，然后模型自己会每次从中去取。</p><p>该方式的好处是数据供给方便，不需要过多的计算<code>steps_per_epoch</code>和<code>batch_size</code>的关系；缺点就是会占用全量训练数据的内存，所以对于小数据集的数据推荐使用该方式。</p><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>基于生成器模式的数据提供，它实际上是采用了懒加载的方式，模型通过迭代来取到下一batch的数据，生成器方式的数据供给可以通过<code>Python</code>语言的<code>yield</code>关键词来配合完成。</p><p>由于数据是懒加载的，因此该方式的好处是极大程度节省内存占用；当然对应的缺点就是实现的成本要高于前者，且需要计算出<code>steps_per_epoch</code>来间接告诉模型总数据量。（在CV方向的DL模型中基本上都会使用该方式。）</p><h2 id="模型预测"><a href="#模型预测" class="headerlink" title="模型预测"></a>模型预测</h2><h3 id="初始数据"><a href="#初始数据" class="headerlink" title="初始数据"></a>初始数据</h3><p>模型预测时可以选择一个”引子”作为模型初始状态的上下文，比如把”这短短的一”；当然也可以不选择，让模型自动预测，以作为下次迭代的上下文。</p><h3 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h3><p>和模型训练时不同的是，预测时我们只需要把<code>batch_size</code>设置为1即可，因为我们只需要预测当前的上下文出现的下一个词。</p><h3 id="结果选择"><a href="#结果选择" class="headerlink" title="结果选择"></a>结果选择</h3><p>模型最终预测的结果是一个<code>(n_words + 2, )</code>形式的numpy数组，其中每个元素就代表预测下一个词（或者是起始/结束符）的概率值。比如<code>[0.1, 0.03, 0.7, ...]</code>就表示0的概率是0.1，1的概率是0.03，2的概率是0.7，这里的0、1、2对应的就是预处理阶段的词索引，即对应一个词。</p><p>此时我们一般会按照预测的词概率进行选词，而非直接去选择概率最高的那个词。因为模型训练后的参数是固定的，如果”引子”数据也是固定的，那直接选择概率最高的词就会导致每次预测的结果是完全一样的，这有悖于我们要希望生成样本多样性的初衷。</p><h3 id="迭代预测"><a href="#迭代预测" class="headerlink" title="迭代预测"></a>迭代预测</h3><p>与预处理阶段的方式相同，我们每次都会将当前这次的输出结果并入到下次预测的输入，从而进入下次预测。比如当前的上下文是<code>这短短</code>，对应的预测结果是<code>的</code>，那下一次预测的上下文就是<code>这短短的</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：基于RNN的文本生成器涉及到很多知识点，本文结合一个比较小的例子进行整个生成模型的流程总结，只涉及思路，不包含算法和代码，目的是理清整个预处理、训练、生成预测的流程。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="RNN" scheme="http://puke3615.github.io/tags/RNN/"/>
    
  </entry>
  
  <entry>
    <title>自动化处理浏览器任务</title>
    <link href="http://puke3615.github.io/2018/08/02/Python-Selenium/"/>
    <id>http://puke3615.github.io/2018/08/02/Python-Selenium/</id>
    <published>2018-08-02T13:54:20.000Z</published>
    <updated>2018-08-03T01:17:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在日常工作当中，我们经常会和浏览器打交道，当然就可能会在浏览器上做一些重复、无脑的工作，这篇文章旨在对于这类问题出一个基于脚本的自动化解决方案。</p><a id="more"></a><h2 id="Selenium库"><a href="#Selenium库" class="headerlink" title="Selenium库"></a>Selenium库</h2><h3 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h3><p>一句话概括，<a href="https://www.seleniumhq.org/" target="_blank" rel="noopener">Selenium</a>就是一个浏览器自动化测试框架。它支持包括IE、Chrome、Mozilla Firefox、Mozilla Suite在内的大多数主流浏览器。当然本文主要讲述的并不是关于它在自动化测试部分方面的运用，该部分在Selenium官网和网上各种Blog处均有很多也很详细的介绍，这里我们要说的是基于它的浏览器控制能力来演化出的另一个应用方向——自动化处理任务。</p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>首先，在拥有python环境的os中命令行执行 <code>pip install selenium</code> 来安装Selenium库。（Mac os直接安装时可能会出现权限问题，此时尝试命令前面添加<code>sudo</code>，还不行时则需要尝试通过创建Python沙盒的方式来安装。）</p><p>其次，下载一个<strong>跟自己浏览器和版本对应</strong>的webdriver，然后将该文件配置在环境变量下。比如Chrome浏览器的webdriver就在<a href="http://chromedriver.chromium.org/downloads" target="_blank" rel="noopener">这里</a>下载。<b style="color:red">这里需要注意下载的webdriver版本不是越新越好，而是要下载跟自己浏览器版本匹配的。</b>我首次安装时在这里踩过坑。具体查看匹配的方式是<code>打开Chrome</code> =&gt; <code>点击菜单Chrome</code> =&gt; <code>关于Google Chrome</code>，在该界面能看到自己浏览器的版本。然后进入在上面的下载页面找到与自己版本匹配的webdriver，具体比较的地方在此处</p><p><img src="/2018/08/02/Python-Selenium/img0.png" alt=""></p><p>最后测试下是否配置正确，终端打开一个新窗口，输入命令<code>chromedriver -v</code>执行，如果配置没问题，此时便能看到webdriver的版本号，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cd Documents/libs </span><br><span class="line">➜  libs chromedriver -v</span><br><span class="line">ChromeDriver 2.38.552518 (183d19265345f54ce39cbb94cf81ba5f15905011)</span><br></pre></td></tr></table></figure><h4 id="快速开始-1"><a href="#快速开始-1" class="headerlink" title="快速开始"></a>快速开始</h4><p>环境配置完成之后，来通过一个简单的百度搜索然后进入Selenium官网的Demo来看看Selenium的实际运行效果。新建<code>client_selenium.py</code>脚本文件，然后执行添加如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个webdriver实例, 并打开百度页面</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到搜索框组件, 并输入关键词"selenium"</span></span><br><span class="line">element_input = browser.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">element_input.send_keys(<span class="string">'selenium'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到搜索按钮, 并指定点击操作</span></span><br><span class="line">element_search = browser.find_element_by_xpath(<span class="string">'//*[@value="百度一下"]'</span>)</span><br><span class="line">element_search.click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到selenium官网的链接, 并点击进入</span></span><br><span class="line">element_target = browser.find_element_by_xpath(<span class="string">'//*[contains(text(), "Web Browser Automation")]'</span>)</span><br><span class="line">element_target.click()</span><br></pre></td></tr></table></figure><p>执行该python文件后，脚本会通过webdriver来去驱动浏览器进行一系列的打开、输入、点击等操作，如下图</p><p><img src="/2018/08/02/Python-Selenium/img1.gif" alt=""></p><h4 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h4><p>Selenium库具有很丰富的api，但对于只需要写任务处理脚本而言，我们只需要了解一些比较核心高频的api，下面列举出常用的api</p><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">api</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">输入</td><td style="text-align:center"><code>send_keys(&#39;Hello&#39;)</code></td><td style="text-align:center">输入文本</td></tr><tr><td style="text-align:center">点击</td><td style="text-align:center"><code>click()</code></td><td style="text-align:center">执行点击</td></tr><tr><td style="text-align:center">查找元素</td><td style="text-align:center"><code>find_element_by_id()</code></td><td style="text-align:center">根据ID进查找</td></tr><tr><td style="text-align:center">查找元素</td><td style="text-align:center"><code>find_element_by_name()</code></td><td style="text-align:center">根据name查找</td></tr><tr><td style="text-align:center">查找元素</td><td style="text-align:center"><code>find_element_by_tag_name()</code></td><td style="text-align:center">根据标签查找</td></tr><tr><td style="text-align:center">查找元素</td><td style="text-align:center"><code>find_element_by_link_text()</code></td><td style="text-align:center">根据链接文本查找</td></tr><tr><td style="text-align:center">查找元素</td><td style="text-align:center"><code>find_element_by_class_name()</code></td><td style="text-align:center">根据class名查找</td></tr><tr><td style="text-align:center">查找元素</td><td style="text-align:center"><code>find_elements_by_css_selector()</code></td><td style="text-align:center">根据css选择器查找</td></tr><tr><td style="text-align:center">查找元素</td><td style="text-align:center"><code>find_elements_by_xpath()</code></td><td style="text-align:center">根据xpath语法查找</td></tr></tbody></table><p>可以看到，其中Selenium库包含丰富的元素查找相关的api，找到对应的元素是对该元素进行操作的基础，所以能否快速、便捷、精准的查找到目标元素至关重要。</p><p>这里着重强调一下<code>find_elements_by_xpath</code>函数，该函数是基于<a href="http://www.w3school.com.cn/xpath/" target="_blank" rel="noopener">XPath语法规范</a>进行查找元素的，该规范在爬虫开发、浏览器脚本、XML配置查找等方面的使用时相当高频的。实际上，上面的所有查找方法都可以通过该方法进行替代。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>（涉及到公司业务保密，这里就不展示出来了）</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>用原生Selenium的Api写过一个应用之后，虽然感觉它的Api不算复杂，但对于我们只想写一个自动化脚本而言，还是不够简练，毕竟它的Api的初衷是给为了做浏览器自动化测试使用的。</p><p>而我想要的效果就是，更简单，尽可能一行代码执行一个Action，而一个自动化脚本就是包含多个Action的一个Robot。于是就基于Selenium库封装了很薄的一层<a href="https://github.com/puke3615/selenium_robot" target="_blank" rel="noopener">selenium-robot库</a>，然后发布到<a href="https://pypi.org/project/selenium-robot/#description" target="_blank" rel="noopener">pypi仓库</a>里。</p><p>以最上面的访问Selenium官网的那个Demo来比较，用<code>selenium-robot</code>来实现出来的是这样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium_robot.actions <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> selenium_robot <span class="keyword">import</span> Robot</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">Robot(</span><br><span class="line">    Open(<span class="string">'https://www.baidu.com'</span>),</span><br><span class="line">    Input(<span class="string">'wd'</span>, <span class="string">'selenium'</span>),</span><br><span class="line">    Click(<span class="string">'百度一下'</span>),</span><br><span class="line">    Click(<span class="string">'Web Browser Automation'</span>)</span><br><span class="line">).setup(browser)</span><br></pre></td></tr></table></figure><p>代码量减少了一半多，最终运行的效果是一样的，对于自动化脚本的开发可以更加便捷、高效。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，基于上面的Selenium库，我们还能开发出很多自动化脚本：</p><p>可以把工作中重复的配置操作通过该方式完成，这种工作在运营人员面前应该不少，比如要配置N个活动，每天配置广告Banner，配置公告信息等；</p><p>可以结合某些xml解析库进行爬虫开发，而且这种爬虫是基于浏览器驱动进行数据爬取的，而非像Scrapy等这种基于纯数据角度的爬虫框架一样。人家是模拟浏览器请求，Selenium模拟都不模拟了，自己干脆直接驱动浏览器，这样几乎不会被反爬工具监测到；</p><p>脑洞再大一些，甚至还可以写网页版游戏的外挂等等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日常工作当中，我们经常会和浏览器打交道，当然就可能会在浏览器上做一些重复、无脑的工作，这篇文章旨在对于这类问题出一个基于脚本的自动化解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://puke3615.github.io/tags/Python/"/>
    
      <category term="脚本" scheme="http://puke3615.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="自动化" scheme="http://puke3615.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Python拼接微信好友头像大图</title>
    <link href="http://puke3615.github.io/2018/07/31/Python-Wechat-Avatar/"/>
    <id>http://puke3615.github.io/2018/07/31/Python-Wechat-Avatar/</id>
    <published>2018-07-31T14:48:53.000Z</published>
    <updated>2018-08-13T01:24:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于<code>itchat</code>库来获取微信好友头像并执行拼接操作，对微信上文字化好友列表数据进行可视化展示。</p><a id="more"></a><p><img src="/2018/07/31/Python-Wechat-Avatar/result.png" alt=""></p><h2 id="获取好友头像"><a href="#获取好友头像" class="headerlink" title="获取好友头像"></a>获取好友头像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_avatar</span><span class="params">(folder)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    保存微信好友头像</span></span><br><span class="line"><span class="string">    :param folder: 保存的文件夹</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    itchat.auto_login(hotReload=<span class="keyword">True</span>)</span><br><span class="line">    users = itchat.get_friends() <span class="keyword">or</span> []</span><br><span class="line">    print(<span class="string">'%d friends found.'</span> % len(users))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(folder):</span><br><span class="line">        os.makedirs(folder)</span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i, user <span class="keyword">in</span> enumerate(users):</span><br><span class="line">        nickname = user.RemarkName</span><br><span class="line">        username = user.UserName</span><br><span class="line">        file_path = os.path.join(folder, <span class="string">'%03d_%s.png'</span> % (i, nickname))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(file_path):  <span class="comment"># 不重复下载</span></span><br><span class="line">            avatar = itchat.get_head_img(username)</span><br><span class="line">            <span class="keyword">with</span> open(file_path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(avatar)</span><br><span class="line">                print(<span class="string">'Download %d: %s'</span> % (index, file_path))</span><br><span class="line">                index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这里只需要传入一个保存头像的文件夹即可，运行<code>itchat.auto_login(hotReload=True)</code>后会弹出微信扫码界面让你授权微信登录，以便接下来的好友数据获取。</p><p>在图片下载时，我添加了一个防止重复下载的判断，以免多次运行时每次都要重新进行头像的下载。</p><h2 id="取出待拼接头像"><a href="#取出待拼接头像" class="headerlink" title="取出待拼接头像"></a>取出待拼接头像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_image_files</span><span class="params">(folder, filters=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    取出待拼接头像</span></span><br><span class="line"><span class="string">    :param folder: 目标文件夹</span></span><br><span class="line"><span class="string">    :param filters: 需要过滤的图片</span></span><br><span class="line"><span class="string">    :return: 头像路径</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    filters = filters <span class="keyword">or</span> []</span><br><span class="line">    filenames = [os.path.join(folder, sub) <span class="keyword">for</span> sub <span class="keyword">in</span> os.listdir(folder)</span><br><span class="line">                 <span class="keyword">if</span> sub.endswith(<span class="string">'.png'</span>) <span class="keyword">and</span> <span class="keyword">not</span> filters.__contains__(sub)]</span><br><span class="line">    <span class="keyword">return</span> filenames</span><br></pre></td></tr></table></figure><p>这里单独写个方法是为了把过滤的逻辑封装进来，以便于去掉指定的微信好友的头像（比如纯色的头像在拼接之后的大图看上去很明显，非强迫症可忽略）。</p><h2 id="计算拼接的排列"><a href="#计算拼接的排列" class="headerlink" title="计算拼接的排列"></a>计算拼接的排列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_align_way</span><span class="params">(image_num, force_align=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    计算图片排版对齐方式</span></span><br><span class="line"><span class="string">    :param image_num: 图片数量</span></span><br><span class="line"><span class="string">    :return: (rowls, columns)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    actual_value = image_num ** <span class="number">0.5</span></span><br><span class="line">    suggest_value = int(actual_value)</span><br><span class="line">    <span class="keyword">if</span> actual_value == suggest_value <span class="keyword">or</span> force_align:</span><br><span class="line">        <span class="keyword">return</span> suggest_value, suggest_value</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> suggest_value, suggest_value + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>因为需要知道最终拼接图片的行列数，所有这里单独定义一个计算方法。算法就是直接对图片总数开根号，取出的结果如果正好是整数，就直接返回该结果。如果不是整数（大多数情况都如此），则根据参数<code>force_align</code>来决定是否强制进行正好全部铺满的显示。如果设为<code>True</code>，能强制铺满，但会有部分好友未显示完全；反之则是相对的情况。<strong>后面发现拼接图片最后一行有很多黑色空位时，只需要更改该参数为True即可。</strong></p><h2 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">join_images</span><span class="params">(image_files, rows, cols, width, height, save_file=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    拼接操作</span></span><br><span class="line"><span class="string">    :param image_files: 待拼接的图片</span></span><br><span class="line"><span class="string">    :param rows: 行数</span></span><br><span class="line"><span class="string">    :param cols: 列数</span></span><br><span class="line"><span class="string">    :param width: 每张小头像的宽度</span></span><br><span class="line"><span class="string">    :param height: 每张小头像的高度</span></span><br><span class="line"><span class="string">    :param save_file: 拼接好图片的保存路径</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    canvas = np.ones((height * rows, width * cols, <span class="number">3</span>), np.uint8)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(rows):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(cols):</span><br><span class="line">            index = row * cols + col</span><br><span class="line">            <span class="keyword">if</span> index &gt;= len(image_files):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            file_path = image_files[index]</span><br><span class="line">            im = Image.open(file_path)</span><br><span class="line">            im = im.resize((width, height))</span><br><span class="line">            im_data = np.array(im)</span><br><span class="line">            <span class="keyword">if</span> len(im_data.shape) == <span class="number">2</span>:</span><br><span class="line">                im_data = np.expand_dims(im_data, <span class="number">-1</span>)</span><br><span class="line">            x = col * width</span><br><span class="line">            y = row * height</span><br><span class="line">            canvas[y: y + height, x: x + width, :] = im_data</span><br><span class="line">    image = Image.fromarray(canvas)</span><br><span class="line">    image.show()</span><br><span class="line">    <span class="keyword">if</span> save_file:</span><br><span class="line">        image.save(save_file)</span><br></pre></td></tr></table></figure><p>拼接图片调用的是科学计算包<code>numpy</code>和图片库<code>PIL</code>，主要就是对<code>ndarray</code>进行操作。</p><p>最终将上面的步骤全部串联起来，执行如下主函数，便得到上面的拼接图片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FOLDER = <span class="string">'avatars'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 保存所有好友头像</span></span><br><span class="line">    save_avatar(FOLDER)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取到准备拼接的头像</span></span><br><span class="line">    image_files = get_image_files(FOLDER)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算拼接的行列</span></span><br><span class="line">    rows, columns = calculate_align_way(len(image_files), force_align=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行拼接操作</span></span><br><span class="line">    join_images(image_files, rows, columns, <span class="number">64</span>, <span class="number">64</span>, <span class="string">'result.png'</span>)</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/puke3615/wechat_avatar_python" target="_blank" rel="noopener">Github源码</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于&lt;code&gt;itchat&lt;/code&gt;库来获取微信好友头像并执行拼接操作，对微信上文字化好友列表数据进行可视化展示。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://puke3615.github.io/tags/Python/"/>
    
      <category term="脚本" scheme="http://puke3615.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="itchat" scheme="http://puke3615.github.io/tags/itchat/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio高频Postfix总结</title>
    <link href="http://puke3615.github.io/2018/07/31/Android-Studio-Postfix/"/>
    <id>http://puke3615.github.io/2018/07/31/Android-Studio-Postfix/</id>
    <published>2018-07-31T05:14:46.000Z</published>
    <updated>2018-08-01T05:16:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="var声明"><a href="#var声明" class="headerlink" title="var声明"></a>var声明</h3><p><img src="/2018/07/31/Android-Studio-Postfix/var.gif" alt="var"></p><a id="more"></a><h3 id="null判空"><a href="#null判空" class="headerlink" title="null判空"></a>null判空</h3><p><img src="/2018/07/31/Android-Studio-Postfix/null.gif" alt="null"></p><h3 id="notnull判非空"><a href="#notnull判非空" class="headerlink" title="notnull判非空"></a>notnull判非空</h3><p><img src="/2018/07/31/Android-Studio-Postfix/notnull.gif" alt="notnull"></p><h3 id="nn判非空"><a href="#nn判非空" class="headerlink" title="nn判非空"></a>nn判非空</h3><p><img src="/2018/07/31/Android-Studio-Postfix/nn.gif" alt="nn"></p><h3 id="for遍历"><a href="#for遍历" class="headerlink" title="for遍历"></a>for遍历</h3><p><img src="/2018/07/31/Android-Studio-Postfix/for.gif" alt="for"></p><h3 id="fori带索引的遍历"><a href="#fori带索引的遍历" class="headerlink" title="fori带索引的遍历"></a>fori带索引的遍历</h3><p><img src="/2018/07/31/Android-Studio-Postfix/fori.gif" alt="fori"></p><h3 id="not取反"><a href="#not取反" class="headerlink" title="not取反"></a>not取反</h3><p><img src="/2018/07/31/Android-Studio-Postfix/not.gif" alt="not"></p><h3 id="if条件判断"><a href="#if条件判断" class="headerlink" title="if条件判断"></a>if条件判断</h3><p><img src="/2018/07/31/Android-Studio-Postfix/if.gif" alt="if"></p><h3 id="cast强转"><a href="#cast强转" class="headerlink" title="cast强转"></a>cast强转</h3><p><img src="/2018/07/31/Android-Studio-Postfix/cast.gif" alt="cast"></p><h3 id="return返回值"><a href="#return返回值" class="headerlink" title="return返回值"></a>return返回值</h3><p><img src="/2018/07/31/Android-Studio-Postfix/return.gif" alt="return"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;var声明&quot;&gt;&lt;a href=&quot;#var声明&quot; class=&quot;headerlink&quot; title=&quot;var声明&quot;&gt;&lt;/a&gt;var声明&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2018/07/31/Android-Studio-Postfix/var.gif&quot; alt=&quot;var&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android Sutdio" scheme="http://puke3615.github.io/tags/Android-Sutdio/"/>
    
  </entry>
  
  <entry>
    <title>Java、Groovy、JavaScript、Python各语言对比</title>
    <link href="http://puke3615.github.io/2018/07/30/Program-Language-Contrast/"/>
    <id>http://puke3615.github.io/2018/07/30/Program-Language-Contrast/</id>
    <published>2018-07-30T11:00:08.000Z</published>
    <updated>2018-07-31T04:45:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Get-start"><a href="#Get-start" class="headerlink" title="Get start"></a>Get start</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, world."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">    println(<span class="string">'Hello, world.'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello, world."</span>);</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Hello, world.'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">"Hello"</span>;</span><br><span class="line">        <span class="comment">// 截取 (Hel)</span></span><br><span class="line">        System.out.println(a.substring(<span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">        <span class="comment">// 转化 (123)</span></span><br><span class="line">        System.out.println(String.valueOf(<span class="number">123</span>));</span><br><span class="line">        <span class="comment">// 拼接 (Hello, world.)</span></span><br><span class="line">        System.out.println(a + <span class="string">", world."</span>);</span><br><span class="line">        <span class="comment">// 格式化 (Hello, I am 10.)</span></span><br><span class="line">        System.out.println(String.format(<span class="string">"%s, I am %d."</span>, a, <span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Groovy-1"><a href="#Groovy-1" class="headerlink" title="Groovy"></a>Groovy</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">    <span class="keyword">def</span> a = <span class="string">"Hello"</span></span><br><span class="line">    <span class="comment">// 截取 (Hel)</span></span><br><span class="line">    println(a[<span class="number">0.</span><span class="number">.3</span>])</span><br><span class="line">    <span class="comment">// 转化 (123)</span></span><br><span class="line">    println(String.valueOf(<span class="number">123</span>));</span><br><span class="line">    <span class="comment">// 拼接 (Hello, world.)</span></span><br><span class="line">    println(a + <span class="string">", world."</span>)</span><br><span class="line">    <span class="comment">// 格式化 (Hello, I am 10.)</span></span><br><span class="line">    println(<span class="string">"$&#123;a&#125;, I am $&#123;10&#125;."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="comment">// 截取 (Hel)</span></span><br><span class="line"><span class="built_in">console</span>.log(a.substr(<span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// 转化 (123)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">123</span>));</span><br><span class="line"><span class="comment">// 拼接 (Hello, world.)</span></span><br><span class="line"><span class="built_in">console</span>.log(a + <span class="string">", world."</span>);</span><br><span class="line"><span class="comment">// 格式化 (Hello, I am 10.)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;a&#125;</span>, I am <span class="subst">$&#123;<span class="number">10</span>&#125;</span>.`</span>);</span><br></pre></td></tr></table></figure><h3 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = <span class="string">"Hello"</span></span><br><span class="line">    <span class="comment"># 截取 (Hel)</span></span><br><span class="line">    print(a[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">    <span class="comment"># 转化 (123)</span></span><br><span class="line">    print(str(<span class="number">123</span>))</span><br><span class="line">    <span class="comment"># 拼接 (Hello, world.)</span></span><br><span class="line">    print(a + <span class="string">", world."</span>)</span><br><span class="line">    <span class="comment"># 格式化 (Hello, I am 10.)</span></span><br><span class="line">    print(<span class="string">"%s, I am %d."</span> % (a, <span class="number">10</span>))</span><br><span class="line">    <span class="comment"># or</span></span><br><span class="line">    print(<span class="string">"&#123;&#125;, I am &#123;&#125;."</span>.format(a, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><h3 id="Java-2"><a href="#Java-2" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前时间戳 (1532955845305)</span></span><br><span class="line">        <span class="keyword">long</span> currentTimeMillis = System.currentTimeMillis();</span><br><span class="line">        System.out.println(currentTimeMillis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 格式化处理 (2018-07-30 21:04:05)</span></span><br><span class="line">        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        LocalDateTime now = LocalDateTime.now();</span><br><span class="line">        String format = formatter.format(now);</span><br><span class="line">        System.out.println(format);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Groovy-2"><a href="#Groovy-2" class="headerlink" title="Groovy"></a>Groovy</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">    <span class="comment">// 当前时间戳 (1532956684952)</span></span><br><span class="line">    <span class="keyword">def</span> currentTimeMillis = System.currentTimeMillis()</span><br><span class="line">    println(currentTimeMillis)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 格式化处理 (2018-07-30 21:18:05)</span></span><br><span class="line">    <span class="keyword">def</span> formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">def</span> now = LocalDateTime.now()</span><br><span class="line">    <span class="keyword">def</span> format = formatter.format(now)</span><br><span class="line">    println(format)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-2"><a href="#JavaScript-2" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前时间戳 (1532956509000)</span></span><br><span class="line"><span class="keyword">let</span> currentTimeMillis = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"><span class="built_in">console</span>.log(currentTimeMillis);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化处理 (2018-07-30 21:15:09)</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.Format = <span class="function"><span class="keyword">function</span> (<span class="params">fmt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> o = &#123;</span><br><span class="line">        <span class="string">"M+"</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>,  <span class="comment">// 月</span></span><br><span class="line">        <span class="string">"d+"</span>: <span class="keyword">this</span>.getDate(),       <span class="comment">// 日</span></span><br><span class="line">        <span class="string">"h+"</span>: <span class="keyword">this</span>.getHours(),      <span class="comment">// 时</span></span><br><span class="line">        <span class="string">"m+"</span>: <span class="keyword">this</span>.getMinutes(),    <span class="comment">// 分</span></span><br><span class="line">        <span class="string">"s+"</span>: <span class="keyword">this</span>.getSeconds(),    <span class="comment">// 秒</span></span><br><span class="line">        <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">// 季度</span></span><br><span class="line">        <span class="string">"S"</span>: <span class="keyword">this</span>.getMilliseconds() <span class="comment">// 毫秒</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> o)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(fmt)) fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length === <span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)));</span><br><span class="line">    <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> format = <span class="keyword">new</span> <span class="built_in">Date</span>().Format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(format);</span><br></pre></td></tr></table></figure><h3 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 当前时间戳 (1532957083)</span></span><br><span class="line">    print(int(round(time.time())))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 格式化处理 (2018-07-30 21:24:43)</span></span><br><span class="line">    format = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    print(format)</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="Java-3"><a href="#Java-3" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = plus(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Groovy-3"><a href="#Groovy-3" class="headerlink" title="Groovy"></a>Groovy</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">    <span class="keyword">def</span> result = plus <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">def</span> plus(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">    <span class="comment">// 最后一行return可省略</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-3"><a href="#JavaScript-3" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = plus(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h3 id="Python-3"><a href="#Python-3" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(a=<span class="number">0</span>, b=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    result = plus(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="Java-4"><a href="#Java-4" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"b"</span>);</span><br><span class="line">        list.add(<span class="string">"c"</span>);</span><br><span class="line">        <span class="comment">// 移除</span></span><br><span class="line">        list.remove(<span class="string">"c"</span>);</span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        String first = list.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拼接</span></span><br><span class="line">        List&lt;String&gt; added = Arrays.asList(<span class="string">"m"</span>, <span class="string">"n"</span>);</span><br><span class="line">        list.addAll(added);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Groovy-4"><a href="#Groovy-4" class="headerlink" title="Groovy"></a>Groovy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 新建 &amp; 添加</span></span><br><span class="line">    def list = [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">    <span class="comment">// 添加</span></span><br><span class="line">    list &lt;&lt; <span class="string">'c'</span></span><br><span class="line">    <span class="comment">// 移除</span></span><br><span class="line">    list -= <span class="string">'c'</span></span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    def first = list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼接</span></span><br><span class="line">    def added = [<span class="string">'m'</span>, <span class="string">'n'</span>]</span><br><span class="line">    list += added</span><br><span class="line">    <span class="comment">// [a, b, m, n]</span></span><br><span class="line">    println(list)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (i in list) &#123;</span><br><span class="line">        println(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// or</span></span><br><span class="line">    list.each &#123;</span><br><span class="line">        println(it)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-4"><a href="#JavaScript-4" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建 &amp; 添加</span></span><br><span class="line"><span class="keyword">let</span> list = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line">list.push(<span class="string">'c'</span>);</span><br><span class="line"><span class="comment">// 移除</span></span><br><span class="line">list = list.filter(<span class="function"><span class="params">s</span> =&gt;</span> s !== <span class="string">'c'</span>);</span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="keyword">let</span> first = list[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接</span></span><br><span class="line"><span class="keyword">let</span> added = [<span class="string">'m'</span>, <span class="string">'n'</span>];</span><br><span class="line">list = [...list, ...added];</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="comment">// list = list.concat(added);</span></span><br><span class="line"><span class="comment">// [a, b, m, n]</span></span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(list[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-4"><a href="#Python-4" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 新建 &amp; 添加</span></span><br><span class="line">    list = [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">    <span class="comment"># 添加</span></span><br><span class="line">    list.append(<span class="string">'c'</span>)</span><br><span class="line">    <span class="comment"># 移除</span></span><br><span class="line">    <span class="keyword">del</span> list[<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># or</span></span><br><span class="line">    <span class="comment"># list.remove('c')</span></span><br><span class="line">    print(list)</span><br><span class="line">    <span class="comment"># 查询</span></span><br><span class="line">    first = list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拼接</span></span><br><span class="line">    added = [<span class="string">'m'</span>, <span class="string">'n'</span>]</span><br><span class="line">    list = list + added</span><br><span class="line">    <span class="comment"># or</span></span><br><span class="line">    <span class="comment"># list = list.extend(added)</span></span><br><span class="line">    <span class="comment"># [a, b, m, n]</span></span><br><span class="line">    print(list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="Java-5"><a href="#Java-5" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">        map.put(<span class="string">"a"</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"b"</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">"c"</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 移除</span></span><br><span class="line">        map.remove(<span class="string">"c"</span>);</span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        Integer first = map.get(<span class="string">"a"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拼接</span></span><br><span class="line">        Map&lt;String, Integer&gt; added = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        added.put(<span class="string">"m"</span>, <span class="number">4</span>);</span><br><span class="line">        added.put(<span class="string">"n"</span>, <span class="number">5</span>);</span><br><span class="line">        map.putAll(added);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        map.forEach((key, value) -&gt; &#123;</span><br><span class="line">            System.out.println(key + <span class="string">": "</span> + value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Groovy-5"><a href="#Groovy-5" class="headerlink" title="Groovy"></a>Groovy</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">    <span class="comment">// 新建 &amp; 添加</span></span><br><span class="line">    <span class="keyword">def</span> map = [<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>]</span><br><span class="line">    <span class="comment">// 添加</span></span><br><span class="line">    map[<span class="string">'c'</span>] = <span class="number">3</span></span><br><span class="line">    <span class="comment">// 移除</span></span><br><span class="line">    map.remove(<span class="string">'c'</span>)</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    Integer first = map.get(<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼接</span></span><br><span class="line">    <span class="keyword">def</span> added = [<span class="string">'m'</span>: <span class="number">4</span>, <span class="string">'n'</span>: <span class="number">5</span>]</span><br><span class="line">    map += added</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    map.each &#123;</span><br><span class="line">        println(it.key + <span class="string">': '</span> + it.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-5"><a href="#JavaScript-5" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建 &amp; 添加</span></span><br><span class="line"><span class="keyword">let</span> map = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line">map[<span class="string">'c'</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 移除</span></span><br><span class="line"><span class="keyword">delete</span> map[<span class="string">'c'</span>];</span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="keyword">let</span> first = map[<span class="string">'a'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接</span></span><br><span class="line"><span class="keyword">let</span> added = &#123;<span class="string">'m'</span>: <span class="number">4</span>, <span class="string">'n'</span>: <span class="number">5</span>&#125;;</span><br><span class="line">map = &#123;...map, ...added&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(map);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> map) &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;map[key]&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-5"><a href="#Python-5" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 新建 &amp; 添加</span></span><br><span class="line">    map = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line">    <span class="comment"># 添加</span></span><br><span class="line">    map[<span class="string">'c'</span>] = <span class="number">3</span></span><br><span class="line">    <span class="comment"># 移除</span></span><br><span class="line">    <span class="keyword">del</span> map[<span class="string">'c'</span>]</span><br><span class="line">    <span class="comment"># 查询</span></span><br><span class="line">    first = map[<span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拼接</span></span><br><span class="line">    added = &#123;<span class="string">'m'</span>: <span class="number">4</span>, <span class="string">'n'</span>: <span class="number">5</span>&#125;</span><br><span class="line">    map.update(added)</span><br><span class="line">    print(map)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> map.items():</span><br><span class="line">        print(<span class="string">'%s: %s'</span> % (key, value))</span><br></pre></td></tr></table></figure><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="Java-6"><a href="#Java-6" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/Users/puke/Desktop/TODO.md"</span>);</span><br><span class="line">        String content = Files.readFile(file);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Groovy-6"><a href="#Groovy-6" class="headerlink" title="Groovy"></a>Groovy</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">    <span class="keyword">def</span> file = <span class="keyword">new</span> File(<span class="string">"/Users/puke/Desktop/TODO.md"</span>)</span><br><span class="line">    <span class="keyword">def</span> content = file.text</span><br><span class="line">    println(content)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-6"><a href="#Python-6" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"/Users/puke/Desktop/TODO.md"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">        print(content)</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="Java-7"><a href="#Java-7" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String url = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> URL(url).openStream();</span><br><span class="line">        String content = Files.readFile(inputStream);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Groovy-7"><a href="#Groovy-7" class="headerlink" title="Groovy"></a>Groovy</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">    <span class="keyword">def</span> url = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">    <span class="keyword">def</span> content = <span class="keyword">new</span> URL(url).openStream().text</span><br><span class="line">    println(content)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-7"><a href="#Python-7" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">    response = urllib2.urlopen(url)</span><br><span class="line">    content = response.read()</span><br><span class="line">    print(content)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Get-start&quot;&gt;&lt;a href=&quot;#Get-start&quot; class=&quot;headerlink&quot; title=&quot;Get start&quot;&gt;&lt;/a&gt;Get start&lt;/h2&gt;&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello, world.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Groovy&quot;&gt;&lt;a href=&quot;#Groovy&quot; class=&quot;headerlink&quot; title=&quot;Groovy&quot;&gt;&lt;/a&gt;Groovy&lt;/h3&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&#39;Hello, world.&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Hello, world.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;Hello, world.&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://puke3615.github.io/tags/Java/"/>
    
      <category term="Python" scheme="http://puke3615.github.io/tags/Python/"/>
    
      <category term="Groovy" scheme="http://puke3615.github.io/tags/Groovy/"/>
    
      <category term="JavaScript" scheme="http://puke3615.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio之Debug（二）：自定义Debug变量视图</title>
    <link href="http://puke3615.github.io/2018/06/06/Android-Studio-Debug-2/"/>
    <id>http://puke3615.github.io/2018/06/06/Android-Studio-Debug-2/</id>
    <published>2018-06-05T16:35:03.000Z</published>
    <updated>2018-07-28T04:01:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在使用IntelliJ的IDE进行Debug时，去查看一个未重写<code>toString</code>方法的对象需要展开当前的视图层级才能看到里面的属性，而通过自定义变量视图的方式可以直接查看，很大程度上提高Debug的效率。</p><a id="more"></a><h3 id="引出问题"><a href="#引出问题" class="headerlink" title="引出问题"></a>引出问题</h3><p>我们在Debug查看变量时通常会遇到这种情况</p><p><img src="/2018/06/06/Android-Studio-Debug-2/./viewWithoutToString.png" alt="viewWithoutToString.png"></p><p>此时我想查看<code>Goods</code>对象里面的具体属性值，需要点击左边的展开按钮才能查看里面具体的属性值，不能直接进行查看。更糟糕的是当<code>Goods</code>对象在<code>List</code>容器中时，我们如果想快速查找到当前<code>List</code>里元素的某一项（或几项）属性时，就会出现在下面的情况，我们只能逐一元素进行展开操作才能查看到元素对应的信息。</p><p><img src="/2018/06/06/Android-Studio-Debug-2/./viewListWithoutToString.png" alt="viewListWithoutToString.png"></p><h3 id="重写toString及其局限性"><a href="#重写toString及其局限性" class="headerlink" title="重写toString及其局限性"></a>重写toString及其局限性</h3><p>上述问题的一般解决方式是重写该类的<code>toString</code>方法，然后重新运行Porject，再次Debug时便可以看到变量的视图会自动变为<code>toString</code>方法的返回值，如下</p><p><img src="/2018/06/06/Android-Studio-Debug-2/./viewListWithToString.png" alt="viewListWithToString.png"></p><p>这样便能无需展开直接显示<code>Goods</code>类的成员变量了，但该方式有几个缺点</p><ul><li>添加<code>Goods</code>的<code>toString</code>方法之后需要重新运行</li><li>如果<code>Goods</code>是被依赖的<code>jar</code>这种已经被编译的只读类，则无法更改</li><li>对于<code>Goods</code>中包含大量属性（比如20+个）的情况下，无法全部显示完，所以就无法根据自己的需求决定查看具体哪些属性值</li></ul><h3 id="自定义变量视图"><a href="#自定义变量视图" class="headerlink" title="自定义变量视图"></a>自定义变量视图</h3><p>IDE提供给我们一种自定义变量视图的方式，专门用来解决上面的问题并弥补了<code>toString</code>方法的不足。这里会有个<code>变量解析器</code>的概念，它用来控制当前变量的显示值（即debug时显示在该变量后面的内容，下称”变量视图”）。</p><p>首先Debug状态下右击变量，选择<code>Customize Data Views</code>项</p><p><img src="/2018/06/06/Android-Studio-Debug-2/./CustomizeDataView.png" alt="CustomizeDataView.png"></p><p>接下来在<code>Customize Data Views</code>弹窗的Tab中选择<code>Java Type Renderers</code>项，如下</p><p><img src="/2018/06/06/Android-Studio-Debug-2/./JavaTypeReference.png" alt="JavaTypeReference.png"></p><p>点击<code>+</code>来添加一个自定义的<code>变量解析器</code></p><p><img src="/2018/06/06/Android-Studio-Debug-2/./Panel.png" alt="Panel.png"></p><p>自定义一个<code>变量解析器</code>，主要需要添加的是名称、解析类型和解析方式三部分。</p><blockquote><p>名称：该解析器的标识名称</p><p>解析类型：表示当前的解析器只对哪种类型的类进行解析</p><p>解析方式：此处是核心部分，可以写一个Java表达式，也可以写一段代码，这里的返回值就是该变量视图</p></blockquote><p>我们可以在IDE中添加多个<code>变量解析器</code>，通过控制它的开启、禁用、顺序、适用类等来控制当前变量的显示情况，下面进行一次完整的操作流程演示</p><p><img src="/2018/06/06/Android-Studio-Debug-2/./CustomGoodsRenderers.gif" alt="CustomGoodsRenderers.gif"><br>通过自定义<code>变量解析器</code>的好处是不需要重新运行整个Project；而且还可以在Debug期间动态切换变量视图，比如</p><ul><li>查看<code>name</code>属性时：<code>&quot;name: &quot; + getName()</code></li><li>查看<code>type</code>属性时：<code>&quot;type: &quot; + getType()</code></li><li>查看<code>title</code>属性时：<code>&quot;title: &quot; + getTitle()</code></li><li>……</li></ul><h3 id="再进一步抽象"><a href="#再进一步抽象" class="headerlink" title="再进一步抽象"></a>再进一步抽象</h3><p>看了官网的自定义Debug变量视图这部分介绍后，感觉着实对于Debug很实用，通过自实现的方式使得开发者能够动态化控制变量视图。</p><p>自定义<code>变量解析器</code>的方式已经能够解决开篇提到的问题，但我更希望能通过它来找到控制变量视图的通法，即写一个通用的<code>变量解析器</code>而不是每debug一种类型的变量就单独添加一个解析器。接下来要做的事情很清楚了，就是添加一个能够将对象实例序列化成字符串的方法即可。最先想到的是通过Json进行转化，但Json一般依赖三方包，而我们想让Debug功能能够跟IDE是统一基准线的，所以尽可能选择使用Jdk自带的api。</p><p>于是考虑到了反射，对于一般通用的变量视图，我们可以直接通过反射取到每个属性名，然后结合当前实例来获取属性值，直接在上面的<code>解析类型</code>中指定为<code>java.lang.Object</code>以支持所有类型变量的解析，<code>解析方式</code>中添加下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (((Object) <span class="keyword">this</span>) <span class="keyword">instanceof</span> String</span><br><span class="line">        || ((Object) <span class="keyword">this</span>) <span class="keyword">instanceof</span> Number</span><br><span class="line">        || ((Object) <span class="keyword">this</span>) <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">    <span class="keyword">return</span> ((Object) <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"&#123;"</span>);</span><br><span class="line">Class&lt;?&gt; cls = ((Object) <span class="keyword">this</span>).getClass();</span><br><span class="line">java.lang.reflect.Field[] fields = cls.getDeclaredFields();</span><br><span class="line"><span class="keyword">if</span> (fields != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> size = fields.length;</span><br><span class="line">    <span class="keyword">for</span> (java.lang.reflect.Field field : fields) &#123;</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object value = field.get((Object) <span class="keyword">this</span>);</span><br><span class="line">        sb.append(field.getName())</span><br><span class="line">                .append(<span class="string">"="</span>)</span><br><span class="line">                .append(String.valueOf(value));</span><br><span class="line">        <span class="keyword">if</span> (--size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.append(<span class="string">"&#125;"</span>).toString();</span><br></pre></td></tr></table></figure><p>添加完毕之后，会发现此时我们的IDE在Debug时异常强大，所有类型的变量视图均自动转化成<code>key-value</code>形式的字符串，再也不用为了Debug变量而重写<code>toString</code>方法。看下Debug的效果</p><p><img src="/2018/06/06/Android-Studio-Debug-2/./final.png" alt="final.png"></p><p>这里的<code>User</code>和<code>Goods</code>类均没有重写<code>toString</code>方法，但都能通过上面添加的通用解析器来进行变量视图解析。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在使用IntelliJ的IDE进行Debug时，去查看一个未重写&lt;code&gt;toString&lt;/code&gt;方法的对象需要展开当前的视图层级才能看到里面的属性，而通过自定义变量视图的方式可以直接查看，很大程度上提高Debug的效率。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://puke3615.github.io/tags/Android/"/>
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android Studio" scheme="http://puke3615.github.io/tags/Android-Studio/"/>
    
      <category term="Debug" scheme="http://puke3615.github.io/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio之Debug（一）：运行期代码植入</title>
    <link href="http://puke3615.github.io/2018/06/05/Android-Studio-Debug-1/"/>
    <id>http://puke3615.github.io/2018/06/05/Android-Studio-Debug-1/</id>
    <published>2018-06-04T16:44:15.000Z</published>
    <updated>2018-07-28T04:00:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们开发中经常使用IDE的Debug功能，使用最频繁的就是断点查看变量内容，这篇文章主要是介绍在Debug时很常用的一些功能，如Debug变量更新、动态代码植入等。</p><a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>看下面一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] NAMES = &#123;<span class="string">"美队"</span>, <span class="string">"浩克"</span>, <span class="string">"黑寡妇"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;User&gt; USERS = Arrays.stream(NAMES)</span><br><span class="line">            .map(name -&gt; <span class="keyword">new</span> User(name, <span class="string">"男"</span>))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (User user : USERS) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们直接运行这段代码，得到的输出如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Client.User(name=美队, sex=男)</span><br><span class="line">Client.User(name=浩克, sex=男)</span><br><span class="line">Client.User(name=黑寡妇, sex=男)</span><br></pre></td></tr></table></figure><p>接下来都会围绕这段代码进行说明</p><h3 id="普通断点"><a href="#普通断点" class="headerlink" title="普通断点"></a>普通断点</h3><p>开发过程中普通断点在Debug过程中使用的算是最频繁的，只要在代码处添加该类型的断点，在Debug模式下，一旦代码执行到改行，程序将进入挂起状态，此时我们能查看到当前的运行状态，如图</p><p><img src="/2018/06/05/Android-Studio-Debug-1/./normal_breakpoint.png" alt="normal_breakpoint.png"></p><h3 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h3><p>当添加断点的方法会被多次执行到，而我们只希望程序在特定的一些特定的地方（如只有在当前的user是<code>黑寡妇</code>时）断下来，此时我们可以借助条件断点，如下</p><p><img src="/2018/06/05/Android-Studio-Debug-1/./condition_breakpoint.gif" alt="condition_breakpoint.gif"></p><p><b>注意看一下<code>Condition</code>部分，此处需要返回一个<code>boolean</code>类型的值，该值就是为了告诉程序当执行到该行代码时是否进行断点，true表示进行断点，false反之。</b>上面只需要对<code>黑寡妇</code>进行断点，所以添加的<code>Condition</code>是<code>&quot;黑寡妇&quot;.equals(user.getName())</code>。</p><h3 id="改变变量状态"><a href="#改变变量状态" class="headerlink" title="改变变量状态"></a>改变变量状态</h3><p>有时需要对断点时的变量赋值操作，已更改此时变量的值，这时可以使用<code>Set Value</code>方式，如下</p><p><img src="/2018/06/05/Android-Studio-Debug-1/./set_value.gif" alt="set_value.gif"></p><p>除了<code>Set Value</code>，还可以通过估值器进行改变值状态，如下</p><p><img src="/2018/06/05/Android-Studio-Debug-1/./evaluate.gif" alt="evaluate.gif"></p><h3 id="条件断点-代码植入"><a href="#条件断点-代码植入" class="headerlink" title="条件断点 + 代码植入"></a>条件断点 + 代码植入</h3><p><b>改变变量状态能够动态地设置变量值，条件断点可以控制断点是能在此处挂起，那将两者结合就能达到在程序不挂起的情况下进行动态代码植入的效果。</b></p><p><img src="/2018/06/05/Android-Studio-Debug-1/./insert_code.gif" alt="insert_code.gif"></p><p><code>Condition</code>里插入的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"黑寡妇"</span>.equals(user.getName())) &#123;</span><br><span class="line">    user.setSex(<span class="string">"女"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此处返回false为了告诉IDE在该断点出不对程序执行挂起操作</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><p>这就相当于提供了运行期代码的动态植入功能，而且可以通过<code>Enable/Disable</code>断点的状态来进行开启/关闭该部分动态代码是否执行。我们可以通过这种方式添加任何希望添加的代码，比如在每个user对象print之前添加自定一段print</p><p><img src="/2018/06/05/Android-Studio-Debug-1/./insert_print.gif" alt="insert_print.gif"></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>Debug期间动态植入的应用场景其实有很多的，对应Android端，有时候只需要改变一个变量，添加一行代码就需要重新run整个Project，需要花费整个compile和install的时间才能看出改动之后的效果，如果当前这次更改无效的话，甚至需要再次修改再次运行，而通过debug方式，可以直接对其进行操作。对于后端每次改动之后的重新部署也一样（不考虑动态部署的情况）。</p><p>以Android场景为例，如下的代码，接收一个<code>imageUrl</code>参数并加载出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_CONTENT = <span class="string">"imageUrl"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Context context, String content)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(context, ImageActivity.class);</span><br><span class="line">        intent.putExtra(KEY_CONTENT, content);</span><br><span class="line">        context.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ImageView imageView = findViewById(R.id.image);</span><br><span class="line">        <span class="comment">// 取出参数内容</span></span><br><span class="line">        String imageUrl = getIntent().getStringExtra(KEY_CONTENT);</span><br><span class="line">        Glide.with(<span class="keyword">this</span>).load(imageUrl).into(imageView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未植入代码之前，跳转到当前页面是这样的</p><p><img src="/2018/06/05/Android-Studio-Debug-1/./image_origin.png" alt="image_origin.png"></p><p>此时如果需要动态改变当前的<code>imageUrl</code>参数，可以进行Debug模式，并通过动态代码植入方式进行<code>imageUrl</code>变量的重赋值，如下</p><p><img src="/2018/06/05/Android-Studio-Debug-1/./insert_image_url.gif" alt="insert_image_url.gif"></p><p>添加植入的复制代码之后，进入Debug模式，然后重新进入该页面，显示的图片便替换为修改后的了。</p><p><img src="/2018/06/05/Android-Studio-Debug-1/./image_changed.png" alt="image_changed.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们开发中经常使用IDE的Debug功能，使用最频繁的就是断点查看变量内容，这篇文章主要是介绍在Debug时很常用的一些功能，如Debug变量更新、动态代码植入等。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://puke3615.github.io/tags/Android/"/>
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android Studio" scheme="http://puke3615.github.io/tags/Android-Studio/"/>
    
      <category term="Debug" scheme="http://puke3615.github.io/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>Keras框架总结</title>
    <link href="http://puke3615.github.io/2017/11/08/Keras-Doc-Summary/"/>
    <id>http://puke3615.github.io/2017/11/08/Keras-Doc-Summary/</id>
    <published>2017-11-08T10:37:32.000Z</published>
    <updated>2018-07-28T02:05:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Keras是基于Tensorflow、Theano以及CNTK为后端的高层神经网络API，通过函数式编程风格进行封装，API面向开发者非常友好，能够把idea迅速转换为结果。</p><a id="more"></a><p><img src="/2017/11/08/Keras-Doc-Summary/./Keras.png" alt="Keras.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Keras是基于Tensorflow、Theano以及CNTK为后端的高层神经网络API，通过函数式编程风格进行封装，API面向开发者非常友好，能够把idea迅速转换为结果。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="Keras" scheme="http://puke3615.github.io/tags/Keras/"/>
    
      <category term="Python" scheme="http://puke3615.github.io/tags/Python/"/>
    
      <category term="思维导图" scheme="http://puke3615.github.io/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>基于RNN自动作诗源码剖析</title>
    <link href="http://puke3615.github.io/2017/10/12/Tensorflow-Poems-Source/"/>
    <id>http://puke3615.github.io/2017/10/12/Tensorflow-Poems-Source/</id>
    <published>2017-10-12T05:21:32.000Z</published>
    <updated>2018-07-28T10:00:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Tensorflow Poems是一款基于RNN（循环神经网络）的 <a href="https://github.com/jinfagang/tensorflow_poems" target="_blank" rel="noopener">Github开源项目</a>，它能通过学习大量古诗文和歌词然后能够自己来模仿创造诗文和歌词。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>就项目本身，其意义不是很大，权当娱乐就行。这里的重点是解读如何从最原始的诗句，到数据的读取，到数据预处理，到模型的构建，再到最后的训练和使用流程。</p><h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><p>通过上面的github地址可以下载到项目源码，其中古诗文的数据集是<code>dataset/data/poems.txt</code>，打开可以看到如下的内容（篇幅限制，只显示了前两行诗句）。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首春:寒随穷律变，春逐鸟声开。初风飘带柳，晚雪间花梅。碧林青旧竹，绿沼翠新苔。芝田初雁去，绮树巧莺来。</span><br><span class="line">初晴落景:晚霞聊自怡，初晴弥可喜。日晃百花色，风动千林翠。池鱼跃不同，园鸟声还异。寄言博通者，知予物外志。</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>整体的格式还是蛮清晰的，每行就代表一首诗，每首诗由标题和内容两部分组成，中间以冒号分割。</p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>代码位于<code>poems.py</code>文件的<code>process_peoms</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_poems</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    <span class="comment"># 诗集</span></span><br><span class="line">    poems = []</span><br><span class="line">    <span class="keyword">with</span> open(file_name, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 取出title和content</span></span><br><span class="line">                title, content = line.strip().split(<span class="string">':'</span>)</span><br><span class="line">                <span class="comment"># 移除content中的所有空格</span></span><br><span class="line">                content = content.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">                <span class="comment"># 过滤掉包含特殊字符的诗</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">'_'</span> <span class="keyword">in</span> content <span class="keyword">or</span> <span class="string">'('</span> <span class="keyword">in</span> content <span class="keyword">or</span> <span class="string">'（'</span> <span class="keyword">in</span> content <span class="keyword">or</span> <span class="string">'《'</span> <span class="keyword">in</span> content <span class="keyword">or</span> <span class="string">'['</span> <span class="keyword">in</span> content <span class="keyword">or</span> \</span><br><span class="line">                                start_token <span class="keyword">in</span> content <span class="keyword">or</span> end_token <span class="keyword">in</span> content:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 过滤掉过长或过短的诗句</span></span><br><span class="line">                <span class="keyword">if</span> len(content) &lt; <span class="number">5</span> <span class="keyword">or</span> len(content) &gt; <span class="number">79</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 将内容加上前缀(G)和后缀(E)</span></span><br><span class="line">                content = start_token + content + end_token</span><br><span class="line">                <span class="comment"># 处理后的添加到诗集中</span></span><br><span class="line">                poems.append(content)</span><br><span class="line">            <span class="comment"># 处理过程出错则跳过, 忽略掉</span></span><br><span class="line">            <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 按诗的字数排序</span></span><br><span class="line">    poems = sorted(poems, key=<span class="keyword">lambda</span> l: len(line))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计每个字出现次数</span></span><br><span class="line">    all_words = []</span><br><span class="line">    <span class="keyword">for</span> poem <span class="keyword">in</span> poems:</span><br><span class="line">        all_words += [word <span class="keyword">for</span> word <span class="keyword">in</span> poem]</span><br><span class="line">    <span class="comment"># 计算每个字对应的频率</span></span><br><span class="line">    counter = collections.Counter(all_words)</span><br><span class="line">    <span class="comment"># 按照文字频率进行倒序排列</span></span><br><span class="line">    count_pairs = sorted(counter.items(), key=<span class="keyword">lambda</span> x: -x[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 取出排列后的字集, 赋值给words</span></span><br><span class="line">    words, _ = zip(*count_pairs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将words最后追加一位空格</span></span><br><span class="line">    words = words[:len(words)] + (<span class="string">' '</span>,)</span><br><span class="line">    <span class="comment"># 每个字映射为一个数字ID</span></span><br><span class="line">    word_int_map = dict(zip(words, range(len(words))))</span><br><span class="line">    <span class="comment"># 将诗句中的每个word都注意映射为对应的数字ID</span></span><br><span class="line">    poems_vector = [list(map(<span class="keyword">lambda</span> word: word_int_map.get(word, len(words)), poem)) <span class="keyword">for</span> poem <span class="keyword">in</span> poems]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 依次返回数字ID表示的诗句、汉字-ID的映射map、所有的汉字的列表</span></span><br><span class="line">    <span class="keyword">return</span> poems_vector, word_int_map, words</span><br></pre></td></tr></table></figure><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>代码位于<code>model.py</code>的<code>rnn_model</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_model</span><span class="params">(model, input_data, output_data, vocab_size, rnn_size=<span class="number">128</span>, num_layers=<span class="number">2</span>, batch_size=<span class="number">64</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              learning_rate=<span class="number">0.01</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    构造rnn的序列模型</span></span><br><span class="line"><span class="string">    :param model: model class</span></span><br><span class="line"><span class="string">    :param input_data: 输入数据占位符</span></span><br><span class="line"><span class="string">    :param output_data: 输出数据占位符</span></span><br><span class="line"><span class="string">    :param vocab_size: words的总长度</span></span><br><span class="line"><span class="string">    :param rnn_size: rnn的units数</span></span><br><span class="line"><span class="string">    :param num_layers: rnn中cell的层数</span></span><br><span class="line"><span class="string">    :param batch_size: 每个batch的样本数量</span></span><br><span class="line"><span class="string">    :param learning_rate: 学习率</span></span><br><span class="line"><span class="string">    :return: 模型状态集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 声明模型状态集, 由于模型需要返回多个相关值, 故以map集合的形式向外部返回</span></span><br><span class="line">    end_points = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择rnn的具体cell类型, 提供了rnn、gru、lstm三种</span></span><br><span class="line">    <span class="keyword">if</span> model == <span class="string">'rnn'</span>:</span><br><span class="line">        cell_fun = tf.contrib.rnn.BasicRNNCell</span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">'gru'</span>:</span><br><span class="line">        cell_fun = tf.contrib.rnn.GRUCell</span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">'lstm'</span>:</span><br><span class="line">        cell_fun = tf.contrib.rnn.BasicLSTMCell</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造具体的cell</span></span><br><span class="line">    cell = cell_fun(rnn_size, state_is_tuple=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 将单层的cell变为更深的cell, 以表征更复杂的关联关系</span></span><br><span class="line">    cell = tf.contrib.rnn.MultiRNNCell([cell] * num_layers, state_is_tuple=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化cell的状态</span></span><br><span class="line">    <span class="keyword">if</span> output_data <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># 训练时batch容量为batch_size</span></span><br><span class="line">        initial_state = cell.zero_state(batch_size, tf.float32)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 使用时batch容量为1</span></span><br><span class="line">        initial_state = cell.zero_state(<span class="number">1</span>, tf.float32)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># tensorflow对于lookup_embedding的操作只能再cpu上进行</span></span><br><span class="line">    <span class="keyword">with</span> tf.device(<span class="string">"/cpu:0"</span>):</span><br><span class="line">        <span class="comment"># 构造(vocab_size + 1, run_size)的Tensor</span></span><br><span class="line">        embedding = tf.get_variable(<span class="string">'embedding'</span>, initializer=tf.random_uniform(</span><br><span class="line">            [vocab_size + <span class="number">1</span>, rnn_size], <span class="number">-1.0</span>, <span class="number">1.0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># embedding_lookup函数</span></span><br><span class="line">        <span class="comment"># output = embedding_lookup(embedding, ids): 将ids里的element替换为embedding中对应element位的值</span></span><br><span class="line">        <span class="comment"># 即: embedding: [[1, 2], [3, 4], [5, 6]]  ids: [1, 2]  则outputs: [[3, 4], [5, 6]]</span></span><br><span class="line">        <span class="comment"># 类比one_hot, 只是这里是x_hot</span></span><br><span class="line">        <span class="comment"># embedding: (3, 2)  ids: (10, )  outputs: (10, 2)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理之后的shape为(batch_size, n_steps, rnn_size)</span></span><br><span class="line">        inputs = tf.nn.embedding_lookup(embedding, input_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># (batch_size, n_steps, rnn_size) =&gt; (batch_size, n_steps, rnn_size)</span></span><br><span class="line">    outputs, last_state = tf.nn.dynamic_rnn(cell, inputs, initial_state=initial_state)</span><br><span class="line">    <span class="comment"># (batch_size, n_steps, rnn_size) =&gt; (batch_size x n_steps, rnn_size)</span></span><br><span class="line">    output = tf.reshape(outputs, [<span class="number">-1</span>, rnn_size])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># (batch_size x n_steps, rnn_size) =&gt; (batch_size x n_steps, vocab_size + 1)</span></span><br><span class="line">    weights = tf.Variable(tf.truncated_normal([rnn_size, vocab_size + <span class="number">1</span>]))</span><br><span class="line">    bias = tf.Variable(tf.zeros(shape=[vocab_size + <span class="number">1</span>]))</span><br><span class="line">    logits = tf.nn.bias_add(tf.matmul(output, weights), bias=bias)</span><br><span class="line">    <span class="comment"># [?, vocab_size+1]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> output_data <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># output_data must be one-hot encode</span></span><br><span class="line">        labels = tf.one_hot(tf.reshape(output_data, [<span class="number">-1</span>]), depth=vocab_size + <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># should be [?, vocab_size+1]</span></span><br><span class="line"></span><br><span class="line">        loss = tf.nn.softmax_cross_entropy_with_logits(labels=labels, logits=logits)</span><br><span class="line">        <span class="comment"># loss shape should be [?, vocab_size+1]</span></span><br><span class="line">        total_loss = tf.reduce_mean(loss)</span><br><span class="line">        train_op = tf.train.AdamOptimizer(learning_rate).minimize(total_loss)</span><br><span class="line"></span><br><span class="line">        end_points[<span class="string">'initial_state'</span>] = initial_state</span><br><span class="line">        end_points[<span class="string">'output'</span>] = output</span><br><span class="line">        end_points[<span class="string">'train_op'</span>] = train_op</span><br><span class="line">        end_points[<span class="string">'total_loss'</span>] = total_loss</span><br><span class="line">        end_points[<span class="string">'loss'</span>] = loss</span><br><span class="line">        end_points[<span class="string">'last_state'</span>] = last_state</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        prediction = tf.nn.softmax(logits)</span><br><span class="line"></span><br><span class="line">        end_points[<span class="string">'initial_state'</span>] = initial_state</span><br><span class="line">        end_points[<span class="string">'last_state'</span>] = last_state</span><br><span class="line">        end_points[<span class="string">'prediction'</span>] = prediction</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> end_points</span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>获取数据batch的代码位于<code>poem.py</code>的<code>generate_batch</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_batch</span><span class="params">(batch_size, poems_vec, word_to_int)</span>:</span></span><br><span class="line">    <span class="comment"># 每次取batch_size首诗进行训练</span></span><br><span class="line">    n_chunk = len(poems_vec) // batch_size</span><br><span class="line">    x_batches = []</span><br><span class="line">    y_batches = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_chunk):</span><br><span class="line">        <span class="comment"># 求得每个batch中start和end的索引值</span></span><br><span class="line">        start_index = i * batch_size</span><br><span class="line">        end_index = start_index + batch_size</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 取出batch的数据</span></span><br><span class="line">        batches = poems_vec[start_index:end_index]</span><br><span class="line">        <span class="comment"># 找到这个batch的所有poem中最长的poem的长度</span></span><br><span class="line">        length = max(map(len, batches))</span><br><span class="line">        <span class="comment"># 填充一个这么大小的空batch，空的地方放空格对应的index标号</span></span><br><span class="line">        x_data = np.full((batch_size, length), word_to_int[<span class="string">' '</span>], np.int32)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(batch_size):</span><br><span class="line">            <span class="comment"># 每一行就是一首诗，在原本的长度上把诗还原上去</span></span><br><span class="line">            x_data[row, :len(batches[row])] = batches[row]</span><br><span class="line">        y_data = np.copy(x_data)</span><br><span class="line">        <span class="comment"># y的话就是x向左边也就是前面移动一个</span></span><br><span class="line">        y_data[:, :<span class="number">-1</span>] = x_data[:, <span class="number">1</span>:]</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        x_data             y_data</span></span><br><span class="line"><span class="string">        [6,2,4,6,9]       [2,4,6,9,9]</span></span><br><span class="line"><span class="string">        [1,4,2,8,5]       [4,2,8,5,5]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        x_batches.append(x_data)</span><br><span class="line">        y_batches.append(y_data)</span><br><span class="line">    <span class="keyword">return</span> x_batches, y_batches</span><br></pre></td></tr></table></figure><p>训练代码位于<code>tang_poems.py</code>的<code>run_training</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_training</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 检测模型参数文件夹及父文件夹, 不存在则新建</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.dirname(FLAGS.checkpoints_dir)):</span><br><span class="line">        os.mkdir(os.path.dirname(FLAGS.checkpoints_dir))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(FLAGS.checkpoints_dir):</span><br><span class="line">        os.mkdir(FLAGS.checkpoints_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取诗集文件</span></span><br><span class="line">    <span class="comment"># 依次得到数字ID表示的诗句、汉字-ID的映射map、所有的汉字的列表</span></span><br><span class="line">    poems_vector, word_to_int, vocabularies = process_poems(FLAGS.file_path)</span><br><span class="line">    <span class="comment"># 按照batch读取输入和输出数据</span></span><br><span class="line">    batches_inputs, batches_outputs = generate_batch(FLAGS.batch_size,</span><br><span class="line">                                                     poems_vector, word_to_int)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 声明输入、输出的占位符</span></span><br><span class="line">    input_data = tf.placeholder(tf.int32, [FLAGS.batch_size, <span class="keyword">None</span>])</span><br><span class="line">    output_targets = tf.placeholder(tf.int32, [FLAGS.batch_size, <span class="keyword">None</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过rnn模型得到结果状态集</span></span><br><span class="line">    end_points = rnn_model(model=<span class="string">'lstm'</span>, input_data=input_data,</span><br><span class="line">                           output_data=output_targets, vocab_size=len(vocabularies),</span><br><span class="line">                           rnn_size=<span class="number">128</span>, num_layers=<span class="number">2</span>, batch_size=<span class="number">64</span>,</span><br><span class="line">                           learning_rate=FLAGS.learning_rate)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化saver和session</span></span><br><span class="line">    saver = tf.train.Saver(tf.global_variables())</span><br><span class="line">    init_op = tf.group(tf.global_variables_initializer(),</span><br><span class="line">                       tf.local_variables_initializer())</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init_op)</span><br><span class="line">        start_epoch = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 加载上次的模型参数(如果有)</span></span><br><span class="line">        checkpoint = tf.train.latest_checkpoint(FLAGS.checkpoints_dir)</span><br><span class="line">        <span class="keyword">if</span> checkpoint:</span><br><span class="line">            saver.restore(sess, checkpoint)</span><br><span class="line">            print(<span class="string">"[INFO] restore from the checkpoint &#123;0&#125;"</span>.format(checkpoint))</span><br><span class="line">            <span class="comment"># 如果有模型参数, 则取出对应的epoch, 训练从该epoch开始训练</span></span><br><span class="line">            start_epoch += int(checkpoint.split(<span class="string">'-'</span>)[<span class="number">-1</span>])</span><br><span class="line">        <span class="comment"># 开始训练</span></span><br><span class="line">        print(<span class="string">'[INFO] start training...'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> epoch <span class="keyword">in</span> range(start_epoch, FLAGS.epochs):</span><br><span class="line">                n = <span class="number">0</span></span><br><span class="line">                <span class="comment"># 计算一个epoch需要多少次batch训练完, 有余数则忽略掉末尾部分</span></span><br><span class="line">                n_chunk = len(poems_vector) // FLAGS.batch_size</span><br><span class="line">                <span class="keyword">for</span> batch <span class="keyword">in</span> range(n_chunk):</span><br><span class="line">                    <span class="comment"># 训练并计算loss</span></span><br><span class="line">                    <span class="comment"># batches_inputs[n]: 第n个batch的输入数据</span></span><br><span class="line">                    <span class="comment"># batches_outputs[n]: 第n个batch的输出数据</span></span><br><span class="line">                    loss, _, _ = sess.run([</span><br><span class="line">                        end_points[<span class="string">'total_loss'</span>],</span><br><span class="line">                        end_points[<span class="string">'last_state'</span>],</span><br><span class="line">                        end_points[<span class="string">'train_op'</span>]</span><br><span class="line">                    ], feed_dict=&#123;</span><br><span class="line">                        input_data: batches_inputs[n],</span><br><span class="line">                        output_targets: batches_outputs[n]</span><br><span class="line">                    &#125;)</span><br><span class="line">                    n += <span class="number">1</span></span><br><span class="line">                    print(<span class="string">'[INFO] Epoch: %d , batch: %d , training loss: %.6f'</span> % (epoch, batch, loss))</span><br><span class="line">                <span class="comment"># 每训练6个epoch进行一次模型保存</span></span><br><span class="line">                <span class="keyword">if</span> epoch % <span class="number">6</span> == <span class="number">0</span>:</span><br><span class="line">                    saver.save(sess, os.path.join(FLAGS.checkpoints_dir,</span><br><span class="line">                                                  FLAGS.model_prefix), global_step=epoch)</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="comment"># 用户手动退出时, 尝试保存模型参数</span></span><br><span class="line">            print(<span class="string">'[INFO] Interrupt manually, try saving checkpoint for now...'</span>)</span><br><span class="line">            saver.save(sess, os.path.join(FLAGS.checkpoints_dir,</span><br><span class="line">                                          FLAGS.model_prefix), global_step=epoch)</span><br><span class="line">            print(<span class="string">'[INFO] Last epoch were saved, next time will start from epoch &#123;&#125;.'</span>.format(epoch))</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>取词代码位于<code>tang_poems.py</code>的<code>to_word</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_word</span><span class="params">(predict, vocabs)</span>:</span></span><br><span class="line">    <span class="comment"># 取词逻辑</span></span><br><span class="line">    <span class="comment"># 将predict累加求和</span></span><br><span class="line">    t = np.cumsum(predict)</span><br><span class="line">    <span class="comment"># 求出预测可能性的总和</span></span><br><span class="line">    s = np.sum(predict)</span><br><span class="line">    <span class="comment"># 返回将0~s的随机值插值到t中的索引值</span></span><br><span class="line">    <span class="comment"># 由于predict各维度对应的词向量是按照训练数据集的频率进行排序的</span></span><br><span class="line">    <span class="comment"># 故P(x|predict[i]均等时) &gt; P(x + δ), 即达到了权衡优先取前者和高概率词向量的目的</span></span><br><span class="line">    sample = int(np.searchsorted(t, np.random.rand(<span class="number">1</span>) * s))</span><br><span class="line">    <span class="keyword">if</span> sample &gt;= len(vocabs):</span><br><span class="line">        sample = len(vocabs) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> vocabs[sample]</span><br></pre></td></tr></table></figure><p>作诗代码位于<code>tang_peoms.py</code>的<code>gen_poem</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_poem</span><span class="params">(begin_word)</span>:</span></span><br><span class="line">    <span class="comment"># 根据首个汉字作诗</span></span><br><span class="line">    <span class="comment"># 作诗时, batch_size设为1</span></span><br><span class="line">    batch_size = <span class="number">1</span></span><br><span class="line">    print(<span class="string">'[INFO] loading corpus from %s'</span> % FLAGS.file_path)</span><br><span class="line">    <span class="comment"># 读取诗集文件</span></span><br><span class="line">    <span class="comment"># 依次得到数字ID表示的诗句、汉字-ID的映射map、所有的汉字的列表</span></span><br><span class="line">    poems_vector, word_int_map, vocabularies = process_poems(FLAGS.file_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 声明输入的占位符</span></span><br><span class="line">    input_data = tf.placeholder(tf.int32, [batch_size, <span class="keyword">None</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过rnn模型得到结果状态集</span></span><br><span class="line">    end_points = rnn_model(model=<span class="string">'lstm'</span>, input_data=input_data,</span><br><span class="line">                           output_data=<span class="keyword">None</span>, vocab_size=len(vocabularies),</span><br><span class="line">                           rnn_size=<span class="number">128</span>, num_layers=<span class="number">2</span>, batch_size=<span class="number">64</span>,</span><br><span class="line">                           learning_rate=FLAGS.learning_rate)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化saver和session</span></span><br><span class="line">    saver = tf.train.Saver(tf.global_variables())</span><br><span class="line">    init_op = tf.group(tf.global_variables_initializer(),</span><br><span class="line">                       tf.local_variables_initializer())</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init_op)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加载上次的模型参数</span></span><br><span class="line">        checkpoint = tf.train.latest_checkpoint(FLAGS.checkpoints_dir)</span><br><span class="line">        <span class="comment"># 注: 无模型参数时, 该步直接crash, 强制有训练好的模型参数</span></span><br><span class="line">        saver.restore(sess, checkpoint)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 取出诗文前缀(G)对应的索引值所谓初始输入</span></span><br><span class="line">        x = np.array([list(map(word_int_map.get, start_token))])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 得出预测值和rnn的当前状态</span></span><br><span class="line">        [predict, last_state] = sess.run([end_points[<span class="string">'prediction'</span>], end_points[<span class="string">'last_state'</span>]],feed_dict=&#123;input_data: x&#125;)</span><br><span class="line">        <span class="keyword">if</span> begin_word:</span><br><span class="line">            <span class="comment"># 用户输入值赋值给word</span></span><br><span class="line">            word = begin_word</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 若未输入, 则取初始预测值的词向量</span></span><br><span class="line">            word = to_word(predict, vocabularies)</span><br><span class="line">        <span class="comment"># 初始化作诗结果变量</span></span><br><span class="line">        poem = <span class="string">''</span></span><br><span class="line">        <span class="comment"># 未到结束符时, 一直预测下一个词</span></span><br><span class="line">        <span class="keyword">while</span> word != end_token:</span><br><span class="line">            <span class="comment"># 没预测一个则追加到结果上</span></span><br><span class="line">            poem += word</span><br><span class="line">            <span class="comment"># 初始化输入为[[0]]</span></span><br><span class="line">            x = np.zeros((<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">            <span class="comment"># 赋值为当前word对应的索引值</span></span><br><span class="line">            x[<span class="number">0</span>, <span class="number">0</span>] = word_int_map[word]</span><br><span class="line">            <span class="comment"># 根据当前词和当前的上下文状态(last_state)进行预测 </span></span><br><span class="line">            <span class="comment"># 返回的结果是预测值和最新的上下文状态</span></span><br><span class="line">            [predict, last_state] = sess.run([end_points[<span class="string">'prediction'</span>],</span><br><span class="line">                                              end_points[<span class="string">'last_state'</span>]],</span><br><span class="line">                                             feed_dict=&#123;</span><br><span class="line">                                                 input_data: x,</span><br><span class="line">                                                 end_points[<span class="string">'initial_state'</span>]: last_state</span><br><span class="line">                                             &#125;)</span><br><span class="line">            <span class="comment"># 根据预测值得出词向量</span></span><br><span class="line">            word = to_word(predict, vocabularies)</span><br><span class="line">        <span class="keyword">return</span> poem</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tensorflow Poems是一款基于RNN（循环神经网络）的 &lt;a href=&quot;https://github.com/jinfagang/tensorflow_poems&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github开源项目&lt;/a&gt;，它能通过学习大量古诗文和歌词然后能够自己来模仿创造诗文和歌词。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="Python" scheme="http://puke3615.github.io/tags/Python/"/>
    
      <category term="Tensorflow" scheme="http://puke3615.github.io/tags/Tensorflow/"/>
    
      <category term="RNN" scheme="http://puke3615.github.io/tags/RNN/"/>
    
  </entry>
  
  <entry>
    <title>读《西瓜书》</title>
    <link href="http://puke3615.github.io/2017/09/02/Watermelon-Book/"/>
    <id>http://puke3615.github.io/2017/09/02/Watermelon-Book/</id>
    <published>2017-09-02T10:46:35.000Z</published>
    <updated>2018-07-28T02:06:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习理论基础书，涵盖大部分机器学习的常用算法，相对于《机器学习实战》而言，这本书更偏向于理论推导，很多细节部分讲得更加详细。</p><a id="more"></a><p><img src="/2017/09/02/Watermelon-Book/image.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;机器学习理论基础书，涵盖大部分机器学习的常用算法，相对于《机器学习实战》而言，这本书更偏向于理论推导，很多细节部分讲得更加详细。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="思维导图" scheme="http://puke3615.github.io/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
      <category term="Book" scheme="http://puke3615.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>Sklearn之线性回归</title>
    <link href="http://puke3615.github.io/2017/09/01/Sklearn-Linear-Regression/"/>
    <id>http://puke3615.github.io/2017/09/01/Sklearn-Linear-Regression/</id>
    <published>2017-09-01T04:17:44.000Z</published>
    <updated>2018-07-28T02:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>线性回归模型，主要用作对于连续数值型数据进行预测。为了展现线性回归技术在二维空间的几何表现，这个例子只使用了糖尿病数据集中的第一个特征。下图尝试找到一条使得数据集中各点到直线距离平方和最小的直线。</p><p><img src="/2017/09/01/Sklearn-Linear-Regression/image.png" alt=""></p><a id="more"></a><p>Source Code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># Code source: Jaques Grobler</span></span><br><span class="line"><span class="comment"># License: BSD 3 clause</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets, linear_model</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载糖尿病数据集</span></span><br><span class="line">diabetes = datasets.load_diabetes()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只选取一个特征</span></span><br><span class="line">diabetes_X = diabetes.data[:, np.newaxis, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据分割为训练集、测试集</span></span><br><span class="line">diabetes_X_train = diabetes_X[:<span class="number">-20</span>]</span><br><span class="line">diabetes_X_test = diabetes_X[<span class="number">-20</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将目标标量分割为训练集、测试集</span></span><br><span class="line">diabetes_y_train = diabetes.target[:<span class="number">-20</span>]</span><br><span class="line">diabetes_y_test = diabetes.target[<span class="number">-20</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线性回归对象</span></span><br><span class="line">regr = linear_model.LinearRegression()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用训练集训练模型</span></span><br><span class="line">regr.fit(diabetes_X_train, diabetes_y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用测试集数据进行预测</span></span><br><span class="line">diabetes_y_pred = regr.predict(diabetes_X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回归系数</span></span><br><span class="line">print(<span class="string">'Coefficients: \n'</span>, regr.coef_)</span><br><span class="line"><span class="comment"># 均方误差</span></span><br><span class="line">print(<span class="string">"Mean squared error: %.2f"</span></span><br><span class="line">      % mean_squared_error(diabetes_y_test, diabetes_y_pred))</span><br><span class="line"><span class="comment"># 方差分数: 1代表完美预测</span></span><br><span class="line">print(<span class="string">'Variance score: %.2f'</span> % r2_score(diabetes_y_test, diabetes_y_pred))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将测试集数据及预测结果进行绘图输出</span></span><br><span class="line">plt.scatter(diabetes_X_test, diabetes_y_test, color=<span class="string">'black'</span>)</span><br><span class="line">plt.plot(diabetes_X_test, diabetes_y_pred, color=<span class="string">'blue'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(())</span><br><span class="line">plt.yticks(())</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>输出结果:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Coefficients:</span><br><span class="line"> [ <span class="number">938.23786125</span>]</span><br><span class="line">Mean squared error: <span class="number">2548.07</span></span><br><span class="line">Variance score: <span class="number">0.47</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线性回归模型，主要用作对于连续数值型数据进行预测。为了展现线性回归技术在二维空间的几何表现，这个例子只使用了糖尿病数据集中的第一个特征。下图尝试找到一条使得数据集中各点到直线距离平方和最小的直线。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/09/01/Sklearn-Linear-Regression/image.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="Python" scheme="http://puke3615.github.io/tags/Python/"/>
    
      <category term="Sklearn" scheme="http://puke3615.github.io/tags/Sklearn/"/>
    
  </entry>
  
  <entry>
    <title>Titanic缺失数据处理</title>
    <link href="http://puke3615.github.io/2017/08/03/Titanic-Fill-Data/"/>
    <id>http://puke3615.github.io/2017/08/03/Titanic-Fill-Data/</id>
    <published>2017-08-03T08:28:29.000Z</published>
    <updated>2018-07-28T10:40:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kaggle的比赛入门，通过机器学习模型对泰坦尼克号上幸存情况进行预测，这里主要针对预测前的特征工程处理，对缺失数据进行分析和补全。</p><a id="more"></a><h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><p>加载csv文件数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> csv <span class="keyword">as</span> csv</span><br><span class="line">    reader = csv.reader(open(path, <span class="string">'rb'</span>))</span><br><span class="line">    header = reader.next()</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> reader:</span><br><span class="line">        data.append(line)</span><br><span class="line">    <span class="keyword">return</span> header, np.array(data)</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_header, train_data = load_data(TRAIN_PATH)</span><br><span class="line"><span class="keyword">print</span> train_header</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'PassengerId'</span>, <span class="string">'Survived'</span>, <span class="string">'Pclass'</span>, <span class="string">'Name'</span>, <span class="string">'Sex'</span>, <span class="string">'Age'</span>, <span class="string">'SibSp'</span>, <span class="string">'Parch'</span>, <span class="string">'Ticket'</span>, <span class="string">'Fare'</span>, <span class="string">'Cabin'</span>, <span class="string">'Embarked'</span>]</span><br></pre></td></tr></table></figure><h3 id="检查缺失数据"><a href="#检查缺失数据" class="headerlink" title="检查缺失数据"></a>检查缺失数据</h3><p>遍历每一行，记下空字符串元素所在的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_empty</span><span class="params">(header, data)</span>:</span></span><br><span class="line">    empty = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> row, line <span class="keyword">in</span> enumerate(data):</span><br><span class="line">        <span class="keyword">for</span> column, value <span class="keyword">in</span> enumerate(line):</span><br><span class="line">            <span class="keyword">if</span> value == <span class="string">''</span>:</span><br><span class="line">                feature = header[column]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> empty.__contains__(feature):</span><br><span class="line">                    empty[feature] = []</span><br><span class="line">                empty[feature].append(line[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> empty</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_header, train_data = load_data(TRAIN_PATH)</span><br><span class="line">empty = check_empty(train_header, train_data)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> empty.items():</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'%s: %d'</span> % (key, len(value))</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Age: <span class="number">177</span></span><br><span class="line">Cabin: <span class="number">687</span></span><br><span class="line">Embarked: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>可以看到训练数据中<code>Age</code>特征有177条缺失数据，另外两个以此类推。</p><p>上面是训练集中缺失数据的特征，而我们要得到还有测试集的缺失信息，所以写一个merge函数，将训练集和测试集合并起来（由于现在是缺失值分析阶段，所以不区分训练集和测试集，接下来会一直沿用合并后的数据），然后再检查缺失信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_data</span><span class="params">(train_data, test_data)</span>:</span></span><br><span class="line">    <span class="comment"># 删除训练集中第二列的幸存信息，以保持数据格式统一</span></span><br><span class="line">    train_without_survive = np.delete(train_data, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> np.vstack([train_without_survive, test_data])</span><br><span class="line"></span><br><span class="line">train_header, train_data = load_data(TRAIN_PATH)</span><br><span class="line">test_header, test_data = load_data(TEST_PATH)</span><br><span class="line">merged = merge_data(train_data, test_data)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> check_empty(test_header, merged).items():</span><br><span class="line"><span class="keyword">print</span> <span class="string">'%s: %d'</span> % (key, len(value))</span><br></pre></td></tr></table></figure><p>Output：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Fare: <span class="number">1</span></span><br><span class="line">Age: <span class="number">263</span></span><br><span class="line">Cabin: <span class="number">1014</span></span><br><span class="line">Embarked: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>于是能够得到所有缺失的特征，分别是<code>Fare</code>、<code>Age</code>、<code>Cabin</code>、<code>Embarked</code>，接下来开始对缺失项一一进行分析、补全。</p><h3 id="缺失数据分析"><a href="#缺失数据分析" class="headerlink" title="缺失数据分析"></a>缺失数据分析</h3><h4 id="Fare"><a href="#Fare" class="headerlink" title="Fare"></a>Fare</h4><p>表明乘客的票价，有1个缺失值，我们首先看一下该数据的范围，均值，均方差这些信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fare = merged[:, test_header.index(<span class="string">'Fare'</span>)]</span><br><span class="line">fare_with_data = [float(f) <span class="keyword">for</span> f <span class="keyword">in</span> fare <span class="keyword">if</span> f != <span class="string">''</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Range: %.2f - %.2f'</span> % (min(fare_with_data), max(fare_with_data))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Mean: %.2f'</span> % np.mean(fare_with_data)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Mean variance: %.2f'</span> % np.sqrt(np.var(fare_with_data))</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Range: <span class="number">0.00</span> - <span class="number">512.33</span></span><br><span class="line">Mean: <span class="number">33.30</span></span><br><span class="line">Mean variance: <span class="number">51.74</span></span><br></pre></td></tr></table></figure><p>通过这三项数据（以下简称<code>RMM</code>）我们能对票价信息有个大致的了解，范围在0 - 512.33波动，均值是33.3而均方差只有51.74，这表明大多数票价都是偏低的（也能从一定程度上分析出乘客的经济状况，这里就不继续延伸了）。</p><p><code>RMM</code>信息获取很方便，但是不便于直观、确切的观察数据的分布情况，这时考虑通过<code>matplot</code>画出票价的密度分布图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.hist(fare_with_data, alpha=<span class="number">.7</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>分布图如下</p><p><img src="/2017/08/03/Titanic-Fill-Data/data_fix_fare1.png" alt="data_fix_fare"></p><p>从图中可以很直观的看出绝大部分数据都是部分在50以下的，鉴于这种情况，我们很直观的选择是把均值作为补全值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> np.mean(fare_with_data)</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">33.2954792813</span></span><br></pre></td></tr></table></figure><p>这时33.2954792813便做为<code>Fare</code>补全值了。</p><p>为了确保万一，我们要查出该条数据索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty = check_empty(test_header, merged)</span><br><span class="line"><span class="keyword">print</span> empty[<span class="string">'Fare'</span>]</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'1044'</span>]</span><br></pre></td></tr></table></figure><p>接下来我们根据<code>PassengerId</code>找到该条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1044</span>,<span class="number">3</span>,<span class="string">"Storey, Mr. Thomas"</span>,male,<span class="number">60.5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3701</span>,,,S</span><br></pre></td></tr></table></figure><p>对比着特征名来分析数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PassengerId,Pclass,Name,Sex,Age,SibSp,Parch,Ticket,Fare,Cabin,Embarked</span><br></pre></td></tr></table></figure><p>可以逐一分析，我们发现<code>Pclass</code>对应N等票，可能会影响到票价<code>Fare</code>特征，因此我们要取出所有跟该名乘客相同<code>Pclass</code>（从数据可以看出是3）的票价分布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fare = merged[:, [test_header.index(<span class="string">'Fare'</span>), test_header.index(<span class="string">'Pclass'</span>)]]</span><br><span class="line">fare_with_pclass_3 = [float(f) <span class="keyword">for</span> f, pclass <span class="keyword">in</span> fare <span class="keyword">if</span> f != <span class="string">''</span> <span class="keyword">and</span> pclass == <span class="string">'3'</span>]</span><br><span class="line">plt.hist(fare_with_pclass_3, alpha=<span class="number">.7</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>分布图如下</p><p><img src="/2017/08/03/Titanic-Fill-Data/data_fix_fare2.png" alt="data_fix_fare2"></p><p>对比和上一张图的区别，我们能更加确切的了解到，三等票的票价没有高于70的，因此如果按照上面的结论直接把所有数据的票价均值作为补全值，在一定程度上会使得补全值的误差变大，取而代之的是用<code>Pclass</code>为3的乘客的票价均值作为补全值（这里还是有一定的优化空间，我们可以分析<code>Pclass</code>为3的乘客中的年龄、家属情况、船舱等对票价的影响，这里就不继续展开了）。</p><p>有了上面的分析，我们就可以重新计算补全值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> np.mean(fare_with_pclass_3)</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13.3028887006</span></span><br></pre></td></tr></table></figure><p>和上面输出的33.3还是有一定差距的</p><p>经过上面的一系列的分析，可以写出<code>Fare</code>特征的补全逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_fare_data</span><span class="params">(all_data, pclass, fare_index, pclass_index)</span>:</span></span><br><span class="line">    fare_pclass = all_data[:, [fare_index, pclass_index]]</span><br><span class="line">    fare_with_pclass = [float(f) <span class="keyword">for</span> f, c <span class="keyword">in</span> fare_pclass <span class="keyword">if</span> f != <span class="string">''</span> <span class="keyword">and</span> c == pclass]</span><br><span class="line">    <span class="keyword">return</span> np.mean(fare_with_pclass)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill_data_fare</span><span class="params">(all_data, need_fill_data, header)</span>:</span></span><br><span class="line">    fare_index = header.index(<span class="string">'Fare'</span>)</span><br><span class="line">    pclass_index = header.index(<span class="string">'Pclass'</span>)</span><br><span class="line">    fill_cache = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> need_fill_data:</span><br><span class="line">        <span class="keyword">if</span> f[fare_index] == <span class="string">''</span>:</span><br><span class="line">            pclass = f[pclass_index]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> fill_cache.__contains__(pclass):</span><br><span class="line">                fill_cache[pclass] = compute_fare_data(all_data, pclass, fare_index, pclass_index)</span><br><span class="line">            f[fare_index] = fill_cache[pclass]</span><br></pre></td></tr></table></figure><p>此时我们的主函数应该是这样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train_header, train_data = load_data(TRAIN_PATH)</span><br><span class="line">test_header, test_data = load_data(TEST_PATH)</span><br><span class="line">merged = merge_data(train_data, test_data)</span><br><span class="line">fill_data_fare(merged, train_data, train_header)</span><br><span class="line">fill_data_fare(merged, test_data, test_header)</span><br></pre></td></tr></table></figure><h4 id="Age"><a href="#Age" class="headerlink" title="Age"></a>Age</h4><p>表明乘客年龄，有263个缺失值，同上，我们先看一下该特征的<code>RMM</code>信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = merged[:, test_header.index(<span class="string">'Age'</span>)]</span><br><span class="line">age_with_data = [float(f) <span class="keyword">for</span> f <span class="keyword">in</span> age <span class="keyword">if</span> f != <span class="string">''</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Range: %.2f - %.2f'</span> % (min(age_with_data), max(age_with_data))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Mean: %.2f'</span> % np.mean(age_with_data)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Mean variance: %.2f'</span> % np.sqrt(np.var(age_with_data))</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Range: <span class="number">0.17</span> - <span class="number">80.00</span></span><br><span class="line">Mean: <span class="number">29.88</span></span><br><span class="line">Mean variance: <span class="number">14.41</span></span><br></pre></td></tr></table></figure><p>均值29.9，均方差14.4，可见整体年龄层都分布在青壮年阶段，接下来直接看看密度分布图</p><p><img src="/2017/08/03/Titanic-Fill-Data/data_fix_age1.png" alt=""></p><p>从该图中我们只能观察到老人（50岁以上）和小孩（16岁以下）占比较小，年龄大多集中在17-40左右，我们必须试图在数据中寻找更好的估值标准。</p><p>我们尝试寻找<code>Age</code>与<code>Pclass</code>的关系，先来画出分布图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">age_pclass = merged[:, [test_header.index(<span class="string">'Age'</span>), test_header.index(<span class="string">'Pclass'</span>)]]</span><br><span class="line"><span class="comment"># 过滤掉Age为空的数据</span></span><br><span class="line">age_pclass_with_data = [[int(float(a)), int(p)] <span class="keyword">for</span> a, p <span class="keyword">in</span> age_pclass <span class="keyword">if</span> a != <span class="string">''</span>]</span><br><span class="line">age_pclass_with_data = np.array(age_pclass_with_data)</span><br><span class="line">x = age_pclass_with_data[:, <span class="number">0</span>]</span><br><span class="line">y = age_pclass_with_data[:, <span class="number">1</span>]</span><br><span class="line">plt.scatter(x, y, alpha=<span class="number">.7</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Age'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Pclass'</span>)</span><br><span class="line">plt.title(<span class="string">'Pclass &amp; Age'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>分布图如下</p><p><img src="/2017/08/03/Titanic-Fill-Data/data_fix_age2.png" alt=""></p><p>从上图上中可以知道很难直接根据<code>Pclass</code>估值出<code>Age</code>的值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kaggle的比赛入门，通过机器学习模型对泰坦尼克号上幸存情况进行预测，这里主要针对预测前的特征工程处理，对缺失数据进行分析和补全。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="Python" scheme="http://puke3615.github.io/tags/Python/"/>
    
      <category term="Kaggle" scheme="http://puke3615.github.io/tags/Kaggle/"/>
    
  </entry>
  
  <entry>
    <title>Android上运行手写数字识别模型</title>
    <link href="http://puke3615.github.io/2017/08/02/Run-Mnist-On-Android/"/>
    <id>http://puke3615.github.io/2017/08/02/Run-Mnist-On-Android/</id>
    <published>2017-08-02T11:42:25.000Z</published>
    <updated>2017-08-04T05:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Github源码请移步本文底部。</em></p><h3 id="模型导出pb文件"><a href="#模型导出pb文件" class="headerlink" title="模型导出pb文件"></a>模型导出pb文件</h3><p>首先我们需要在我们的<code>python</code>代码中保存训练好的模型，<code>save_path</code>参数就传递<code>**.pb</code>，这里导出文件留给接下来使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_model_and_params</span><span class="params">(session, save_path)</span>:</span></span><br><span class="line">    out_graph_def = tf.graph_util.convert_variables_to_constants(session, session.graph_def, [<span class="string">"output"</span>])</span><br><span class="line">    <span class="keyword">with</span> tf.gfile.FastGFile(save_path, <span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(out_graph_def.SerializeToString())</span><br></pre></td></tr></table></figure><h3 id="Android中通过JNI调用"><a href="#Android中通过JNI调用" class="headerlink" title="Android中通过JNI调用"></a>Android中通过JNI调用</h3><h4 id="Tensorflow与Android整合"><a href="#Tensorflow与Android整合" class="headerlink" title="Tensorflow与Android整合"></a>Tensorflow与Android整合</h4><p>整合部分就直接按照<a href="../../../../2017/08/02/Tensorflow-On-Android/">Android端运行Tensorflow</a>中的步骤来就行了。</p><h4 id="封装输出数据解析逻辑"><a href="#封装输出数据解析逻辑" class="headerlink" title="封装输出数据解析逻辑"></a>封装输出数据解析逻辑</h4><p>在手写数字识别模型中的输出是一个size为10的列表，列表元素的索引值对应输出的结果，列表元素对应输出的概率，例如输出是[0.2, 0.7, 0.01……]，即表示有0.2的概率是0，0.7的概率是1，0.01的概率是2……</p><p>因此我们需要在输出中对数据按照概率进行降序排列，以便让结果一目了然。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zijiao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 17/8/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MnistData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MnistData</span><span class="params">(<span class="keyword">float</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            items.add(<span class="keyword">new</span> Item(data[i], i));</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">top</span><span class="params">(<span class="keyword">int</span> topSize)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; topSize; i++) &#123;</span><br><span class="line">            Item item = items.get(i);</span><br><span class="line">            builder.append(item.index)</span><br><span class="line">                    .append(<span class="string">": "</span>)</span><br><span class="line">                    .append(String.format(<span class="string">"%.1f%%"</span>, item.value * <span class="number">100</span>))</span><br><span class="line">                    .append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(items.get(<span class="number">0</span>).index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> output();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"NullableProblems"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> value;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Item</span><span class="params">(<span class="keyword">float</span> value, <span class="keyword">float</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Item o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value &lt; o.value ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时我们就能通过<code>MnistData</code>类的<code>top</code>方法得到概率最大的几个结果分别是什么。</p><h4 id="构建数字分类器"><a href="#构建数字分类器" class="headerlink" title="构建数字分类器"></a>构建数字分类器</h4><p>这里通过<code>TensorFlowInferenceInterface</code>来调用模型，注释写得很清楚，值得注意的一点是，<code>input</code>和<code>output</code>的名称要和模型中的变量名称保持一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zijiao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 17/8/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MnistClassifier</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TensorFlowInferenceInterface inference;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MnistClassifier</span><span class="params">(AssetManager assetManager)</span> </span>&#123;</span><br><span class="line">        inference = <span class="keyword">new</span> TensorFlowInferenceInterface();</span><br><span class="line">      <span class="comment">// 加载模型图</span></span><br><span class="line">        inference.initializeTensorFlow(assetManager, TF.MODEL);</span><br><span class="line">      <span class="comment">// 模型使用阶段, 不需要进行dropout处理, 所以keep_prob直接为1.0</span></span><br><span class="line">        inference.fillNodeFloat(TF.KEEP_PROB_NAME, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;, <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;<span class="number">1.0f</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MnistData <span class="title">inference</span><span class="params">(<span class="keyword">float</span>[] input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span> || input.length != <span class="number">28</span> * <span class="number">28</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Input data is error."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 填入Input数据</span></span><br><span class="line">        inference.fillNodeFloat(TF.INPUT_NAME, TF.INPUT_TYPE, input);</span><br><span class="line">      <span class="comment">// 运行结果, 类似Python中的sess.run([outputs])</span></span><br><span class="line">        inference.runInference(<span class="keyword">new</span> String[]&#123;TF.OUTPUT_NAME&#125;);</span><br><span class="line">        <span class="keyword">float</span>[] output = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">10</span>];</span><br><span class="line">      <span class="comment">// 取出结果集中我们需要的</span></span><br><span class="line">        inference.readNodeFloat(TF.OUTPUT_NAME, output);</span><br><span class="line">      <span class="comment">// 将输出结果交给MnistData处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MnistData(output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加画板"><a href="#添加画板" class="headerlink" title="添加画板"></a>添加画板</h3><p>模型处理的逻辑已经写完了，接下来就是如何得到输入源了。由于是手写数字识别，所以接下来就要写画板类。这里只贴出关键代码部分（完整代码可以看本文底部的Github地址）。</p><p>手指滑动屏幕时画出手指滑动的轨迹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">    canvas.drawPath(path, paint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> x = event.getX();</span><br><span class="line">    <span class="keyword">float</span> y = event.getY();</span><br><span class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            path.moveTo(x, y);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            path.lineTo(x, y);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    invalidate();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向外部提供读取画布数据的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">float</span>[] fetchData(<span class="keyword">int</span> width, <span class="keyword">int</span> height) &#123;</span><br><span class="line">    <span class="keyword">float</span>[] data = <span class="keyword">new</span> <span class="keyword">float</span>[height * width];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        setDrawingCacheEnabled(<span class="keyword">true</span>);</span><br><span class="line">        setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_LOW);</span><br><span class="line">        Bitmap cache = getDrawingCache();</span><br><span class="line">        fillInputData(cache, data, width, height);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        setDrawingCacheEnabled(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fillInputData</span><span class="params">(Bitmap bm, <span class="keyword">float</span>[] data, <span class="keyword">int</span> newWidth, <span class="keyword">int</span> newHeight)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获得图片的宽高</span></span><br><span class="line">    <span class="keyword">int</span> width = bm.getWidth();</span><br><span class="line">    <span class="keyword">int</span> height = bm.getHeight();</span><br><span class="line">    <span class="comment">// 计算缩放比例</span></span><br><span class="line">    <span class="keyword">float</span> scaleWidth = ((<span class="keyword">float</span>) newWidth) / width;</span><br><span class="line">    <span class="keyword">float</span> scaleHeight = ((<span class="keyword">float</span>) newHeight) / height;</span><br><span class="line">    <span class="comment">// 取得想要缩放的matrix参数</span></span><br><span class="line">    Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">    matrix.postScale(scaleWidth, scaleHeight);</span><br><span class="line">    <span class="comment">// 得到新的图片</span></span><br><span class="line">    Bitmap newbm = Bitmap.createBitmap(bm, <span class="number">0</span>, <span class="number">0</span>, width, height, matrix, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; newHeight; y++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; newWidth; x++) &#123;</span><br><span class="line">            <span class="keyword">int</span> pixel = newbm.getPixel(x, y);</span><br><span class="line">            data[newWidth * y + x] = pixel == <span class="number">0xffffffff</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>布局代码就直接省略了，我们只需要在点击<code>识别</code>的时候，调用下面这段的识别逻辑即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 识别</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInference</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (canvasView.isEmpty()) &#123;</span><br><span class="line">        resultPanel.setText(<span class="string">"画板为空"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    MnistData result = classifier.inference(canvasView.fetchData(<span class="number">28</span>, <span class="number">28</span>));</span><br><span class="line">    resultPanel.setText(result.top(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后附上运行效果图</p><p><img src="/2017/08/02/Run-Mnist-On-Android/8.png" alt=""></p><p>这里是该项目的<a href="https://github.com/puke3615/Mnist" target="_blank" rel="noopener">Github源码</a></p>]]></content>
    
    <summary type="html">
    
      通过手写数字识别的具体案例来展示Tensorflow中运行的模型是如何移植到Android中。
    
    </summary>
    
    
      <category term="Android" scheme="http://puke3615.github.io/tags/Android/"/>
    
      <category term="Tensorflow" scheme="http://puke3615.github.io/tags/Tensorflow/"/>
    
      <category term="Mnist" scheme="http://puke3615.github.io/tags/Mnist/"/>
    
  </entry>
  
  <entry>
    <title>Android端运行Tensorflow</title>
    <link href="http://puke3615.github.io/2017/08/02/Tensorflow-On-Android/"/>
    <id>http://puke3615.github.io/2017/08/02/Tensorflow-On-Android/</id>
    <published>2017-08-02T06:26:34.000Z</published>
    <updated>2018-07-28T10:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>将Tensorflow训练好的模型部署在Android端，网上找到的很多资料要么过于复杂，要么就根本不能运行，于是记录下具体的整合步骤。</p><a id="more"></a><h3 id="New-Project"><a href="#New-Project" class="headerlink" title="New Project"></a><code>New Project</code></h3><h3 id="local-propertities文件中指定ndk目录"><a href="#local-propertities文件中指定ndk目录" class="headerlink" title="local.propertities文件中指定ndk目录"></a><code>local.propertities</code>文件中指定ndk目录</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndk.dir=<span class="regexp">/Users/</span>zijiao<span class="regexp">/Library/</span>Android<span class="regexp">/sdk/</span>ndk-bundle</span><br></pre></td></tr></table></figure><h3 id="向src-main-jniLibs-cpu-目录添加对应的libtensorflow-demo-so文件"><a href="#向src-main-jniLibs-cpu-目录添加对应的libtensorflow-demo-so文件" class="headerlink" title="向src/main/jniLibs/[cpu]目录添加对应的libtensorflow_demo.so文件"></a>向<code>src/main/jniLibs/[cpu]</code>目录添加对应的<code>libtensorflow_demo.so</code>文件</h3><h3 id="其中-cpu-包含arm64-v8a、armeabi-v7a、x86、x86-64"><a href="#其中-cpu-包含arm64-v8a、armeabi-v7a、x86、x86-64" class="headerlink" title="其中[cpu]包含arm64-v8a、armeabi-v7a、x86、x86_64"></a>其中<code>[cpu]</code>包含<code>arm64-v8a</code>、<code>armeabi-v7a</code>、<code>x86</code>、<code>x86_64</code></h3><h4 id="修改build-gradle文件"><a href="#修改build-gradle文件" class="headerlink" title="修改build.gradle文件"></a>修改<code>build.gradle</code>文件</h4><h4 id="android闭包中添加"><a href="#android闭包中添加" class="headerlink" title="android闭包中添加"></a><code>android</code>闭包中添加</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaptOptions &#123; noCompress <span class="string">'pb'</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="android-defaultConfig闭包下添加（可选）"><a href="#android-defaultConfig闭包下添加（可选）" class="headerlink" title="android-defaultConfig闭包下添加（可选）"></a><code>android-defaultConfig</code>闭包下添加（可选）</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ndk&#123;</span><br><span class="line"><span class="comment">//生成的so名字</span></span><br><span class="line">moduleName <span class="string">"tensorflow_demo"</span>         </span><br><span class="line"><span class="comment">//输出指定三种abi体系结构下的so库。目前可有可无。</span></span><br><span class="line">abiFilters <span class="string">"arm64-v8a"</span>, <span class="string">"armeabi-v7a"</span>, <span class="string">"x86_64"</span>, <span class="string">"x86"</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将TensorFlowInferenceInterface-java-拷到src-main-java-org-tensorflow-contrib-android目录下"><a href="#将TensorFlowInferenceInterface-java-拷到src-main-java-org-tensorflow-contrib-android目录下" class="headerlink" title="将TensorFlowInferenceInterface.java 拷到src/main/java/org.tensorflow.contrib.android目录下"></a>将<code>TensorFlowInferenceInterface.java</code> 拷到<code>src/main/java/org.tensorflow.contrib.android</code>目录下</h3><p>注意加载so文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.loadLibrary(<span class="string">"tensorflow_demo"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将Model文件和Label文件拷到src-main-assets目录下"><a href="#将Model文件和Label文件拷到src-main-assets目录下" class="headerlink" title="将Model文件和Label文件拷到src/main/assets目录下"></a>将<code>Model文件</code>和<code>Label文件</code>拷到<code>src/main/assets</code>目录下</h3><h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TensorFlowInferenceInterface inference = <span class="keyword">new</span> TensorFlowInferenceInterface();</span><br><span class="line">String modelPath = <span class="string">"file:///android_asset/[.pb文件名]"</span>;</span><br><span class="line"><span class="keyword">int</span> code = inference.initializeTensorFlow(getAssets(), modelPath);</span><br><span class="line"><span class="keyword">if</span> (code == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 初始化成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将Tensorflow训练好的模型部署在Android端，网上找到的很多资料要么过于复杂，要么就根本不能运行，于是记录下具体的整合步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://puke3615.github.io/tags/Android/"/>
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="Tensorflow" scheme="http://puke3615.github.io/tags/Tensorflow/"/>
    
      <category term="移动AI" scheme="http://puke3615.github.io/tags/%E7%A7%BB%E5%8A%A8AI/"/>
    
  </entry>
  
  <entry>
    <title>读《机器学习实战》</title>
    <link href="http://puke3615.github.io/2017/08/01/Machine-Learning-Inaction/"/>
    <id>http://puke3615.github.io/2017/08/01/Machine-Learning-Inaction/</id>
    <published>2017-08-01T10:36:01.000Z</published>
    <updated>2018-07-28T02:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>用了一个多月的时间看完了这本书，在这段时间里穿插了不少事情，公司的业务开发经历了两次班车迭代，还有一周多的时间用来研究图像语义分割。由于本职的Android开发还是占用很大一部分精力和时间，所以看书只能抽一些时间碎片进行。</p><a id="more"></a><p>谈谈自己对该书的整体感觉，这本书作为ML的入门、科普书籍当然是不错的，整体的章节设定看上去一目了然。书中列出了很多ML的经典算法，同时也有对应的代码实现，这里要点赞的一点是对于算法的封装性和拓展性而言，该书做的还是蛮不错的，很多实现代码基本上是可以拿过来直接使用的。还有就是书中整体的连贯性写的很到位，A算法已经很实用了，但在某某方面还存在缺陷，而B算法会在兼容A算法精华部分的基础上还解决了对应的缺陷，于是很平滑的过渡到B算法的讲解部分，这样给读者一种前因后果的感觉，而非凭空冒出个B算法。</p><p>同时也有些我认为美中不足的地方，关于一些算法公式方面，讲着讲着就突然莫名来了一个公式，有的公式甚至没什么说明，直接就用上了。其实能够理解作为一本ML的书籍不适合在算法公式的推导上花费太多的篇幅，但也不至于简短的描述都没有，一下子看到一坨公式的时候真是一脸茫然。还有一点是，看该书还是需要一定的线代基础的，在回归的讲解部分如果没有线代基础基本上就是走马观花了。</p><p>之前也看过不少技术书籍，时间越久淡忘的就越多，所以这次打算把看过的部分都记下来，一方面加深自己的印象，另一方面也为了提高日后复习的效率。</p><p><img src="/2017/08/01/Machine-Learning-Inaction/ML.png" alt="ML"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用了一个多月的时间看完了这本书，在这段时间里穿插了不少事情，公司的业务开发经历了两次班车迭代，还有一周多的时间用来研究图像语义分割。由于本职的Android开发还是占用很大一部分精力和时间，所以看书只能抽一些时间碎片进行。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="思维导图" scheme="http://puke3615.github.io/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
      <category term="Book" scheme="http://puke3615.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>AI场景分类竞赛</title>
    <link href="http://puke3615.github.io/2017/05/03/Keras-Scene-Competion/"/>
    <id>http://puke3615.github.io/2017/05/03/Keras-Scene-Competion/</id>
    <published>2017-05-03T15:31:15.000Z</published>
    <updated>2018-08-03T06:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em><a href="https://challenger.ai/" target="_blank" rel="noopener">全球AI挑战赛</a>中场景分类的比赛源码，比赛已经告一段落，这里对总结一下比赛期间遇到的问题，踩的坑等做个总结。和<a href="https://github.com/WinterFu" target="_blank" rel="noopener">WinterFu</a>一起参加了这次比赛，一路摸爬滚打到比赛结束，没少折腾。</em></p></blockquote><a id="more"></a><h2 id="快速接入"><a href="#快速接入" class="headerlink" title="快速接入"></a>快速接入</h2><ul><li>下载<a href="https://github.com/puke3615/SceneClassify" target="_blank" rel="noopener">源码</a></li><li><a href="https://challenger.ai/competition/scene/subject" target="_blank" rel="noopener">下载数据集</a>，有朋友反馈官方链接失效，我在百度云又存放一份：链接: <a href="https://pan.baidu.com/s/1cjR-xhsCq8BD5nH7yQeiIA" target="_blank" rel="noopener">https://pan.baidu.com/s/1cjR-xhsCq8BD5nH7yQeiIA</a> 密码: xfcp</li></ul><ul><li><p>配置数据集路径</p><p>打开<code>config.py</code>，找到下面的位置，根据自己的电脑系统在对应的位置配置上数据集路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># image path</span></span><br><span class="line"><span class="keyword">if</span> is_windows():</span><br><span class="line">    PATH_TRAIN_BASE = <span class="string">'G:/Dataset/SceneClassify/ai_challenger_scene_train_20170904'</span></span><br><span class="line">    PATH_VAL_BASE = <span class="string">'G:/Dataset/SceneClassify/ai_challenger_scene_validation_20170908'</span></span><br><span class="line">    PATH_TEST_B = <span class="string">'G:/Dataset/SceneClassify/ai_challenger_scene_test_b_20170922/scene_test_b_images_20170922'</span></span><br><span class="line"><span class="keyword">elif</span> is_mac():</span><br><span class="line">    PATH_TRAIN_BASE = <span class="string">'/Users/zijiao/Desktop/ai_challenger_scene_train_20170904'</span></span><br><span class="line">    PATH_VAL_BASE = <span class="string">'/Users/zijiao/Desktop/ai_challenger_scene_validation_20170908'</span></span><br><span class="line">    PATH_TEST_B = <span class="string">''</span></span><br><span class="line"><span class="keyword">elif</span> is_linux():</span><br><span class="line">    <span class="comment"># 皮皮酱</span></span><br><span class="line">    PATH_TRAIN_BASE = <span class="string">''</span></span><br><span class="line">    PATH_VAL_BASE = <span class="string">''</span></span><br><span class="line">    PATH_TEST_B = <span class="string">''</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'No images configured on %s'</span> % os_name)</span><br></pre></td></tr></table></figure></li><li><p>分类数据</p><p>运行<code>split_by_class.py</code> 脚本，分别对train数据集合val数据集进行按照子文件夹分类</p></li><li><p>开始训练</p><p>找任一个<code>classifier</code> 开头的(<code>classifier_base</code> 除外)脚本进行运行，这里包含<code>VGG16/19</code>、<code>Xception</code>、<code>Inception-V3</code>、<code>Inception-Resnet-V2</code>等经典模型</p></li></ul><h2 id="要点概述"><a href="#要点概述" class="headerlink" title="要点概述"></a>要点概述</h2><ul><li style="list-style: none"><input type="checkbox" checked> 支持多个单模型进行集成，可选多种集成方式</li><li style="list-style: none"><input type="checkbox" checked> 支持多种集成方式间的任意组合和自动择优</li></ul><ul><li style="list-style: none"><input type="checkbox" checked> 支持间断训练时权重文件的择优选择</li></ul><ul><li style="list-style: none"><input type="checkbox" checked> 支持<code>VGG16</code>、<code>VGG19</code>、<code>Resnet50</code>、<code>Inception-V3</code>、<code>Xception</code>、<code>Inception-Resnet-V3</code>模型</li></ul><ul><li style="list-style: none"><input type="checkbox" checked> <code>imgaug</code> 图片数据增强库替换Keras自带的图片预处理</li></ul><ul><li style="list-style: none"><input type="checkbox" checked> 支持多进程进行图片预处理</li></ul><h2 id="血训"><a href="#血训" class="headerlink" title="血训"></a>血训</h2><h3 id="数据增强很重要！！！"><a href="#数据增强很重要！！！" class="headerlink" title="数据增强很重要！！！"></a>数据增强很重要！！！</h3><p>Keras自带的图片增强远远不够的，这里选择了<a href="https://github.com/aleju/imgaug" target="_blank" rel="noopener">imgaug</a>这个图片数据增强库，直接上图，这种效果是目前的Keras望尘莫及的，尽可能最大限度利用当前有限的数据集。<b>提高1~3个百分点</b></p><p><img src="/2017/05/03/Keras-Scene-Competion/imgaug.png" alt=""></p><h3 id="尽可能高效使用CPU！！！"><a href="#尽可能高效使用CPU！！！" class="headerlink" title="尽可能高效使用CPU！！！"></a>尽可能高效使用CPU！！！</h3><p>训练任务交给GPU去做，新添加的imgaug图片处理方式之后，一个Epoch在1050Ti上耗时90mins+，排查发现大部分时间都在进行图片数据增强处理，于是将该部分的处理替换为多进程方式。<b>时间从90mins降到30mins左右</b></p><h3 id="标准化很重要！！！"><a href="#标准化很重要！！！" class="headerlink" title="标准化很重要！！！"></a>标准化很重要！！！</h3><p>先计算出整体训练集的mean和std，然后在训练阶段的输入数据以mean和std进行高斯化处理（参<a href="mean_var_fetcher.py">mean_var_fetcher.py</a>）<b>提高0.5~1.0个百分点</b></p><h3 id="Fine-tune别绑太紧！！！"><a href="#Fine-tune别绑太紧！！！" class="headerlink" title="Fine-tune别绑太紧！！！"></a>Fine-tune别绑太紧！！！</h3><p>这点尤为重要！Fine-tune时松太开，可能导致训练耗时，也可能导致机器带不动；绑太紧可能导致Fixed的权重参数扼制了模型的学习能力。建议是在机器能扛得住的基础下，尽可能松绑多一些。<b>提高2~5个百分点</b></p><h3 id="模型选择很重要！！！"><a href="#模型选择很重要！！！" class="headerlink" title="模型选择很重要！！！"></a>模型选择很重要！！！</h3><p>糟糕的模型训练几天几夜，可能赶不上优势模型训练几个epoch。<b>VGG16=&gt;Xception提高5~8个百分点</b></p><h3 id="Loss降不下去时尝试调低LR！！！"><a href="#Loss降不下去时尝试调低LR！！！" class="headerlink" title="Loss降不下去时尝试调低LR！！！"></a>Loss降不下去时尝试调低LR！！！</h3><p>降不下去就调小，调下的幅度一般是5倍、10倍左右。<b>提高1~3个百分点</b></p><h3 id="TensorbBoard监视训练状态！！！"><a href="#TensorbBoard监视训练状态！！！" class="headerlink" title="TensorbBoard监视训练状态！！！"></a>TensorbBoard监视训练状态！！！</h3><p>尽可能使用Tensorflow提供的Tensorboard可视化工具，方便从宏观把控训练过程。</p><h3 id="适度过拟合是良性的！！！"><a href="#适度过拟合是良性的！！！" class="headerlink" title="适度过拟合是良性的！！！"></a>适度过拟合是良性的！！！</h3><p>训练过程中一直没有过拟合，要从两方面考虑：</p><ul><li>模型太简单，拟合能力不足，这时要考虑增强网络复杂度 </li><li>数据增强程度太大，学不到某些特征</li></ul><h3 id="模型集成！！！"><a href="#模型集成！！！" class="headerlink" title="模型集成！！！"></a>模型集成！！！</h3><p>单模型没有什么提升空间时，要尝试将多个单模型进行集成。集成的方式可以选择投票法、均值法、按照模型Acc加权法等等。<b>提高0.5~1.5个百分点</b></p><h3 id="预测数据增强！！！"><a href="#预测数据增强！！！" class="headerlink" title="预测数据增强！！！"></a>预测数据增强！！！</h3><p>为了确保预测结果的准确性，可以将待预测结果进行水平翻转（或随机裁取patch等）处理，将这多张孪生图片进行预测，最终结果取多个结果的均值。<b>提高0.25~1.0个百分点</b></p><h3 id="找个小伙伴一起搞！！！"><a href="#找个小伙伴一起搞！！！" class="headerlink" title="找个小伙伴一起搞！！！"></a>找个小伙伴一起搞！！！</h3><p>想法x2，时间/2，还能互相讨论学习！<b>提高0~50个百分点</b></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://challenger.ai/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;全球AI挑战赛&lt;/a&gt;中场景分类的比赛源码，比赛已经告一段落，这里对总结一下比赛期间遇到的问题，踩的坑等做个总结。和&lt;a href=&quot;https://github.com/WinterFu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WinterFu&lt;/a&gt;一起参加了这次比赛，一路摸爬滚打到比赛结束，没少折腾。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="Keras" scheme="http://puke3615.github.io/tags/Keras/"/>
    
      <category term="Tensorflow" scheme="http://puke3615.github.io/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio代码块打标</title>
    <link href="http://puke3615.github.io/2017/03/21/Android-Studio-Code-Block-Mark/"/>
    <id>http://puke3615.github.io/2017/03/21/Android-Studio-Code-Block-Mark/</id>
    <published>2017-03-21T09:32:14.000Z</published>
    <updated>2018-08-26T11:49:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio代码块打标，让我们迅速定位到代码逻辑块。当我们开发中写的某些类的代码量相对比较庞大时，就会遇到维护这个类变得困难的问题，抛开对于该类的设计层面的因素，只从代码量的角度来看这个问题。基于IntelliJ的IDE给我们提供了一种能够给我们的代码块进行归纳的标签（以下称为<code>代码块打标</code>），如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="[A]"&gt;</span></span><br><span class="line">[B]</span><br><span class="line"><span class="comment">// &lt;/editor-fold&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<code>[A]</code> 对应打标的描述语言，<code>[B]</code> 对应待打标代码块。</p><a id="more"></a><p>根据上述规则我们来对<code>MainActivity</code>进行打标操作，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zijiao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 17/3/21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="成员变量"&gt;</span></span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="comment">// &lt;/editor-fold&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="onCreate逻辑"&gt;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initView();</span><br><span class="line">        initListener();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &lt;/editor-fold&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="findView逻辑"&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        button = (Button) findViewById(R.id.button);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &lt;/editor-fold&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="点击事件处理逻辑"&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Click button"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &lt;/editor-fold&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们将各个代码块按照逻辑进行分类并添加对应的描述标签，当我们下次再打开该类时，查看或修改某部分代码就会一目了然（当代码庞大时，其优点将会尤为明显），参见下图</p><p><img src="/2017/03/21/Android-Studio-Code-Block-Mark/img1.gif" alt=""></p><p>可以看到代码块打标是很方便，但是有一点不好，就是当我们需要给某一个代码块打标时我们总是要在代码块之前添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="[A]"&gt;</span></span><br></pre></td></tr></table></figure><p>然后在代码块之后添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;/editor-fold&gt;</span></span><br></pre></td></tr></table></figure><p>这个步骤很繁琐，但好消息是我们可以结合AS提供给我们的<code>LiveTempalte</code>，将这个过程封装成一个打标模板，来看看具体操作</p><ol><li><p>打开Android Studio，进入<code>Preferences</code> — <code>Editor</code> — <code>Live Templates</code> ，新建一个<code>Live Template</code></p></li><li><p><code>Abbreviation</code>处填写<code>Mark Code Block</code>，<code>Template text</code>处填写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="$description$"&gt;</span></span><br><span class="line">$SELECTION$</span><br><span class="line"><span class="comment">// &lt;/editor-fold&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>点击<code>Define</code>，勾选<code>Java</code>复选框</p></li><li><p>点击<code>Apply</code></p></li></ol><p>这个时候你的界面应该是这样，可以核对下</p><p><img src="/2017/03/21/Android-Studio-Code-Block-Mark/img2.png" alt=""></p><p>到这里，打标模板已经完成了，你可以随便找一个类进行测试，选中一个代码块，按下快捷键<code>Command + Option + J</code>（Windows系统可以在<code>Preferences</code> — <code>Keymap</code> 中搜索<code>Surround with Live Template...</code>对应的快捷键）来选择<code>Mark Code Block</code>模板，此时我们就可以快速进行代码块打标操作了，如下图</p><p><img src="/2017/03/21/Android-Studio-Code-Block-Mark/img3.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android Studio代码块打标，让我们迅速定位到代码逻辑块。当我们开发中写的某些类的代码量相对比较庞大时，就会遇到维护这个类变得困难的问题，抛开对于该类的设计层面的因素，只从代码量的角度来看这个问题。基于IntelliJ的IDE给我们提供了一种能够给我们的代码块进行归纳的标签（以下称为&lt;code&gt;代码块打标&lt;/code&gt;），如下&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;lt;editor-fold defaultstate=&quot;collapsed&quot; desc=&quot;[A]&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[B]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;lt;/editor-fold&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，&lt;code&gt;[A]&lt;/code&gt; 对应打标的描述语言，&lt;code&gt;[B]&lt;/code&gt; 对应待打标代码块。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://puke3615.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://puke3615.github.io/tags/Android/"/>
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android Studio" scheme="http://puke3615.github.io/tags/Android-Studio/"/>
    
  </entry>
  
</feed>
