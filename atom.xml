<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Puke&#39;s Blog</title>
  
  <subtitle>Keep learning as long as living.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://puke3615.github.io/"/>
  <updated>2018-07-27T10:37:56.000Z</updated>
  <id>http://puke3615.github.io/</id>
  
  <author>
    <name>Puke</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Keras框架总结</title>
    <link href="http://puke3615.github.io/2017/11/08/Keras-Doc-Summary/"/>
    <id>http://puke3615.github.io/2017/11/08/Keras-Doc-Summary/</id>
    <published>2017-11-08T10:37:32.000Z</published>
    <updated>2018-07-27T10:37:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/11/08/Keras-Doc-Summary/Keras.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      Keras框架概要
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="Keras" scheme="http://puke3615.github.io/tags/Keras/"/>
    
  </entry>
  
  <entry>
    <title>基于RNN自动作诗源码剖析</title>
    <link href="http://puke3615.github.io/2017/10/12/Tensorflow-Poems-Source/"/>
    <id>http://puke3615.github.io/2017/10/12/Tensorflow-Poems-Source/</id>
    <published>2017-10-12T05:21:32.000Z</published>
    <updated>2017-10-12T09:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Tensorflow Poems是一款基于RNN（循环神经网络）的 <a href="https://github.com/jinfagang/tensorflow_poems" target="_blank" rel="noopener">Github开源项目</a>，它能通过学习大量古诗文和歌词然后能够自己来模仿创造诗文和歌词。</em><br>[TOC]</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>就项目本身，其意义不是很大，权当娱乐就行。这里的重点是解读如何从最原始的诗句，到数据的读取，再到数据预处理，再到模型的构建，再到最后的训练和使用流程。</p><h2 id="源数据"><a href="#源数据" class="headerlink" title="源数据"></a>源数据</h2><p>通过上面的github地址可以下载到项目源码，其中古诗文的数据集是<code>dataset/data/poems.txt</code>，打开可以看到如下的内容（篇幅限制，只显示了前两行诗句）。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首春:寒随穷律变，春逐鸟声开。初风飘带柳，晚雪间花梅。碧林青旧竹，绿沼翠新苔。芝田初雁去，绮树巧莺来。</span><br><span class="line">初晴落景:晚霞聊自怡，初晴弥可喜。日晃百花色，风动千林翠。池鱼跃不同，园鸟声还异。寄言博通者，知予物外志。</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>整体的格式还是蛮清晰的，每行就代表一首诗，每首诗由标题和内容两部分组成，中间以冒号分割。</p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>代码位于<code>poems.py</code>文件的<code>process_peoms</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_poems</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    <span class="comment"># 诗集</span></span><br><span class="line">    poems = []</span><br><span class="line">    <span class="keyword">with</span> open(file_name, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 取出title和content</span></span><br><span class="line">                title, content = line.strip().split(<span class="string">':'</span>)</span><br><span class="line">                <span class="comment"># 移除content中的所有空格</span></span><br><span class="line">                content = content.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">                <span class="comment"># 过滤掉包含特殊字符的诗</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">'_'</span> <span class="keyword">in</span> content <span class="keyword">or</span> <span class="string">'('</span> <span class="keyword">in</span> content <span class="keyword">or</span> <span class="string">'（'</span> <span class="keyword">in</span> content <span class="keyword">or</span> <span class="string">'《'</span> <span class="keyword">in</span> content <span class="keyword">or</span> <span class="string">'['</span> <span class="keyword">in</span> content <span class="keyword">or</span> \</span><br><span class="line">                                start_token <span class="keyword">in</span> content <span class="keyword">or</span> end_token <span class="keyword">in</span> content:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 过滤掉过长或过短的诗句</span></span><br><span class="line">                <span class="keyword">if</span> len(content) &lt; <span class="number">5</span> <span class="keyword">or</span> len(content) &gt; <span class="number">79</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 将内容加上前缀(G)和后缀(E)</span></span><br><span class="line">                content = start_token + content + end_token</span><br><span class="line">                <span class="comment"># 处理后的添加到诗集中</span></span><br><span class="line">                poems.append(content)</span><br><span class="line">            <span class="comment"># 处理过程出错则跳过, 忽略掉</span></span><br><span class="line">            <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 按诗的字数排序</span></span><br><span class="line">    poems = sorted(poems, key=<span class="keyword">lambda</span> l: len(line))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计每个字出现次数</span></span><br><span class="line">    all_words = []</span><br><span class="line">    <span class="keyword">for</span> poem <span class="keyword">in</span> poems:</span><br><span class="line">        all_words += [word <span class="keyword">for</span> word <span class="keyword">in</span> poem]</span><br><span class="line">    <span class="comment"># 计算每个字对应的频率</span></span><br><span class="line">    counter = collections.Counter(all_words)</span><br><span class="line">    <span class="comment"># 按照文字频率进行倒序排列</span></span><br><span class="line">    count_pairs = sorted(counter.items(), key=<span class="keyword">lambda</span> x: -x[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 取出排列后的字集, 赋值给words</span></span><br><span class="line">    words, _ = zip(*count_pairs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将words最后追加一位空格</span></span><br><span class="line">    words = words[:len(words)] + (<span class="string">' '</span>,)</span><br><span class="line">    <span class="comment"># 每个字映射为一个数字ID</span></span><br><span class="line">    word_int_map = dict(zip(words, range(len(words))))</span><br><span class="line">    <span class="comment"># 将诗句中的每个word都注意映射为对应的数字ID</span></span><br><span class="line">    poems_vector = [list(map(<span class="keyword">lambda</span> word: word_int_map.get(word, len(words)), poem)) <span class="keyword">for</span> poem <span class="keyword">in</span> poems]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 依次返回数字ID表示的诗句、汉字-ID的映射map、所有的汉字的列表</span></span><br><span class="line">    <span class="keyword">return</span> poems_vector, word_int_map, words</span><br></pre></td></tr></table></figure><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>代码位于<code>model.py</code>的<code>rnn_model</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_model</span><span class="params">(model, input_data, output_data, vocab_size, rnn_size=<span class="number">128</span>, num_layers=<span class="number">2</span>, batch_size=<span class="number">64</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              learning_rate=<span class="number">0.01</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    构造rnn的序列模型</span></span><br><span class="line"><span class="string">    :param model: model class</span></span><br><span class="line"><span class="string">    :param input_data: 输入数据占位符</span></span><br><span class="line"><span class="string">    :param output_data: 输出数据占位符</span></span><br><span class="line"><span class="string">    :param vocab_size: words的总长度</span></span><br><span class="line"><span class="string">    :param rnn_size: rnn的units数</span></span><br><span class="line"><span class="string">    :param num_layers: rnn中cell的层数</span></span><br><span class="line"><span class="string">    :param batch_size: 每个batch的样本数量</span></span><br><span class="line"><span class="string">    :param learning_rate: 学习率</span></span><br><span class="line"><span class="string">    :return: 模型状态集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 声明模型状态集, 由于模型需要返回多个相关值, 故以map集合的形式向外部返回</span></span><br><span class="line">    end_points = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择rnn的具体cell类型, 提供了rnn、gru、lstm三种</span></span><br><span class="line">    <span class="keyword">if</span> model == <span class="string">'rnn'</span>:</span><br><span class="line">        cell_fun = tf.contrib.rnn.BasicRNNCell</span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">'gru'</span>:</span><br><span class="line">        cell_fun = tf.contrib.rnn.GRUCell</span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">'lstm'</span>:</span><br><span class="line">        cell_fun = tf.contrib.rnn.BasicLSTMCell</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造具体的cell</span></span><br><span class="line">    cell = cell_fun(rnn_size, state_is_tuple=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 将单层的cell变为更深的cell, 以表征更复杂的关联关系</span></span><br><span class="line">    cell = tf.contrib.rnn.MultiRNNCell([cell] * num_layers, state_is_tuple=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化cell的状态</span></span><br><span class="line">    <span class="keyword">if</span> output_data <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># 训练时batch容量为batch_size</span></span><br><span class="line">        initial_state = cell.zero_state(batch_size, tf.float32)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 使用时batch容量为1</span></span><br><span class="line">        initial_state = cell.zero_state(<span class="number">1</span>, tf.float32)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># tensorflow对于lookup_embedding的操作只能再cpu上进行</span></span><br><span class="line">    <span class="keyword">with</span> tf.device(<span class="string">"/cpu:0"</span>):</span><br><span class="line">        <span class="comment"># 构造(vocab_size + 1, run_size)的Tensor</span></span><br><span class="line">        embedding = tf.get_variable(<span class="string">'embedding'</span>, initializer=tf.random_uniform(</span><br><span class="line">            [vocab_size + <span class="number">1</span>, rnn_size], <span class="number">-1.0</span>, <span class="number">1.0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># embedding_lookup函数</span></span><br><span class="line">        <span class="comment"># output = embedding_lookup(embedding, ids): 将ids里的element替换为embedding中对应element位的值</span></span><br><span class="line">        <span class="comment"># 即: embedding: [[1, 2], [3, 4], [5, 6]]  ids: [1, 2]  则outputs: [[3, 4], [5, 6]]</span></span><br><span class="line">        <span class="comment"># 类比one_hot, 只是这里是x_hot</span></span><br><span class="line">        <span class="comment"># embedding: (3, 2)  ids: (10, )  outputs: (10, 2)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理之后的shape为(batch_size, n_steps, rnn_size)</span></span><br><span class="line">        inputs = tf.nn.embedding_lookup(embedding, input_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># (batch_size, n_steps, rnn_size) =&gt; (batch_size, n_steps, rnn_size)</span></span><br><span class="line">    outputs, last_state = tf.nn.dynamic_rnn(cell, inputs, initial_state=initial_state)</span><br><span class="line">    <span class="comment"># (batch_size, n_steps, rnn_size) =&gt; (batch_size x n_steps, rnn_size)</span></span><br><span class="line">    output = tf.reshape(outputs, [<span class="number">-1</span>, rnn_size])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># (batch_size x n_steps, rnn_size) =&gt; (batch_size x n_steps, vocab_size + 1)</span></span><br><span class="line">    weights = tf.Variable(tf.truncated_normal([rnn_size, vocab_size + <span class="number">1</span>]))</span><br><span class="line">    bias = tf.Variable(tf.zeros(shape=[vocab_size + <span class="number">1</span>]))</span><br><span class="line">    logits = tf.nn.bias_add(tf.matmul(output, weights), bias=bias)</span><br><span class="line">    <span class="comment"># [?, vocab_size+1]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> output_data <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># output_data must be one-hot encode</span></span><br><span class="line">        labels = tf.one_hot(tf.reshape(output_data, [<span class="number">-1</span>]), depth=vocab_size + <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># should be [?, vocab_size+1]</span></span><br><span class="line"></span><br><span class="line">        loss = tf.nn.softmax_cross_entropy_with_logits(labels=labels, logits=logits)</span><br><span class="line">        <span class="comment"># loss shape should be [?, vocab_size+1]</span></span><br><span class="line">        total_loss = tf.reduce_mean(loss)</span><br><span class="line">        train_op = tf.train.AdamOptimizer(learning_rate).minimize(total_loss)</span><br><span class="line"></span><br><span class="line">        end_points[<span class="string">'initial_state'</span>] = initial_state</span><br><span class="line">        end_points[<span class="string">'output'</span>] = output</span><br><span class="line">        end_points[<span class="string">'train_op'</span>] = train_op</span><br><span class="line">        end_points[<span class="string">'total_loss'</span>] = total_loss</span><br><span class="line">        end_points[<span class="string">'loss'</span>] = loss</span><br><span class="line">        end_points[<span class="string">'last_state'</span>] = last_state</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        prediction = tf.nn.softmax(logits)</span><br><span class="line"></span><br><span class="line">        end_points[<span class="string">'initial_state'</span>] = initial_state</span><br><span class="line">        end_points[<span class="string">'last_state'</span>] = last_state</span><br><span class="line">        end_points[<span class="string">'prediction'</span>] = prediction</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> end_points</span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>获取数据batch的代码位于<code>poem.py</code>的<code>generate_batch</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_batch</span><span class="params">(batch_size, poems_vec, word_to_int)</span>:</span></span><br><span class="line">    <span class="comment"># 每次取batch_size首诗进行训练</span></span><br><span class="line">    n_chunk = len(poems_vec) // batch_size</span><br><span class="line">    x_batches = []</span><br><span class="line">    y_batches = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_chunk):</span><br><span class="line">        <span class="comment"># 求得每个batch中start和end的索引值</span></span><br><span class="line">        start_index = i * batch_size</span><br><span class="line">        end_index = start_index + batch_size</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 取出batch的数据</span></span><br><span class="line">        batches = poems_vec[start_index:end_index]</span><br><span class="line">        <span class="comment"># 找到这个batch的所有poem中最长的poem的长度</span></span><br><span class="line">        length = max(map(len, batches))</span><br><span class="line">        <span class="comment"># 填充一个这么大小的空batch，空的地方放空格对应的index标号</span></span><br><span class="line">        x_data = np.full((batch_size, length), word_to_int[<span class="string">' '</span>], np.int32)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(batch_size):</span><br><span class="line">            <span class="comment"># 每一行就是一首诗，在原本的长度上把诗还原上去</span></span><br><span class="line">            x_data[row, :len(batches[row])] = batches[row]</span><br><span class="line">        y_data = np.copy(x_data)</span><br><span class="line">        <span class="comment"># y的话就是x向左边也就是前面移动一个</span></span><br><span class="line">        y_data[:, :<span class="number">-1</span>] = x_data[:, <span class="number">1</span>:]</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        x_data             y_data</span></span><br><span class="line"><span class="string">        [6,2,4,6,9]       [2,4,6,9,9]</span></span><br><span class="line"><span class="string">        [1,4,2,8,5]       [4,2,8,5,5]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        x_batches.append(x_data)</span><br><span class="line">        y_batches.append(y_data)</span><br><span class="line">    <span class="keyword">return</span> x_batches, y_batches</span><br></pre></td></tr></table></figure><p>训练代码位于<code>tang_poems.py</code>的<code>run_training</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_training</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 检测模型参数文件夹及父文件夹, 不存在则新建</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.dirname(FLAGS.checkpoints_dir)):</span><br><span class="line">        os.mkdir(os.path.dirname(FLAGS.checkpoints_dir))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(FLAGS.checkpoints_dir):</span><br><span class="line">        os.mkdir(FLAGS.checkpoints_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取诗集文件</span></span><br><span class="line">    <span class="comment"># 依次得到数字ID表示的诗句、汉字-ID的映射map、所有的汉字的列表</span></span><br><span class="line">    poems_vector, word_to_int, vocabularies = process_poems(FLAGS.file_path)</span><br><span class="line">    <span class="comment"># 按照batch读取输入和输出数据</span></span><br><span class="line">    batches_inputs, batches_outputs = generate_batch(FLAGS.batch_size,</span><br><span class="line">                                                     poems_vector, word_to_int)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 声明输入、输出的占位符</span></span><br><span class="line">    input_data = tf.placeholder(tf.int32, [FLAGS.batch_size, <span class="keyword">None</span>])</span><br><span class="line">    output_targets = tf.placeholder(tf.int32, [FLAGS.batch_size, <span class="keyword">None</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过rnn模型得到结果状态集</span></span><br><span class="line">    end_points = rnn_model(model=<span class="string">'lstm'</span>, input_data=input_data,</span><br><span class="line">                           output_data=output_targets, vocab_size=len(vocabularies),</span><br><span class="line">                           rnn_size=<span class="number">128</span>, num_layers=<span class="number">2</span>, batch_size=<span class="number">64</span>,</span><br><span class="line">                           learning_rate=FLAGS.learning_rate)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化saver和session</span></span><br><span class="line">    saver = tf.train.Saver(tf.global_variables())</span><br><span class="line">    init_op = tf.group(tf.global_variables_initializer(),</span><br><span class="line">                       tf.local_variables_initializer())</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init_op)</span><br><span class="line">        start_epoch = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 加载上次的模型参数(如果有)</span></span><br><span class="line">        checkpoint = tf.train.latest_checkpoint(FLAGS.checkpoints_dir)</span><br><span class="line">        <span class="keyword">if</span> checkpoint:</span><br><span class="line">            saver.restore(sess, checkpoint)</span><br><span class="line">            print(<span class="string">"[INFO] restore from the checkpoint &#123;0&#125;"</span>.format(checkpoint))</span><br><span class="line">            <span class="comment"># 如果有模型参数, 则取出对应的epoch, 训练从该epoch开始训练</span></span><br><span class="line">            start_epoch += int(checkpoint.split(<span class="string">'-'</span>)[<span class="number">-1</span>])</span><br><span class="line">        <span class="comment"># 开始训练</span></span><br><span class="line">        print(<span class="string">'[INFO] start training...'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> epoch <span class="keyword">in</span> range(start_epoch, FLAGS.epochs):</span><br><span class="line">                n = <span class="number">0</span></span><br><span class="line">                <span class="comment"># 计算一个epoch需要多少次batch训练完, 有余数则忽略掉末尾部分</span></span><br><span class="line">                n_chunk = len(poems_vector) // FLAGS.batch_size</span><br><span class="line">                <span class="keyword">for</span> batch <span class="keyword">in</span> range(n_chunk):</span><br><span class="line">                    <span class="comment"># 训练并计算loss</span></span><br><span class="line">                    <span class="comment"># batches_inputs[n]: 第n个batch的输入数据</span></span><br><span class="line">                    <span class="comment"># batches_outputs[n]: 第n个batch的输出数据</span></span><br><span class="line">                    loss, _, _ = sess.run([</span><br><span class="line">                        end_points[<span class="string">'total_loss'</span>],</span><br><span class="line">                        end_points[<span class="string">'last_state'</span>],</span><br><span class="line">                        end_points[<span class="string">'train_op'</span>]</span><br><span class="line">                    ], feed_dict=&#123;</span><br><span class="line">                        input_data: batches_inputs[n],</span><br><span class="line">                        output_targets: batches_outputs[n]</span><br><span class="line">                    &#125;)</span><br><span class="line">                    n += <span class="number">1</span></span><br><span class="line">                    print(<span class="string">'[INFO] Epoch: %d , batch: %d , training loss: %.6f'</span> % (epoch, batch, loss))</span><br><span class="line">                <span class="comment"># 每训练6个epoch进行一次模型保存</span></span><br><span class="line">                <span class="keyword">if</span> epoch % <span class="number">6</span> == <span class="number">0</span>:</span><br><span class="line">                    saver.save(sess, os.path.join(FLAGS.checkpoints_dir,</span><br><span class="line">                                                  FLAGS.model_prefix), global_step=epoch)</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="comment"># 用户手动退出时, 尝试保存模型参数</span></span><br><span class="line">            print(<span class="string">'[INFO] Interrupt manually, try saving checkpoint for now...'</span>)</span><br><span class="line">            saver.save(sess, os.path.join(FLAGS.checkpoints_dir,</span><br><span class="line">                                          FLAGS.model_prefix), global_step=epoch)</span><br><span class="line">            print(<span class="string">'[INFO] Last epoch were saved, next time will start from epoch &#123;&#125;.'</span>.format(epoch))</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>取词代码位于<code>tang_poems.py</code>的<code>to_word</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_word</span><span class="params">(predict, vocabs)</span>:</span></span><br><span class="line">    <span class="comment"># 取词逻辑</span></span><br><span class="line">    <span class="comment"># 将predict累加求和</span></span><br><span class="line">    t = np.cumsum(predict)</span><br><span class="line">    <span class="comment"># 求出预测可能性的总和</span></span><br><span class="line">    s = np.sum(predict)</span><br><span class="line">    <span class="comment"># 返回将0~s的随机值插值到t中的索引值</span></span><br><span class="line">    <span class="comment"># 由于predict各维度对应的词向量是按照训练数据集的频率进行排序的</span></span><br><span class="line">    <span class="comment"># 故P(x|predict[i]均等时) &gt; P(x + δ), 即达到了权衡优先取前者和高概率词向量的目的</span></span><br><span class="line">    sample = int(np.searchsorted(t, np.random.rand(<span class="number">1</span>) * s))</span><br><span class="line">    <span class="keyword">if</span> sample &gt;= len(vocabs):</span><br><span class="line">        sample = len(vocabs) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> vocabs[sample]</span><br></pre></td></tr></table></figure><p>作诗代码位于<code>tang_peoms.py</code>的<code>gen_poem</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_poem</span><span class="params">(begin_word)</span>:</span></span><br><span class="line">    <span class="comment"># 根据首个汉字作诗</span></span><br><span class="line">    <span class="comment"># 作诗时, batch_size设为1</span></span><br><span class="line">    batch_size = <span class="number">1</span></span><br><span class="line">    print(<span class="string">'[INFO] loading corpus from %s'</span> % FLAGS.file_path)</span><br><span class="line">    <span class="comment"># 读取诗集文件</span></span><br><span class="line">    <span class="comment"># 依次得到数字ID表示的诗句、汉字-ID的映射map、所有的汉字的列表</span></span><br><span class="line">    poems_vector, word_int_map, vocabularies = process_poems(FLAGS.file_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 声明输入的占位符</span></span><br><span class="line">    input_data = tf.placeholder(tf.int32, [batch_size, <span class="keyword">None</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过rnn模型得到结果状态集</span></span><br><span class="line">    end_points = rnn_model(model=<span class="string">'lstm'</span>, input_data=input_data,</span><br><span class="line">                           output_data=<span class="keyword">None</span>, vocab_size=len(vocabularies),</span><br><span class="line">                           rnn_size=<span class="number">128</span>, num_layers=<span class="number">2</span>, batch_size=<span class="number">64</span>,</span><br><span class="line">                           learning_rate=FLAGS.learning_rate)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化saver和session</span></span><br><span class="line">    saver = tf.train.Saver(tf.global_variables())</span><br><span class="line">    init_op = tf.group(tf.global_variables_initializer(),</span><br><span class="line">                       tf.local_variables_initializer())</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init_op)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加载上次的模型参数</span></span><br><span class="line">        checkpoint = tf.train.latest_checkpoint(FLAGS.checkpoints_dir)</span><br><span class="line">        <span class="comment"># 注: 无模型参数时, 该步直接crash, 强制有训练好的模型参数</span></span><br><span class="line">        saver.restore(sess, checkpoint)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 取出诗文前缀(G)对应的索引值所谓初始输入</span></span><br><span class="line">        x = np.array([list(map(word_int_map.get, start_token))])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 得出预测值和rnn的当前状态</span></span><br><span class="line">        [predict, last_state] = sess.run([end_points[<span class="string">'prediction'</span>], end_points[<span class="string">'last_state'</span>]],feed_dict=&#123;input_data: x&#125;)</span><br><span class="line">        <span class="keyword">if</span> begin_word:</span><br><span class="line">            <span class="comment"># 用户输入值赋值给word</span></span><br><span class="line">            word = begin_word</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 若未输入, 则取初始预测值的词向量</span></span><br><span class="line">            word = to_word(predict, vocabularies)</span><br><span class="line">        <span class="comment"># 初始化作诗结果变量</span></span><br><span class="line">        poem = <span class="string">''</span></span><br><span class="line">        <span class="comment"># 未到结束符时, 一直预测下一个词</span></span><br><span class="line">        <span class="keyword">while</span> word != end_token:</span><br><span class="line">            <span class="comment"># 没预测一个则追加到结果上</span></span><br><span class="line">            poem += word</span><br><span class="line">            <span class="comment"># 初始化输入为[[0]]</span></span><br><span class="line">            x = np.zeros((<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">            <span class="comment"># 赋值为当前word对应的索引值</span></span><br><span class="line">            x[<span class="number">0</span>, <span class="number">0</span>] = word_int_map[word]</span><br><span class="line">            <span class="comment"># 根据当前词和当前的上下文状态(last_state)进行预测 </span></span><br><span class="line">            <span class="comment"># 返回的结果是预测值和最新的上下文状态</span></span><br><span class="line">            [predict, last_state] = sess.run([end_points[<span class="string">'prediction'</span>],</span><br><span class="line">                                              end_points[<span class="string">'last_state'</span>]],</span><br><span class="line">                                             feed_dict=&#123;</span><br><span class="line">                                                 input_data: x,</span><br><span class="line">                                                 end_points[<span class="string">'initial_state'</span>]: last_state</span><br><span class="line">                                             &#125;)</span><br><span class="line">            <span class="comment"># 根据预测值得出词向量</span></span><br><span class="line">            word = to_word(predict, vocabularies)</span><br><span class="line">        <span class="keyword">return</span> poem</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Tensorflow通过基于RNN来学习古诗文的序列数据，来自动作诗。
    
    </summary>
    
    
      <category term="Tensorflow" scheme="http://puke3615.github.io/tags/Tensorflow/"/>
    
      <category term="Machine-Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="LSTM" scheme="http://puke3615.github.io/tags/LSTM/"/>
    
      <category term="RNN" scheme="http://puke3615.github.io/tags/RNN/"/>
    
  </entry>
  
  <entry>
    <title>读《西瓜书》</title>
    <link href="http://puke3615.github.io/2017/09/02/Watermelon-Book/"/>
    <id>http://puke3615.github.io/2017/09/02/Watermelon-Book/</id>
    <published>2017-09-02T10:46:35.000Z</published>
    <updated>2017-09-02T10:52:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>相对于《机器学习实战》而言，这本书更偏向于理论推导，很多细节部分讲得更加详细。</p><p><img src="/2017/09/02/Watermelon-Book/image.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      机器学习理论基础书，涵盖大部分机器学习的常用算法。
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="思维导图" scheme="http://puke3615.github.io/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Sklearn之基于面部特征和SVM的脸部识别</title>
    <link href="http://puke3615.github.io/2017/09/01/Sklearn-Faces-Recognition-With-Eigenfaces-And-SVM/"/>
    <id>http://puke3615.github.io/2017/09/01/Sklearn-Faces-Recognition-With-Eigenfaces-And-SVM/</id>
    <published>2017-09-01T09:41:34.000Z</published>
    <updated>2018-07-27T06:15:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://vis-www.cs.umass.edu/lfw/lfw-funneled.tgz" target="_blank" rel="noopener">点击下载数据集(233MB)</a></p><p>Expected results for the top 5 most represented people in the dataset:</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Ariel Sharon</td><td>0.67</td><td>0.92</td><td>0.77</td><td>13</td></tr><tr><td>Colin Powell</td><td>0.75</td><td>0.78</td><td>0.76</td><td>60</td></tr><tr><td>Donald Rumsfeld</td><td>0.78</td><td>0.67</td><td>0.72</td><td>27</td></tr><tr><td>George W Bush</td><td>0.86</td><td>0.86</td><td>0.86</td><td>146</td></tr><tr><td>Gerhard Schroeder</td><td>0.76</td><td>0.76</td><td>0.76</td><td>25</td></tr><tr><td>Hugo Chavez</td><td>0.67</td><td>0.67</td><td>0.67</td><td>15</td></tr><tr><td>Tony Blair</td><td>0.81</td><td>0.69</td><td>0.75</td><td>36</td></tr><tr><td>avg / total</td><td>0.80</td><td>0.80</td><td>0.80</td><td>322</td></tr></tbody></table><a id="more"></a><p> <img src="/2017/09/01/Sklearn-Faces-Recognition-With-Eigenfaces-And-SVM/image1.png" alt=""><br> <img src="/2017/09/01/Sklearn-Faces-Recognition-With-Eigenfaces-And-SVM/image2.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_lfw_people</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(__doc__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Display progress logs on stdout</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">'%(asctime)s %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># #############################################################################</span></span><br><span class="line"><span class="comment"># Download the data, if not already on disk and load it as numpy arrays</span></span><br><span class="line"></span><br><span class="line">lfw_people = fetch_lfw_people(min_faces_per_person=<span class="number">70</span>, resize=<span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># introspect the images arrays to find the shapes (for plotting)</span></span><br><span class="line">n_samples, h, w = lfw_people.images.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># for machine learning we use the 2 data directly (as relative pixel</span></span><br><span class="line"><span class="comment"># positions info is ignored by this model)</span></span><br><span class="line">X = lfw_people.data</span><br><span class="line">n_features = X.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># the label to predict is the id of the person</span></span><br><span class="line">y = lfw_people.target</span><br><span class="line">target_names = lfw_people.target_names</span><br><span class="line">n_classes = target_names.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Total dataset size:"</span>)</span><br><span class="line">print(<span class="string">"n_samples: %d"</span> % n_samples)</span><br><span class="line">print(<span class="string">"n_features: %d"</span> % n_features)</span><br><span class="line">print(<span class="string">"n_classes: %d"</span> % n_classes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># #############################################################################</span></span><br><span class="line"><span class="comment"># Split into a training set and a test set using a stratified k fold</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># split into a training and testing set</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(</span><br><span class="line">    X, y, test_size=<span class="number">0.25</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># #############################################################################</span></span><br><span class="line"><span class="comment"># Compute a PCA (eigenfaces) on the face dataset (treated as unlabeled</span></span><br><span class="line"><span class="comment"># dataset): unsupervised feature extraction / dimensionality reduction</span></span><br><span class="line">n_components = <span class="number">150</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Extracting the top %d eigenfaces from %d faces"</span></span><br><span class="line">      % (n_components, X_train.shape[<span class="number">0</span>]))</span><br><span class="line">t0 = time()</span><br><span class="line">pca = PCA(n_components=n_components, svd_solver=<span class="string">'randomized'</span>,</span><br><span class="line">          whiten=<span class="keyword">True</span>).fit(X_train)</span><br><span class="line">print(<span class="string">"done in %0.3fs"</span> % (time() - t0))</span><br><span class="line"></span><br><span class="line">eigenfaces = pca.components_.reshape((n_components, h, w))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Projecting the input data on the eigenfaces orthonormal basis"</span>)</span><br><span class="line">t0 = time()</span><br><span class="line">X_train_pca = pca.transform(X_train)</span><br><span class="line">X_test_pca = pca.transform(X_test)</span><br><span class="line">print(<span class="string">"done in %0.3fs"</span> % (time() - t0))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># #############################################################################</span></span><br><span class="line"><span class="comment"># Train a SVM classification model</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Fitting the classifier to the training set"</span>)</span><br><span class="line">t0 = time()</span><br><span class="line">param_grid = &#123;<span class="string">'C'</span>: [<span class="number">1e3</span>, <span class="number">5e3</span>, <span class="number">1e4</span>, <span class="number">5e4</span>, <span class="number">1e5</span>],</span><br><span class="line">              <span class="string">'gamma'</span>: [<span class="number">0.0001</span>, <span class="number">0.0005</span>, <span class="number">0.001</span>, <span class="number">0.005</span>, <span class="number">0.01</span>, <span class="number">0.1</span>], &#125;</span><br><span class="line">clf = GridSearchCV(SVC(kernel=<span class="string">'rbf'</span>, class_weight=<span class="string">'balanced'</span>), param_grid)</span><br><span class="line">clf = clf.fit(X_train_pca, y_train)</span><br><span class="line">print(<span class="string">"done in %0.3fs"</span> % (time() - t0))</span><br><span class="line">print(<span class="string">"Best estimator found by grid search:"</span>)</span><br><span class="line">print(clf.best_estimator_)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># #############################################################################</span></span><br><span class="line"><span class="comment"># Quantitative evaluation of the model quality on the test set</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Predicting people's names on the test set"</span>)</span><br><span class="line">t0 = time()</span><br><span class="line">y_pred = clf.predict(X_test_pca)</span><br><span class="line">print(<span class="string">"done in %0.3fs"</span> % (time() - t0))</span><br><span class="line"></span><br><span class="line">print(classification_report(y_test, y_pred, target_names=target_names))</span><br><span class="line">print(confusion_matrix(y_test, y_pred, labels=range(n_classes)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># #############################################################################</span></span><br><span class="line"><span class="comment"># Qualitative evaluation of the predictions using matplotlib</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_gallery</span><span class="params">(images, titles, h, w, n_row=<span class="number">3</span>, n_col=<span class="number">4</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Helper function to plot a gallery of portraits"""</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">1.8</span> * n_col, <span class="number">2.4</span> * n_row))</span><br><span class="line">    plt.subplots_adjust(bottom=<span class="number">0</span>, left=<span class="number">.01</span>, right=<span class="number">.99</span>, top=<span class="number">.90</span>, hspace=<span class="number">.35</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_row * n_col):</span><br><span class="line">        plt.subplot(n_row, n_col, i + <span class="number">1</span>)</span><br><span class="line">        plt.imshow(images[i].reshape((h, w)), cmap=plt.cm.gray)</span><br><span class="line">        plt.title(titles[i], size=<span class="number">12</span>)</span><br><span class="line">        plt.xticks(())</span><br><span class="line">        plt.yticks(())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># plot the result of the prediction on a portion of the test set</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">title</span><span class="params">(y_pred, y_test, target_names, i)</span>:</span></span><br><span class="line">    pred_name = target_names[y_pred[i]].rsplit(<span class="string">' '</span>, <span class="number">1</span>)[<span class="number">-1</span>]</span><br><span class="line">    true_name = target_names[y_test[i]].rsplit(<span class="string">' '</span>, <span class="number">1</span>)[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'predicted: %s\ntrue:      %s'</span> % (pred_name, true_name)</span><br><span class="line"></span><br><span class="line">prediction_titles = [title(y_pred, y_test, target_names, i)</span><br><span class="line">                     <span class="keyword">for</span> i <span class="keyword">in</span> range(y_pred.shape[<span class="number">0</span>])]</span><br><span class="line"></span><br><span class="line">plot_gallery(X_test, prediction_titles, h, w)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot the gallery of the most significative eigenfaces</span></span><br><span class="line"></span><br><span class="line">eigenface_titles = [<span class="string">"eigenface %d"</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(eigenfaces.shape[<span class="number">0</span>])]</span><br><span class="line">plot_gallery(eigenfaces, eigenface_titles, h, w)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Total dataset size:</span><br><span class="line">n_samples: <span class="number">1288</span></span><br><span class="line">n_features: <span class="number">1850</span></span><br><span class="line">n_classes: <span class="number">7</span></span><br><span class="line">Extracting the top <span class="number">150</span> eigenfaces <span class="keyword">from</span> <span class="number">966</span> faces</span><br><span class="line">done <span class="keyword">in</span> <span class="number">0.241</span>s</span><br><span class="line">Projecting the input data on the eigenfaces orthonormal basis</span><br><span class="line">done <span class="keyword">in</span> <span class="number">0.025</span>s</span><br><span class="line">Fitting the classifier to the training set</span><br><span class="line">done <span class="keyword">in</span> <span class="number">24.951</span>s</span><br><span class="line">Best estimator found by grid search:</span><br><span class="line">SVC(C=<span class="number">1000.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="string">'balanced'</span>, coef0=<span class="number">0.0</span>,</span><br><span class="line">  decision_function_shape=<span class="string">'ovr'</span>, degree=<span class="number">3</span>, gamma=<span class="number">0.001</span>, kernel=<span class="string">'rbf'</span>,</span><br><span class="line">  max_iter=<span class="number">-1</span>, probability=<span class="keyword">False</span>, random_state=<span class="keyword">None</span>, shrinking=<span class="keyword">True</span>,</span><br><span class="line">  tol=<span class="number">0.001</span>, verbose=<span class="keyword">False</span>)</span><br><span class="line">Predicting people<span class="string">'s names on the test set</span></span><br><span class="line"><span class="string">done in 0.051s</span></span><br><span class="line"><span class="string">                   precision    recall  f1-score   support</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     Ariel Sharon       0.53      0.69      0.60        13</span></span><br><span class="line"><span class="string">     Colin Powell       0.79      0.88      0.83        60</span></span><br><span class="line"><span class="string">  Donald Rumsfeld       0.72      0.78      0.75        27</span></span><br><span class="line"><span class="string">    George W Bush       0.91      0.88      0.90       146</span></span><br><span class="line"><span class="string">Gerhard Schroeder       0.80      0.80      0.80        25</span></span><br><span class="line"><span class="string">      Hugo Chavez       0.80      0.53      0.64        15</span></span><br><span class="line"><span class="string">       Tony Blair       0.85      0.81      0.83        36</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      avg / total       0.84      0.83      0.83       322</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[[  9   1   2   1   0   0   0]</span></span><br><span class="line"><span class="string"> [  3  53   1   2   0   1   0]</span></span><br><span class="line"><span class="string"> [  4   0  21   2   0   0   0]</span></span><br><span class="line"><span class="string"> [  1   8   4 128   3   1   1]</span></span><br><span class="line"><span class="string"> [  0   1   0   2  20   0   2]</span></span><br><span class="line"><span class="string"> [  0   2   0   1   2   8   2]</span></span><br><span class="line"><span class="string"> [  0   2   1   4   0   0  29]]</span></span><br></pre></td></tr></table></figure><p><strong>Total running time of the script:</strong> ( 0 minutes 27.013 seconds)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://vis-www.cs.umass.edu/lfw/lfw-funneled.tgz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击下载数据集(233MB)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Expected results for the top 5 most represented people in the dataset:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ariel Sharon&lt;/td&gt;
&lt;td&gt;0.67&lt;/td&gt;
&lt;td&gt;0.92&lt;/td&gt;
&lt;td&gt;0.77&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Colin Powell&lt;/td&gt;
&lt;td&gt;0.75&lt;/td&gt;
&lt;td&gt;0.78&lt;/td&gt;
&lt;td&gt;0.76&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Donald Rumsfeld&lt;/td&gt;
&lt;td&gt;0.78&lt;/td&gt;
&lt;td&gt;0.67&lt;/td&gt;
&lt;td&gt;0.72&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;George W Bush&lt;/td&gt;
&lt;td&gt;0.86&lt;/td&gt;
&lt;td&gt;0.86&lt;/td&gt;
&lt;td&gt;0.86&lt;/td&gt;
&lt;td&gt;146&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gerhard Schroeder&lt;/td&gt;
&lt;td&gt;0.76&lt;/td&gt;
&lt;td&gt;0.76&lt;/td&gt;
&lt;td&gt;0.76&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hugo Chavez&lt;/td&gt;
&lt;td&gt;0.67&lt;/td&gt;
&lt;td&gt;0.67&lt;/td&gt;
&lt;td&gt;0.67&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tony Blair&lt;/td&gt;
&lt;td&gt;0.81&lt;/td&gt;
&lt;td&gt;0.69&lt;/td&gt;
&lt;td&gt;0.75&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;avg / total&lt;/td&gt;
&lt;td&gt;0.80&lt;/td&gt;
&lt;td&gt;0.80&lt;/td&gt;
&lt;td&gt;0.80&lt;/td&gt;
&lt;td&gt;322&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="Sklearn" scheme="http://puke3615.github.io/tags/Sklearn/"/>
    
      <category term="Python" scheme="http://puke3615.github.io/tags/Python/"/>
    
      <category term="Faces Recognition" scheme="http://puke3615.github.io/tags/Faces-Recognition/"/>
    
  </entry>
  
  <entry>
    <title>Sklearn之线性回归</title>
    <link href="http://puke3615.github.io/2017/09/01/Sklearn-Linear-Regression/"/>
    <id>http://puke3615.github.io/2017/09/01/Sklearn-Linear-Regression/</id>
    <published>2017-09-01T04:17:44.000Z</published>
    <updated>2018-07-27T06:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了展现线性回归技术在二维空间的几何表现，这个例子只使用了糖尿病数据集中的第一个特征。下图尝试找到一条使得数据集中各点到直线距离平方和最小的直线。</p><p><img src="/2017/09/01/Sklearn-Linear-Regression/image.png" alt=""></p><a id="more"></a><p>Source Code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># Code source: Jaques Grobler</span></span><br><span class="line"><span class="comment"># License: BSD 3 clause</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets, linear_model</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载糖尿病数据集</span></span><br><span class="line">diabetes = datasets.load_diabetes()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只选取一个特征</span></span><br><span class="line">diabetes_X = diabetes.data[:, np.newaxis, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据分割为训练集、测试集</span></span><br><span class="line">diabetes_X_train = diabetes_X[:<span class="number">-20</span>]</span><br><span class="line">diabetes_X_test = diabetes_X[<span class="number">-20</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将目标标量分割为训练集、测试集</span></span><br><span class="line">diabetes_y_train = diabetes.target[:<span class="number">-20</span>]</span><br><span class="line">diabetes_y_test = diabetes.target[<span class="number">-20</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线性回归对象</span></span><br><span class="line">regr = linear_model.LinearRegression()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用训练集训练模型</span></span><br><span class="line">regr.fit(diabetes_X_train, diabetes_y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用测试集数据进行预测</span></span><br><span class="line">diabetes_y_pred = regr.predict(diabetes_X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回归系数</span></span><br><span class="line">print(<span class="string">'Coefficients: \n'</span>, regr.coef_)</span><br><span class="line"><span class="comment"># 均方误差</span></span><br><span class="line">print(<span class="string">"Mean squared error: %.2f"</span></span><br><span class="line">      % mean_squared_error(diabetes_y_test, diabetes_y_pred))</span><br><span class="line"><span class="comment"># 方差分数: 1代表完美预测</span></span><br><span class="line">print(<span class="string">'Variance score: %.2f'</span> % r2_score(diabetes_y_test, diabetes_y_pred))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将测试集数据及预测结果进行绘图输出</span></span><br><span class="line">plt.scatter(diabetes_X_test, diabetes_y_test, color=<span class="string">'black'</span>)</span><br><span class="line">plt.plot(diabetes_X_test, diabetes_y_pred, color=<span class="string">'blue'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(())</span><br><span class="line">plt.yticks(())</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>输出结果:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Coefficients:</span><br><span class="line"> [ <span class="number">938.23786125</span>]</span><br><span class="line">Mean squared error: <span class="number">2548.07</span></span><br><span class="line">Variance score: <span class="number">0.47</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      线性回归模型，主要用作对于连续数值型数据进行预测。
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="Sklearn" scheme="http://puke3615.github.io/tags/Sklearn/"/>
    
      <category term="Python" scheme="http://puke3615.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Titanic缺失数据处理</title>
    <link href="http://puke3615.github.io/2017/08/03/Titanic-Fill-Data/"/>
    <id>http://puke3615.github.io/2017/08/03/Titanic-Fill-Data/</id>
    <published>2017-08-03T08:28:29.000Z</published>
    <updated>2017-08-04T01:04:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><p>加载csv文件数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> csv <span class="keyword">as</span> csv</span><br><span class="line">    reader = csv.reader(open(path, <span class="string">'rb'</span>))</span><br><span class="line">    header = reader.next()</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> reader:</span><br><span class="line">        data.append(line)</span><br><span class="line">    <span class="keyword">return</span> header, np.array(data)</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_header, train_data = load_data(TRAIN_PATH)</span><br><span class="line"><span class="keyword">print</span> train_header</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'PassengerId'</span>, <span class="string">'Survived'</span>, <span class="string">'Pclass'</span>, <span class="string">'Name'</span>, <span class="string">'Sex'</span>, <span class="string">'Age'</span>, <span class="string">'SibSp'</span>, <span class="string">'Parch'</span>, <span class="string">'Ticket'</span>, <span class="string">'Fare'</span>, <span class="string">'Cabin'</span>, <span class="string">'Embarked'</span>]</span><br></pre></td></tr></table></figure><h3 id="检查缺失数据"><a href="#检查缺失数据" class="headerlink" title="检查缺失数据"></a>检查缺失数据</h3><p>遍历每一行，记下空字符串元素所在的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_empty</span><span class="params">(header, data)</span>:</span></span><br><span class="line">    empty = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> row, line <span class="keyword">in</span> enumerate(data):</span><br><span class="line">        <span class="keyword">for</span> column, value <span class="keyword">in</span> enumerate(line):</span><br><span class="line">            <span class="keyword">if</span> value == <span class="string">''</span>:</span><br><span class="line">                feature = header[column]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> empty.__contains__(feature):</span><br><span class="line">                    empty[feature] = []</span><br><span class="line">                empty[feature].append(line[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> empty</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_header, train_data = load_data(TRAIN_PATH)</span><br><span class="line">empty = check_empty(train_header, train_data)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> empty.items():</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'%s: %d'</span> % (key, len(value))</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Age: <span class="number">177</span></span><br><span class="line">Cabin: <span class="number">687</span></span><br><span class="line">Embarked: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>可以看到训练数据中<code>Age</code>特征有177条缺失数据，另外两个以此类推。</p><p>上面是训练集中缺失数据的特征，而我们要得到还有测试集的缺失信息，所以写一个merge函数，将训练集和测试集合并起来（由于现在是缺失值分析阶段，所以不区分训练集和测试集，接下来会一直沿用合并后的数据），然后再检查缺失信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_data</span><span class="params">(train_data, test_data)</span>:</span></span><br><span class="line">    <span class="comment"># 删除训练集中第二列的幸存信息，以保持数据格式统一</span></span><br><span class="line">    train_without_survive = np.delete(train_data, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> np.vstack([train_without_survive, test_data])</span><br><span class="line"></span><br><span class="line">train_header, train_data = load_data(TRAIN_PATH)</span><br><span class="line">test_header, test_data = load_data(TEST_PATH)</span><br><span class="line">merged = merge_data(train_data, test_data)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> check_empty(test_header, merged).items():</span><br><span class="line"><span class="keyword">print</span> <span class="string">'%s: %d'</span> % (key, len(value))</span><br></pre></td></tr></table></figure><p>Output：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Fare: <span class="number">1</span></span><br><span class="line">Age: <span class="number">263</span></span><br><span class="line">Cabin: <span class="number">1014</span></span><br><span class="line">Embarked: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>于是能够得到所有缺失的特征，分别是<code>Fare</code>、<code>Age</code>、<code>Cabin</code>、<code>Embarked</code>，接下来开始对缺失项一一进行分析、补全。</p><h3 id="缺失数据分析"><a href="#缺失数据分析" class="headerlink" title="缺失数据分析"></a>缺失数据分析</h3><h4 id="Fare"><a href="#Fare" class="headerlink" title="Fare"></a>Fare</h4><p>表明乘客的票价，有1个缺失值，我们首先看一下该数据的范围，均值，均方差这些信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fare = merged[:, test_header.index(<span class="string">'Fare'</span>)]</span><br><span class="line">fare_with_data = [float(f) <span class="keyword">for</span> f <span class="keyword">in</span> fare <span class="keyword">if</span> f != <span class="string">''</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Range: %.2f - %.2f'</span> % (min(fare_with_data), max(fare_with_data))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Mean: %.2f'</span> % np.mean(fare_with_data)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Mean variance: %.2f'</span> % np.sqrt(np.var(fare_with_data))</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Range: <span class="number">0.00</span> - <span class="number">512.33</span></span><br><span class="line">Mean: <span class="number">33.30</span></span><br><span class="line">Mean variance: <span class="number">51.74</span></span><br></pre></td></tr></table></figure><p>通过这三项数据（以下简称<code>RMM</code>）我们能对票价信息有个大致的了解，范围在0 - 512.33波动，均值是33.3而均方差只有51.74，这表明大多数票价都是偏低的（也能从一定程度上分析出乘客的经济状况，这里就不继续延伸了）。</p><p><code>RMM</code>信息获取很方便，但是不便于直观、确切的观察数据的分布情况，这时考虑通过<code>matplot</code>画出票价的密度分布图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.hist(fare_with_data, alpha=<span class="number">.7</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>分布图如下</p><p><img src="/2017/08/03/Titanic-Fill-Data/data_fix_fare1.png" alt="data_fix_fare"></p><p>从图中可以很直观的看出绝大部分数据都是部分在50以下的，鉴于这种情况，我们很直观的选择是把均值作为补全值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> np.mean(fare_with_data)</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">33.2954792813</span></span><br></pre></td></tr></table></figure><p>这时33.2954792813便做为<code>Fare</code>补全值了。</p><p>为了确保万一，我们要查出该条数据索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty = check_empty(test_header, merged)</span><br><span class="line"><span class="keyword">print</span> empty[<span class="string">'Fare'</span>]</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'1044'</span>]</span><br></pre></td></tr></table></figure><p>接下来我们根据<code>PassengerId</code>找到该条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1044</span>,<span class="number">3</span>,<span class="string">"Storey, Mr. Thomas"</span>,male,<span class="number">60.5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3701</span>,,,S</span><br></pre></td></tr></table></figure><p>对比着特征名来分析数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PassengerId,Pclass,Name,Sex,Age,SibSp,Parch,Ticket,Fare,Cabin,Embarked</span><br></pre></td></tr></table></figure><p>可以逐一分析，我们发现<code>Pclass</code>对应N等票，可能会影响到票价<code>Fare</code>特征，因此我们要取出所有跟该名乘客相同<code>Pclass</code>（从数据可以看出是3）的票价分布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fare = merged[:, [test_header.index(<span class="string">'Fare'</span>), test_header.index(<span class="string">'Pclass'</span>)]]</span><br><span class="line">fare_with_pclass_3 = [float(f) <span class="keyword">for</span> f, pclass <span class="keyword">in</span> fare <span class="keyword">if</span> f != <span class="string">''</span> <span class="keyword">and</span> pclass == <span class="string">'3'</span>]</span><br><span class="line">plt.hist(fare_with_pclass_3, alpha=<span class="number">.7</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>分布图如下</p><p><img src="/2017/08/03/Titanic-Fill-Data/data_fix_fare2.png" alt="data_fix_fare2"></p><p>对比和上一张图的区别，我们能更加确切的了解到，三等票的票价没有高于70的，因此如果按照上面的结论直接把所有数据的票价均值作为补全值，在一定程度上会使得补全值的误差变大，取而代之的是用<code>Pclass</code>为3的乘客的票价均值作为补全值（这里还是有一定的优化空间，我们可以分析<code>Pclass</code>为3的乘客中的年龄、家属情况、船舱等对票价的影响，这里就不继续展开了）。</p><p>有了上面的分析，我们就可以重新计算补全值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> np.mean(fare_with_pclass_3)</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13.3028887006</span></span><br></pre></td></tr></table></figure><p>和上面输出的33.3还是有一定差距的</p><p>经过上面的一系列的分析，可以写出<code>Fare</code>特征的补全逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_fare_data</span><span class="params">(all_data, pclass, fare_index, pclass_index)</span>:</span></span><br><span class="line">    fare_pclass = all_data[:, [fare_index, pclass_index]]</span><br><span class="line">    fare_with_pclass = [float(f) <span class="keyword">for</span> f, c <span class="keyword">in</span> fare_pclass <span class="keyword">if</span> f != <span class="string">''</span> <span class="keyword">and</span> c == pclass]</span><br><span class="line">    <span class="keyword">return</span> np.mean(fare_with_pclass)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill_data_fare</span><span class="params">(all_data, need_fill_data, header)</span>:</span></span><br><span class="line">    fare_index = header.index(<span class="string">'Fare'</span>)</span><br><span class="line">    pclass_index = header.index(<span class="string">'Pclass'</span>)</span><br><span class="line">    fill_cache = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> need_fill_data:</span><br><span class="line">        <span class="keyword">if</span> f[fare_index] == <span class="string">''</span>:</span><br><span class="line">            pclass = f[pclass_index]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> fill_cache.__contains__(pclass):</span><br><span class="line">                fill_cache[pclass] = compute_fare_data(all_data, pclass, fare_index, pclass_index)</span><br><span class="line">            f[fare_index] = fill_cache[pclass]</span><br></pre></td></tr></table></figure><p>此时我们的主函数应该是这样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train_header, train_data = load_data(TRAIN_PATH)</span><br><span class="line">test_header, test_data = load_data(TEST_PATH)</span><br><span class="line">merged = merge_data(train_data, test_data)</span><br><span class="line">fill_data_fare(merged, train_data, train_header)</span><br><span class="line">fill_data_fare(merged, test_data, test_header)</span><br></pre></td></tr></table></figure><h4 id="Age"><a href="#Age" class="headerlink" title="Age"></a>Age</h4><p>表明乘客年龄，有263个缺失值，同上，我们先看一下该特征的<code>RMM</code>信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = merged[:, test_header.index(<span class="string">'Age'</span>)]</span><br><span class="line">age_with_data = [float(f) <span class="keyword">for</span> f <span class="keyword">in</span> age <span class="keyword">if</span> f != <span class="string">''</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Range: %.2f - %.2f'</span> % (min(age_with_data), max(age_with_data))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Mean: %.2f'</span> % np.mean(age_with_data)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Mean variance: %.2f'</span> % np.sqrt(np.var(age_with_data))</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Range: <span class="number">0.17</span> - <span class="number">80.00</span></span><br><span class="line">Mean: <span class="number">29.88</span></span><br><span class="line">Mean variance: <span class="number">14.41</span></span><br></pre></td></tr></table></figure><p>均值29.9，均方差14.4，可见整体年龄层都分布在青壮年阶段，接下来直接看看密度分布图</p><p><img src="/2017/08/03/Titanic-Fill-Data/data_fix_age1.png" alt=""></p><p>从该图中我们只能观察到老人（50岁以上）和小孩（16岁以下）占比较小，年龄大多集中在17-40左右，我们必须试图在数据中寻找更好的估值标准。</p><p>我们尝试寻找<code>Age</code>与<code>Pclass</code>的关系，先来画出分布图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">age_pclass = merged[:, [test_header.index(<span class="string">'Age'</span>), test_header.index(<span class="string">'Pclass'</span>)]]</span><br><span class="line"><span class="comment"># 过滤掉Age为空的数据</span></span><br><span class="line">age_pclass_with_data = [[int(float(a)), int(p)] <span class="keyword">for</span> a, p <span class="keyword">in</span> age_pclass <span class="keyword">if</span> a != <span class="string">''</span>]</span><br><span class="line">age_pclass_with_data = np.array(age_pclass_with_data)</span><br><span class="line">x = age_pclass_with_data[:, <span class="number">0</span>]</span><br><span class="line">y = age_pclass_with_data[:, <span class="number">1</span>]</span><br><span class="line">plt.scatter(x, y, alpha=<span class="number">.7</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Age'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Pclass'</span>)</span><br><span class="line">plt.title(<span class="string">'Pclass &amp; Age'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>分布图如下</p><p><img src="/2017/08/03/Titanic-Fill-Data/data_fix_age2.png" alt=""></p><p>从上图上中可以知道很难直接根据<code>Pclass</code>估值出<code>Age</code>的值。</p>]]></content>
    
    <summary type="html">
    
      对Titanic中缺失数据进行分析、补全。
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="特征工程" scheme="http://puke3615.github.io/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="Titanic" scheme="http://puke3615.github.io/tags/Titanic/"/>
    
      <category term="Kaggle" scheme="http://puke3615.github.io/tags/Kaggle/"/>
    
  </entry>
  
  <entry>
    <title>Android上运行手写数字识别模型</title>
    <link href="http://puke3615.github.io/2017/08/02/Run-Mnist-On-Android/"/>
    <id>http://puke3615.github.io/2017/08/02/Run-Mnist-On-Android/</id>
    <published>2017-08-02T11:42:25.000Z</published>
    <updated>2017-08-04T05:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Github源码请移步本文底部。</em></p><h3 id="模型导出pb文件"><a href="#模型导出pb文件" class="headerlink" title="模型导出pb文件"></a>模型导出pb文件</h3><p>首先我们需要在我们的<code>python</code>代码中保存训练好的模型，<code>save_path</code>参数就传递<code>**.pb</code>，这里导出文件留给接下来使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_model_and_params</span><span class="params">(session, save_path)</span>:</span></span><br><span class="line">    out_graph_def = tf.graph_util.convert_variables_to_constants(session, session.graph_def, [<span class="string">"output"</span>])</span><br><span class="line">    <span class="keyword">with</span> tf.gfile.FastGFile(save_path, <span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(out_graph_def.SerializeToString())</span><br></pre></td></tr></table></figure><h3 id="Android中通过JNI调用"><a href="#Android中通过JNI调用" class="headerlink" title="Android中通过JNI调用"></a>Android中通过JNI调用</h3><h4 id="Tensorflow与Android整合"><a href="#Tensorflow与Android整合" class="headerlink" title="Tensorflow与Android整合"></a>Tensorflow与Android整合</h4><p>整合部分就直接按照<a href="../../../../2017/08/02/Tensorflow-On-Android/">Android端运行Tensorflow</a>中的步骤来就行了。</p><h4 id="封装输出数据解析逻辑"><a href="#封装输出数据解析逻辑" class="headerlink" title="封装输出数据解析逻辑"></a>封装输出数据解析逻辑</h4><p>在手写数字识别模型中的输出是一个size为10的列表，列表元素的索引值对应输出的结果，列表元素对应输出的概率，例如输出是[0.2, 0.7, 0.01……]，即表示有0.2的概率是0，0.7的概率是1，0.01的概率是2……</p><p>因此我们需要在输出中对数据按照概率进行降序排列，以便让结果一目了然。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zijiao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 17/8/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MnistData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MnistData</span><span class="params">(<span class="keyword">float</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            items.add(<span class="keyword">new</span> Item(data[i], i));</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">top</span><span class="params">(<span class="keyword">int</span> topSize)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; topSize; i++) &#123;</span><br><span class="line">            Item item = items.get(i);</span><br><span class="line">            builder.append(item.index)</span><br><span class="line">                    .append(<span class="string">": "</span>)</span><br><span class="line">                    .append(String.format(<span class="string">"%.1f%%"</span>, item.value * <span class="number">100</span>))</span><br><span class="line">                    .append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(items.get(<span class="number">0</span>).index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> output();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"NullableProblems"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> value;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Item</span><span class="params">(<span class="keyword">float</span> value, <span class="keyword">float</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Item o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value &lt; o.value ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时我们就能通过<code>MnistData</code>类的<code>top</code>方法得到概率最大的几个结果分别是什么。</p><h4 id="构建数字分类器"><a href="#构建数字分类器" class="headerlink" title="构建数字分类器"></a>构建数字分类器</h4><p>这里通过<code>TensorFlowInferenceInterface</code>来调用模型，注释写得很清楚，值得注意的一点是，<code>input</code>和<code>output</code>的名称要和模型中的变量名称保持一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zijiao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 17/8/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MnistClassifier</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TensorFlowInferenceInterface inference;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MnistClassifier</span><span class="params">(AssetManager assetManager)</span> </span>&#123;</span><br><span class="line">        inference = <span class="keyword">new</span> TensorFlowInferenceInterface();</span><br><span class="line">      <span class="comment">// 加载模型图</span></span><br><span class="line">        inference.initializeTensorFlow(assetManager, TF.MODEL);</span><br><span class="line">      <span class="comment">// 模型使用阶段, 不需要进行dropout处理, 所以keep_prob直接为1.0</span></span><br><span class="line">        inference.fillNodeFloat(TF.KEEP_PROB_NAME, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;, <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;<span class="number">1.0f</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MnistData <span class="title">inference</span><span class="params">(<span class="keyword">float</span>[] input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span> || input.length != <span class="number">28</span> * <span class="number">28</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Input data is error."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 填入Input数据</span></span><br><span class="line">        inference.fillNodeFloat(TF.INPUT_NAME, TF.INPUT_TYPE, input);</span><br><span class="line">      <span class="comment">// 运行结果, 类似Python中的sess.run([outputs])</span></span><br><span class="line">        inference.runInference(<span class="keyword">new</span> String[]&#123;TF.OUTPUT_NAME&#125;);</span><br><span class="line">        <span class="keyword">float</span>[] output = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">10</span>];</span><br><span class="line">      <span class="comment">// 取出结果集中我们需要的</span></span><br><span class="line">        inference.readNodeFloat(TF.OUTPUT_NAME, output);</span><br><span class="line">      <span class="comment">// 将输出结果交给MnistData处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MnistData(output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加画板"><a href="#添加画板" class="headerlink" title="添加画板"></a>添加画板</h3><p>模型处理的逻辑已经写完了，接下来就是如何得到输入源了。由于是手写数字识别，所以接下来就要写画板类。这里只贴出关键代码部分（完整代码可以看本文底部的Github地址）。</p><p>手指滑动屏幕时画出手指滑动的轨迹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">    canvas.drawPath(path, paint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> x = event.getX();</span><br><span class="line">    <span class="keyword">float</span> y = event.getY();</span><br><span class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            path.moveTo(x, y);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            path.lineTo(x, y);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    invalidate();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向外部提供读取画布数据的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">float</span>[] fetchData(<span class="keyword">int</span> width, <span class="keyword">int</span> height) &#123;</span><br><span class="line">    <span class="keyword">float</span>[] data = <span class="keyword">new</span> <span class="keyword">float</span>[height * width];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        setDrawingCacheEnabled(<span class="keyword">true</span>);</span><br><span class="line">        setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_LOW);</span><br><span class="line">        Bitmap cache = getDrawingCache();</span><br><span class="line">        fillInputData(cache, data, width, height);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        setDrawingCacheEnabled(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fillInputData</span><span class="params">(Bitmap bm, <span class="keyword">float</span>[] data, <span class="keyword">int</span> newWidth, <span class="keyword">int</span> newHeight)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获得图片的宽高</span></span><br><span class="line">    <span class="keyword">int</span> width = bm.getWidth();</span><br><span class="line">    <span class="keyword">int</span> height = bm.getHeight();</span><br><span class="line">    <span class="comment">// 计算缩放比例</span></span><br><span class="line">    <span class="keyword">float</span> scaleWidth = ((<span class="keyword">float</span>) newWidth) / width;</span><br><span class="line">    <span class="keyword">float</span> scaleHeight = ((<span class="keyword">float</span>) newHeight) / height;</span><br><span class="line">    <span class="comment">// 取得想要缩放的matrix参数</span></span><br><span class="line">    Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">    matrix.postScale(scaleWidth, scaleHeight);</span><br><span class="line">    <span class="comment">// 得到新的图片</span></span><br><span class="line">    Bitmap newbm = Bitmap.createBitmap(bm, <span class="number">0</span>, <span class="number">0</span>, width, height, matrix, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; newHeight; y++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; newWidth; x++) &#123;</span><br><span class="line">            <span class="keyword">int</span> pixel = newbm.getPixel(x, y);</span><br><span class="line">            data[newWidth * y + x] = pixel == <span class="number">0xffffffff</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>布局代码就直接省略了，我们只需要在点击<code>识别</code>的时候，调用下面这段的识别逻辑即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 识别</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInference</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (canvasView.isEmpty()) &#123;</span><br><span class="line">        resultPanel.setText(<span class="string">"画板为空"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    MnistData result = classifier.inference(canvasView.fetchData(<span class="number">28</span>, <span class="number">28</span>));</span><br><span class="line">    resultPanel.setText(result.top(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后附上运行效果图</p><p><img src="/2017/08/02/Run-Mnist-On-Android/8.png" alt=""></p><p>这里是该项目的<a href="https://github.com/puke3615/Mnist" target="_blank" rel="noopener">Github源码</a></p>]]></content>
    
    <summary type="html">
    
      通过手写数字识别的具体案例来展示Tensorflow中运行的模型是如何移植到Android中。
    
    </summary>
    
    
      <category term="Android" scheme="http://puke3615.github.io/tags/Android/"/>
    
      <category term="Tensorflow" scheme="http://puke3615.github.io/tags/Tensorflow/"/>
    
      <category term="Mnist" scheme="http://puke3615.github.io/tags/Mnist/"/>
    
  </entry>
  
  <entry>
    <title>Android端运行Tensorflow</title>
    <link href="http://puke3615.github.io/2017/08/02/Tensorflow-On-Android/"/>
    <id>http://puke3615.github.io/2017/08/02/Tensorflow-On-Android/</id>
    <published>2017-08-02T06:26:34.000Z</published>
    <updated>2017-08-02T06:43:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>在Android运行Tensorflow模型，网上找到的很多资料要么过于复杂，要么就根本不能运行，于是记录下具体的整合步骤。</em></p><ul><li><p><code>New Project</code></p></li><li><p><code>local.propertities</code>文件中指定ndk目录</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndk.dir=<span class="regexp">/Users/</span>zijiao<span class="regexp">/Library/</span>Android<span class="regexp">/sdk/</span>ndk-bundle</span><br></pre></td></tr></table></figure></li><li><p>向<code>src/main/jniLibs/[cpu]</code>目录添加对应的<code>libtensorflow_demo.so</code>文件</p><p>其中<code>[cpu]</code>包含<code>arm64-v8a</code>、<code>armeabi-v7a</code>、<code>x86</code>、<code>x86_64</code></p></li><li><p>修改<code>build.gradle</code>文件</p><ul><li><p><code>android</code>闭包中添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaptOptions &#123; noCompress <span class="string">'pb'</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>android-defaultConfig</code>闭包下添加（可选）</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ndk&#123;</span><br><span class="line"><span class="comment">//生成的so名字</span></span><br><span class="line">moduleName <span class="string">"tensorflow_demo"</span>         </span><br><span class="line"><span class="comment">//输出指定三种abi体系结构下的so库。目前可有可无。</span></span><br><span class="line">abiFilters <span class="string">"arm64-v8a"</span>, <span class="string">"armeabi-v7a"</span>, <span class="string">"x86_64"</span>, <span class="string">"x86"</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>将<code>TensorFlowInferenceInterface.java</code> 拷到<code>src/main/java/org.tensorflow.contrib.android</code>目录下</p><p>注意加载so文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.loadLibrary(<span class="string">"tensorflow_demo"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将<code>Model文件</code>和<code>Label文件</code>拷到<code>src/main/assets</code>目录下</p></li><li><p>测试是否成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TensorFlowInferenceInterface inference = <span class="keyword">new</span> TensorFlowInferenceInterface();</span><br><span class="line">String modelPath = <span class="string">"file:///android_asset/[.pb文件名]"</span>;</span><br><span class="line"><span class="keyword">int</span> code = inference.initializeTensorFlow(getAssets(), modelPath);</span><br><span class="line"><span class="keyword">if</span> (code == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 初始化成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      将Tensorflow训练好的模型部署在Android端。
    
    </summary>
    
    
      <category term="Android" scheme="http://puke3615.github.io/tags/Android/"/>
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="Tensorflow" scheme="http://puke3615.github.io/tags/Tensorflow/"/>
    
      <category term="移动AI" scheme="http://puke3615.github.io/tags/%E7%A7%BB%E5%8A%A8AI/"/>
    
      <category term="NDK" scheme="http://puke3615.github.io/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>读《机器学习实战》</title>
    <link href="http://puke3615.github.io/2017/08/01/Machine-Learning-Inaction/"/>
    <id>http://puke3615.github.io/2017/08/01/Machine-Learning-Inaction/</id>
    <published>2017-08-01T10:36:01.000Z</published>
    <updated>2017-08-03T02:43:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>用了一个多月的时间看完了这本书，在这段时间里穿插了不少事情，公司的业务开发经历了两次班车迭代，还有一周多的时间用来研究图像语义分割。由于本职的Android开发还是占用很大一部分精力和时间，所以看书只能抽一些时间碎片进行。</p><p>谈谈自己对该书的整体感觉，这本书作为ML的入门、科普书籍当然是不错的，整体的章节设定看上去一目了然。书中列出了很多ML的经典算法，同时也有对应的代码实现，这里要点赞的一点是对于算法的封装性和拓展性而言，该书做的还是蛮不错的，很多实现代码基本上是可以拿过来直接使用的。还有就是书中整体的连贯性写的很到位，A算法已经很实用了，但在某某方面还存在缺陷，而B算法会在兼容A算法精华部分的基础上还解决了对应的缺陷，于是很平滑的过渡到B算法的讲解部分，这样给读者一种前因后果的感觉，而非凭空冒出个B算法。</p><p>同时也有些我认为美中不足的地方，关于一些算法公式方面，讲着讲着就突然莫名来了一个公式，有的公式甚至没什么说明，直接就用上了。其实能够理解作为一本ML的书籍不适合在算法公式的推导上花费太多的篇幅，但也不至于简短的描述都没有，一下子看到一坨公式的时候真是一脸茫然。还有一点是，看该书还是需要一定的线代基础的，在回归的讲解部分如果没有线代基础基本上就是走马观花了。</p><p>之前也看过不少技术书籍，时间越久淡忘的就越多，所以这次打算把看过的部分都记下来，一方面加深自己的印象，另一方面也为了提高日后复习的效率。</p><p><img src="/2017/08/01/Machine-Learning-Inaction/ML.png" alt="ML"></p>]]></content>
    
    <summary type="html">
    
      将该书中的核心部分以思维导图形式整理出来，更宏观的了解该书结构以及精华部分。
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://puke3615.github.io/tags/Machine-Learning/"/>
    
      <category term="思维导图" scheme="http://puke3615.github.io/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio代码块打标</title>
    <link href="http://puke3615.github.io/2017/03/21/Android-Studio-Code-Block-Mark/"/>
    <id>http://puke3615.github.io/2017/03/21/Android-Studio-Code-Block-Mark/</id>
    <published>2017-03-21T09:32:14.000Z</published>
    <updated>2017-03-21T10:43:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>当我们开发中写的某些类的代码量相对比较庞大时，就会遇到维护这个类变得困难的问题，抛开对于该类的设计层面的因素，只从代码量的角度来看这个问题。基于IntelliJ的IDE给我们提供了一种能够给我们的代码块进行归纳的标签（以下称为<code>代码块打标</code>），如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="[A]"&gt;</span></span><br><span class="line">[B]</span><br><span class="line"><span class="comment">// &lt;/editor-fold&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>[A]</code> 对应打标的描述语言</li><li><code>[B]</code> 对应待打标代码块</li></ul><p>根据上述规则我们来对<code>MainActivity</code>进行打标操作，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zijiao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 17/3/21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="成员变量"&gt;</span></span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="comment">// &lt;/editor-fold&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="onCreate逻辑"&gt;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initView();</span><br><span class="line">        initListener();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &lt;/editor-fold&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="findView逻辑"&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        button = (Button) findViewById(R.id.button);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &lt;/editor-fold&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="点击事件处理逻辑"&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Click button"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &lt;/editor-fold&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们将各个代码块按照逻辑进行分类并添加对应的描述标签，当我们下次再打开该类时，查看或修改某部分代码就会一目了然（当代码庞大时，其优点将会尤为明显），参见下图</p><p><img src="/2017/03/21/Android-Studio-Code-Block-Mark/img1.gif" alt=""></p><h3 id="整合LiveTemplate"><a href="#整合LiveTemplate" class="headerlink" title="整合LiveTemplate"></a>整合LiveTemplate</h3><p>可以看到代码块打标是很方便，但是有一点不好，就是当我们需要给某一个代码块打标时我们总是要在代码块之前添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="[A]"&gt;</span></span><br></pre></td></tr></table></figure><p>然后在代码块之后添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;/editor-fold&gt;</span></span><br></pre></td></tr></table></figure><p>这个步骤很繁琐，但好消息是我们可以结合AS提供给我们的<code>LiveTempalte</code>，将这个过程封装成一个打标模板，来看看具体操作</p><ol><li><p>打开Android Studio，进入<code>Preferences</code> — <code>Editor</code> — <code>Live Templates</code> ，新建一个<code>Live Template</code></p></li><li><p><code>Abbreviation</code>处填写<code>Mark Code Block</code>，<code>Template text</code>处填写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="$description$"&gt;</span></span><br><span class="line">$SELECTION$</span><br><span class="line"><span class="comment">// &lt;/editor-fold&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>点击<code>Define</code>，勾选<code>Java</code>复选框</p></li><li><p>点击<code>Apply</code></p></li></ol><p>这个时候你的界面应该是这样，可以核对下</p><p><img src="/2017/03/21/Android-Studio-Code-Block-Mark/img2.png" alt=""></p><p>到这里，打标模板已经完成了，你可以随便找一个类进行测试，选中一个代码块，按下快捷键<code>Command + Option + J</code>（Windows系统可以在<code>Preferences</code> — <code>Keymap</code> 中搜索<code>Surround with Live Template...</code>对应的快捷键）来选择<code>Mark Code Block</code>模板，此时我们就可以快速进行代码块打标操作了，如下图</p><p><img src="/2017/03/21/Android-Studio-Code-Block-Mark/img3.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      Android Studio代码块打标，让我们迅速定位到代码逻辑块。
    
    </summary>
    
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android Studio" scheme="http://puke3615.github.io/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Template</title>
    <link href="http://puke3615.github.io/2017/03/10/Android-Studio-Template/"/>
    <id>http://puke3615.github.io/2017/03/10/Android-Studio-Template/</id>
    <published>2017-03-10T05:31:38.000Z</published>
    <updated>2017-03-10T05:48:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/03/10/Android-Studio-Template/img8.jpg" alt=""></p><p><img src="/2017/03/10/Android-Studio-Template/img6.png" alt=""></p><p><img src="/2017/03/10/Android-Studio-Template/img9.png" alt=""></p><p><img src="/2017/03/10/Android-Studio-Template/img1.png" alt=""></p><p><img src="/2017/03/10/Android-Studio-Template/img2.png" alt=""></p><p><img src="/2017/03/10/Android-Studio-Template/img3.png" alt=""></p><p><img src="/2017/03/10/Android-Studio-Template/img4.png" alt=""></p><p><img src="/2017/03/10/Android-Studio-Template/img5.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      本文为图片展示篇，展示业界对Android Studio Template的评价。
    
    </summary>
    
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android Studio" scheme="http://puke3615.github.io/tags/Android-Studio/"/>
    
      <category term="Template" scheme="http://puke3615.github.io/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>TemplateBuilder(中文版)</title>
    <link href="http://puke3615.github.io/2017/03/06/TemplateBuilder%5BChinese%5D/"/>
    <id>http://puke3615.github.io/2017/03/06/TemplateBuilder[Chinese]/</id>
    <published>2017-03-06T08:41:57.000Z</published>
    <updated>2017-03-19T03:10:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../../../../2017/03/06/TemplateBuilder/">English Version</a></p><blockquote><p><code>声明</code></p><p>Android Studio的模板包括以下三种，这里讲的是第三种Multi Template。在阅读本文之前，默认你是了解该模板的，知道为什么要使用它，如果不清楚它是什么，可以在网上自行查阅相关资料，当然也可以直接<a href="../../../../2017/03/10/Android%20Studio%20Template/">点击这里</a>查看一下同行们对它的评价</p><ul><li>Live Template：代码片段级别</li><li>File Template：单文件级别</li><li>Multi Template：多个文件级别（以下称 <code>Android Studio Template</code>）</li></ul></blockquote><h3 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h3><p><code>TemplateBuilder</code>是一款能够帮助我们快速生成<code>Android Studio Template</code>的AS插件，将通过逐个文件去配置模板的方式改进为通过插件来实现，对于简单的模板制作，只需要一键即可生成。</p><h3 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>打开Android Studio，<code>Preferences</code> – <code>Plugins</code> – <code>Brown Repositories</code>,  搜索<code>TemplateBuilder</code> 并下载，下载之后重启IDE即可使用。</p><p><img src="/2017/03/06/TemplateBuilder[Chinese]/img1.png" alt=""></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="动态图展示"><a href="#动态图展示" class="headerlink" title="动态图展示"></a>动态图展示</h5><p>先直接贴上Gif的演示效果，分别对应模板的导出与导入</p><p><img src="/2017/03/06/TemplateBuilder[Chinese]/img2.gif" alt=""></p><p><code>导出：</code> 选择待导出的文件或文件夹，按下<code>ALT + T</code>，在弹出界面中更改模板名称（<code>MVP Test</code>）和描述后直接<code>Finish</code>，然后重启IDE；</p><p><img src="/2017/03/06/TemplateBuilder[Chinese]/img7.gif" alt=""></p><p><code>导入：</code> 选择一个包，按下<code>Command + N</code>键，输入模板分类名（默认为电脑用户名），选择<code>MVP Test</code>模板进行导入。</p><h5 id="快速制作"><a href="#快速制作" class="headerlink" title="快速制作"></a>快速制作</h5><p>这里我们拿对一个MVP模板的抽取来举例，首先选中需要制作为模板的类文件（如果需要选中某个文件夹里的全部文件，可以直接选中该文件夹），然后按下启动改插件的快捷键<code>ALT + T</code>，便能看到如下界面</p><p><img src="/2017/03/06/TemplateBuilder[Chinese]/img3.png" alt=""></p><p>下面来说明一下该界面对应的内容</p><ul><li><code>Template Category</code>  对应模板的分类，对应选择导入模板时的模板分类，这里默认值是电脑的用户名。</li><li><code>Template Name</code>  对应模板名称，对应选择导入模板时的模板名称，默认值是当前的Project名称。</li><li><code>Template Description</code>  对应模板描述信息，对应导入模板时弹出的导入界面的文字描述，默认为空。</li><li><code>Template Folder</code>  对应生成模板所存放的位置，如果是Mac操作系统则默认为<code>/Applications/Android Studio.app/Contents/plugins/android/lib/templates</code>， Windows系统的话由于差异比较大，就默认为空了，可以自行配置<code>[Android Studio安装目录]/plugins/android/lib/templates</code>（这里只需要配置一次即可，插件将自动保存该位置）。</li><li><code>Input data区域</code>  （见下：<a href="#configure">配置模板变量</a>）</li></ul><p>如果你只是想简单抽取你写的这个模板，你只需要输入下<code>Template Name</code>和<code>Template Description</code>即可，当然如果你不想输入的话这也可以省略掉。接下来直接点击<code>Finish</code>，就能在IDE底部看到弹出如下图所示的提示，此时你已经制作成功，重启IDE即可使用该模板。</p><p><img src="/2017/03/06/TemplateBuilder[Chinese]/img4.png" alt=""></p><p>到这里，如果你了解<code>Android Studio Template</code>制作流程的话，你可能觉得相对于完全自己手动去做这样固然简单，但是灵活性上降低了不少。例如模板中有组价依赖关系的时候，你需要在<code>build.gradle.ftl</code>中去添加对应的依赖；导入模板之后你想自动打开某个文件时，你需要编辑<code>recipe.xml.ftl</code>；选择模板适用于哪个版本时，你需要编辑<code>template.xml</code>等等。如果你有这方面的需求，可以点击<code>Next</code>来代替<code>Finish</code>，点击之后你就能看到如下界面，在这里提供了所有你需要关注的配置文件的编辑，编辑完成直接点击<code>OK</code>开始自动生成。</p><p><img src="/2017/03/06/TemplateBuilder[Chinese]/img6.png" alt=""></p><h5 id="配置模板变量"><a href="#配置模板变量" class="headerlink" title="配置模板变量"></a><span id="configure">配置模板变量</span></h5><p>在上面的界面中可以看到<code>Input data</code>区域，它对应着导入模板时的变量输入，如果你想增强模板的可配性将会用到它，它就对应着AS模板中<code>template.xml</code>的<code>&lt;parameter /&gt;</code>标签，也就是下面的每一个配置项。</p><p><img src="/2017/03/06/TemplateBuilder[Chinese]/img5.png" alt=""></p><p>关于<code>Input data</code>的使用，先解释下每个属性对应的含义</p><ul><li><code>id</code>  变量名，必须和模板中使用的变量名对应，必填</li><li><code>name</code> 变量简介，必填</li><li><code>type</code> 变量类型，string和boolean两种，通过下拉框选择，必填</li><li><code>default</code>  变量对应的默认值，选填</li><li><code>help</code>  添加该变量时的提示信息，选填</li></ul><p>下面我举个例子，假设待导出的模板文件是<code>UserActivity</code>类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TextView mUserName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  setContentView(R.layout.activity_user);</span><br><span class="line">  mUserName = (TextView) findViewById(R.id.user_name);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，假设我们想让引入模板时<code>mUserName</code>属性名是可配的，并且在Activity中是否调用setContentView方法也是可配的，那我们就需要这样改写该类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView $&#123;textViewName&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        &lt;#if setContentView&gt;</span><br><span class="line">        setContentView(R.layout.activity_user);</span><br><span class="line">        $&#123;textViewName&#125; = (TextView) findViewById(R.id.user_name);</span><br><span class="line">        &lt;/#if&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们用到了<code>textViewName</code>和<code>setContentView</code>两个变量，所以当我们按下<code>ALT + T</code>时就要在对应的Input data区域点击<code>Add</code>来添加两个对应的变量。</p><table><thead><tr><th style="text-align:center"><code>Input data</code></th><th style="text-align:center"><code>textViewName</code></th><th style="text-align:center"><code>setContentView</code></th></tr></thead><tbody><tr><td style="text-align:center"><code>id</code></td><td style="text-align:center">textViewName</td><td style="text-align:center">setContentView</td></tr><tr><td style="text-align:center"><code>type</code></td><td style="text-align:center">string</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center"><code>name</code></td><td style="text-align:center">TextView属性名</td><td style="text-align:center">是否设置布局</td></tr><tr><td style="text-align:center"><code>default</code></td><td style="text-align:center">mUserName</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center"><code>help</code></td><td style="text-align:center">输入TextView对应的属性名</td><td style="text-align:center">勾选则设置布局文件，反之不设置</td></tr></tbody></table><p>添加完模板变量后导出，重启IDE选择导入该模板，此时便能看到刚才配置的两个变量，你可以输入不同的值来验证模板的正确性。</p><p><img src="/2017/03/06/TemplateBuilder[Chinese]/img8.png" alt=""></p><h5 id="添加模板依赖"><a href="#添加模板依赖" class="headerlink" title="添加模板依赖"></a>添加模板依赖</h5><p>模板中需要添加gradle依赖时，点击<code>Next</code>在第二个页面中<code>build.gradle.ftl</code>添加如下所示对应的仓库和依赖即可。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    <span class="comment">// 如果仓库是jcenter()，则可省略</span></span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'io.reactivex.rxjava2:rxjava:2.0.6'</span></span><br><span class="line">    compile <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h3><p>如果你尝试过自己去制作一个<code>Android Studio Template</code>的话，相信你一定会为模板配置、更改文件名、添加可配参数等等繁琐的操作而烦恼，因为哪怕一个很简单的模板抽取都需要把这一系列流程全都走一遍，更改好几个配置文件。</p><p>说下我的个人感受，当我发现<code>Android Studio Template</code>时我顿时感觉有太多太多可以抽取出来的模板以供日后快速使用，但当我刚开始抽取几个模板的时候就已经被深深的恶心到了，因为这个过程真心很繁琐。记得当时还专门写groovy脚本来辅助进行这些模板的配置，但也还是需要向脚本里添加一些模板文件的入参信息，依然很麻烦。后来我决定将这个制作过程尽可能通过自动化来完成，当时考虑<code>Gradle插件</code>、<code>Java GUI</code>、<code>AS Plugin</code>等多种方式来完成模板制作，最终选择了快而方便的<code>AS Plugin</code>，插件的名称就是上面所提到的<code>TemplateBuilder</code>。</p>]]></content>
    
    <summary type="html">
    
      将Android Studio Template的开发过程集成于Android Studio Plugin中，只需要&lt;b&gt;一键&lt;/b&gt;就能将当前文件制作为Template。
    
    </summary>
    
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android Studio" scheme="http://puke3615.github.io/tags/Android-Studio/"/>
    
      <category term="Template" scheme="http://puke3615.github.io/tags/Template/"/>
    
      <category term="Android Studio Plugin" scheme="http://puke3615.github.io/tags/Android-Studio-Plugin/"/>
    
  </entry>
  
  <entry>
    <title>TemplateBuilder</title>
    <link href="http://puke3615.github.io/2017/03/06/TemplateBuilder/"/>
    <id>http://puke3615.github.io/2017/03/06/TemplateBuilder/</id>
    <published>2017-03-06T08:41:57.000Z</published>
    <updated>2017-03-19T03:08:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../../../../2017/03/06/TemplateBuilder[Chinese]/">中文版</a></p><blockquote><p><code>Statement</code></p><p>Android Studio templates include the following three, here is the third Multi Template. Before reading this article, Acquiescence you know the template, know why to use it, if it is not clear what it is, you can check the relevant information online, of course, you can also <a href="../../../../2017/03/10/Android%20Studio%20Template/">click here</a> to see the peer to its evaluation</p><ul><li>Live Template：Code snippet level</li><li>File Template：Single file level</li><li>Multi Template：Multiple file levels (hereinafter referred to as <code>Android Studio Template</code>)</li></ul></blockquote><h3 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h3><p>TemplateBuilder is an AS plug-in that can help us to quickly generate Android Studio Template, through a file to configure the template to improve the way through the plug-in to achieve, for simple template production, only one button can be generated.</p><h3 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h3><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><p>Open Android Studio, <code>Preferences</code> – <code>Plugins</code> – <code>Brown Repositories</code>, search <code>TemplateBuilder</code> and download, then restart the IDE and try.</p><p><img src="/2017/03/06/TemplateBuilder/img1.png" alt=""></p><h4 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h4><h5 id="Gif-effect"><a href="#Gif-effect" class="headerlink" title="Gif effect"></a>Gif effect</h5><p>First directly show the Gif presentation effect, respectively, corresponding to the template export and import</p><p><img src="/2017/03/06/TemplateBuilder/img2.gif" alt=""></p><p><code>Export:</code> Select the file or folder to be exported, press <code>ALT + T</code>, in the pop-up interface to change the template name (<code>MVP Test</code>) and description, then click <code>Finish</code>, and then restart the IDE;</p><p><img src="/2017/03/06/TemplateBuilder/img7.gif" alt=""></p><p><code>Import:</code> Select a package, press the <code>Command + N</code> key, enter the template category name (the default is the computer user name), select the <code>MVP Test</code> template to import.</p><h5 id="Detailed-explanation"><a href="#Detailed-explanation" class="headerlink" title="Detailed explanation"></a>Detailed explanation</h5><p>Here we take an example of the extraction of an MVP template, first select the need to create a template for the template file (if you need to select a package below all the files, you can directly select the package), and then press the shortcut <code>ALT + T</code> to start the plug, you can see the following interface</p><p><img src="/2017/03/06/TemplateBuilder/img3.png" alt=""></p><p>Here to explain the corresponding content of the interface</p><ul><li><p><code>Template Category</code>  Corresponding to the template classification, corresponding to select the template template when the import, where the default is the computer’s user name.</p></li><li><p><code>Template Name</code>  Corresponding to the template name, corresponding to the template name when selecting the import template, the default is the current Project name.</p></li><li><p><code>Template Description</code>  Corresponding to the template description information, corresponding to the template when the import interface pop-up description of the text, the default is empty.</p></li><li><p><code>Template Folder</code>  Corresponding to the location generated by the template, if the Mac operating system is the default / <code>Applications / Android Studio.app/Contents/plugins/android/lib/templates</code>, Windows OS, because the difference is relatively large, the default is empty, you can Configure the <code>[Android Studio installation directory] / plugins / android / lib / templates</code>(here only need to configure once, the plugin will automatically save the location).</p></li><li><p><code>Input data area</code>  If you want to enhance the compatibility of the template will use it, it corresponds to the AS template Template.xml <parameter> tag, that is, each of the following configuration items.</parameter></p><p><img src="/2017/03/06/TemplateBuilder/img5.png" alt=""></p></li></ul><p>The whole UI interface is clear, if you just want to simply extract the template you write, you only need to enter the <code>Template Name</code> and <code>Template Description</code> can, of course, if you do not want to enter this can also be omitted. Then click <code>Finish</code>, you can see the bottom of the IDE pop-up as shown below the prompt, then you have been successful, restart the IDE to use the template.</p><p><img src="/2017/03/06/TemplateBuilder/img4.png" alt=""></p><p>Here, if you understand the <code>Android Studio Template</code> production process, you may feel that compared to their own manual to do this is simple, but the flexibility to reduce a lot. For example, when there is a group dependency in the template, you need to add the corresponding dependencies in <code>build.gradle.ftl</code>. After importing the template, you will need to edit <code>recipe.xml.ftl</code> when you want to open a file automatically. In which version, you need to edit <code>template.xml</code> and so on. If you have this need, you can click <code>Next</code> to replace the <code>Finish</code>, click on the following you will be able to see the following interface, where you need to focus on all the configuration file editing, editing directly click <code>OK</code> to start automatically generated.</p><p><img src="/2017/03/06/TemplateBuilder/img6.png" alt=""></p><h3 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h3><p>If you try to make your own <code>Android Studio Template</code>, I believe you will be for the template configuration, change the file name, add the parameters can be complicated, and so cumbersome operation and worry, because even a very simple template extraction need to put this A series of processes all go again, change several configuration files.</p><p>Say my personal feelings, when I found <code>Android Studio Template</code> I suddenly felt there are too many can be extracted out of the template for future rapid use, but when I first started to extract a few templates when it has been deep Disgusted, because this process is very tedious. Remember to also write groovy script to assist in the configuration of these templates, but still need to add some template to the script file entry information, still very troublesome. Later, I decided to make this process as much as possible through the automation to complete, then consider the <code>Gradle plug-in</code>, <code>Java GUI</code>, <code>AS Plugin</code> and other ways to complete the template production, the final choice of a quick and convenient <code>AS Plugin</code>, plug-in name is mentioned above To the <code>TemplateBuilder</code>.</p>]]></content>
    
    <summary type="html">
    
      Integrate the development process of the Android Studio Template into the Android Studio Plugin, only &lt;b&gt; one-click &lt;/b&gt; will be able to make the current file as a Template.
    
    </summary>
    
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android Studio" scheme="http://puke3615.github.io/tags/Android-Studio/"/>
    
      <category term="Template" scheme="http://puke3615.github.io/tags/Template/"/>
    
      <category term="Android Studio Plugin" scheme="http://puke3615.github.io/tags/Android-Studio-Plugin/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio模板之文件组</title>
    <link href="http://puke3615.github.io/2016/10/16/Android-Studio-Template-For-File-Group/"/>
    <id>http://puke3615.github.io/2016/10/16/Android-Studio-Template-For-File-Group/</id>
    <published>2016-10-16T09:08:34.000Z</published>
    <updated>2018-07-27T14:51:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="效果图展示"><a href="#效果图展示" class="headerlink" title="效果图展示"></a>效果图展示</h4><p>说再多，不如图来的实在，先上图</p><p><img src="/2016/10/16/Android-Studio-Template-For-File-Group/step5.png" alt="step5"></p><p>已有工程中使用模板效果图</p><p><img src="/2016/10/16/Android-Studio-Template-For-File-Group/filesTemplate1.gif" alt="filesTemplate1.gif"></p><p>创建工程时使用模板</p><p><img src="/2016/10/16/Android-Studio-Template-For-File-Group/filesTemplate2.gif" alt="filesTemplate2"></p><h4 id="示例场景"><a href="#示例场景" class="headerlink" title="示例场景"></a>示例场景</h4><p>在进行Android开发时，我们经常会创建一个Demo工程，目的可能有很多种，可能是为了验证一个问题，可能是为了学习一个框架的使用，可能为了测试自己写的一个lib库等等。这个时候我们可能会创建一个Activity，然后再在xml写一些按钮，再在Activity里写该按钮的事件监听逻辑，也就是说为了执行一段代码我们要做这么多操作。为了简化这段重复操作，我这边写了一个DebugActivity类，然后支持我们只需要写个子类来继承它，然后像下面这样写几个方法即可，运行的时候会根据方法动态创建按钮，并在点击按钮时执行该方法的代码逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">T(<span class="string">"弹出Toast"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于本文主要介绍模板相关的，所以该场景相关的具体代码技术细节就不多说了，有兴趣的可以看下，<a href="https://www.zybuluo.com/puke3615/note/533604" target="_blank" rel="noopener">DebugActivity的代码</a>，这里提出来只是为模板开发简单的做个铺垫。</p><h4 id="模板位置"><a href="#模板位置" class="headerlink" title="模板位置"></a>模板位置</h4><p>Android Studio Template中有系统预设的一些模板，我们可以直接修改，也可以另行添加新的模板。打开<code>Android Studio安装目录/Contents/plugins/android/lib/templates</code>这个文件夹我们能看到下面的目录结构，这里便是AS中模板存放的位置。</p><p><img src="/2016/10/16/Android-Studio-Template-For-File-Group/step1.png" alt="step1"></p><p>我们接下来的工作也就在这里，保险起见我们在这里新建一个目录，我们自己写的模板都放在自己新建的目录里，例如我这里就创建了一个叫<code>pk</code>的目录。</p><h4 id="模板规范"><a href="#模板规范" class="headerlink" title="模板规范"></a>模板规范</h4><p>在上面的基础上，我们可以直接打开<code>/activies/EmptyActivity</code>目录，如下图</p><p><img src="/2016/10/16/Android-Studio-Template-For-File-Group/step2.png" alt="step2"></p><p>我们可以看到上面红色区域便是Template的文件结构，大致说下各个文件（夹）的含义</p><ul><li><code>globals.xml.ftl</code>  模板中参数配置的地方（可选）</li><li><code>recipe.xml.ftl</code>  模板行为执行处，引入这个模板之后，接下来要做什么事情，就是它说的算（可选，但是不选就没有意义了，因为模板引入是要要行为驱动的）</li><li><code>root</code>  存放模板文件及引入资源的目录，模板文件可以是<code>.xml</code>、<code>.java</code>、<code>.gradle</code>等任何一个文本格式的文件，资源一般是我们引入的<code>.png</code>资源文件（可选，不选同上）</li><li><code>template_blank_activity.png</code>  引入模板时的引导图（可选）</li><li><code>template.xml</code>  面向模板引擎的配置文件（必选）</li></ul><p>我们可以看到，真正核心的部分就是<code>root</code>、<code>recipe.xml.ftl</code>和<code>template.xml</code>，接下来这重点说明这三部分。</p><p>我们可以打开root目录，能够看到里面的文件除了图片资源文件都是以<code>.ftl</code>结尾的，而<code>.ftl</code>是标准的FreeMarker的文件。FreeMarker是类似于Velocity的一种模板框架，据说对于多文件处理时它具有更好的性能，大概也是Android Studio选择Velocity作为单文件模板，选择FreeMarker作为文件组模板的原因吧。有兴趣的可以去<a href="http://freemarker.org" target="_blank" rel="noopener">FreeMarker官网</a>学习一下，它的自定义标签功能还是很强大的，个人感觉比Velocity的更加接地气。</p><p>接下来我们看一下<code>recipe.xml.ftl</code> 的内容，打开如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">recipe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#include</span> "<span class="attr">..</span>/<span class="attr">common</span>/<span class="attr">recipe_manifest.xml.ftl</span>" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">generateLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#include</span> "<span class="attr">..</span>/<span class="attr">common</span>/<span class="attr">recipe_simple.xml.ftl</span>" /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(resOut)&#125;/layout/$&#123;layoutName&#125;.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/SimpleActivity.java.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;activityClass&#125;.java"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;activityClass&#125;.java"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">recipe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里以<code>&lt;#</code>开头的都是FreeMarker的语法，基本上比葫芦画瓢就能看明白，就不多说了。其实对于这个文件最重要的部分是下面四个标签</p><ul><li><code>copy</code>  就是简单的copy，把模板root目录下的某个文件copy到目标工程的某个目录下</li><li><code>instantiate</code>  跟copy很类似，唯一多的一点功能就是并不只简单的走IO流进行copy，而是通过FreeMarker框架按照模板中的FreeMarker能识别的逻辑判断和数据引入来生成最终的目标文件</li><li><code>merge</code>  目标项目中有了某文件，而我们还要想该文件合并一些我们的模板的部分时，就选用merge，例如我们添加一个Activity时需要merge<code>AndroidManifest.xml</code>的配置。目前支持的merge格式有<code>.xml</code>和<code>.gradle</code>，但是对<code>.gradle</code>支持的不怎么好，不过不影响该模板的开发，对于这套模板引擎的开发者来说，这可能是最麻烦的部分了，但是对于我们使用者就不用考那么多了，直接使用吧</li><li><code>open</code>  这个很简单，就是指定模板引入之后要IDE打开的文件</li></ul><p>然后看下<code>template.xml</code>内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span></span></span><br><span class="line"><span class="tag">    <span class="attr">format</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">revision</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"Empty Activity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minApi</span>=<span class="string">"7"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minBuildApi</span>=<span class="string">"14"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">description</span>=<span class="string">"Creates a new empty activity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">value</span>=<span class="string">"Activity"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formfactor</span> <span class="attr">value</span>=<span class="string">"Mobile"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"activityClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Activity Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;layoutToActivity(layoutName)&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"MainActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the activity class to create"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"generateLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Generate Layout File"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"If true, a layout file will be generated"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"layoutName"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Layout Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"layout|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"$&#123;activityToLayout(activityClass)&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"activity_main"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">visibility</span>=<span class="string">"generateLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the layout to create for the activity"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"isLauncher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Launcher Activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"If true, this activity will have a CATEGORY_LAUNCHER intent filter, making it visible in the launcher"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"packageName"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Package name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"package"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"com.mycompany.myapp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 128x128 thumbnails relative to template.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thumbs</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- default thumbnail is required --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thumb</span>&gt;</span>template_blank_activity.png<span class="tag">&lt;/<span class="name">thumb</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thumbs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">globals</span> <span class="attr">file</span>=<span class="string">"globals.xml.ftl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execute</span> <span class="attr">file</span>=<span class="string">"recipe.xml.ftl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们进行模板引入时，AS会弹出一个如下图的UI界面，要我们来填入或选择一些数据，例如输入Activity的的名称，选择SDK的版本之类的。而这个界面就是根据由该文件而来的。</p><p><img src="/2016/10/16/Android-Studio-Template-For-File-Group/step3.png" alt="step3"></p><p>内容比较多，为减少篇幅我挑些重要的说</p><ul><li><code>template标签</code><ul><li><code>name</code>  引入模板时的模板名称，就死根据他选择哪个模板的</li><li><code>description</code>  弹出Dialog的标题，对应上去的区域1</li></ul></li><li><code>category</code>  表示该模板属于哪种分类，在引入的时候会有个分类的选择</li><li><code>parameter</code>  每个该标签就对应Dialog界面的一个输入项<ul><li><code>id</code>  该参数的唯一标识符，也是我们在<code>.ftl</code>中引入的值，例如定义的id为<code>username</code>，引用时就是<code>$username</code></li><li><code>name</code>  对应Dialog上面该输入项的名称</li><li><code>type</code>  对应该参数的类型，Dialog就是根据这个来决定对应输入是选择框、输入框还是下拉框等等</li><li><code>constraints</code>  对应该参数的约束，如果有多个要用<code>|</code>分割开</li><li><code>suggest</code>  建议值，这个输入部分是由级联效应的，可能你改了A参数，B参数也会跟着改变，就是根据这个参数决定的</li><li><code>default</code>  参数的默认值</li><li><code>visibility</code>  可见性，要配置一个boolean类型的参数，一般指向另一个输入源</li><li><code>help</code>  当焦点在某个输入源上面时，上图的区域3的就限制这儿的内容</li></ul></li></ul><h4 id="操刀实战"><a href="#操刀实战" class="headerlink" title="操刀实战"></a>操刀实战</h4><p>了解了模板规范之后，我们编写模板时就不会那么被动了，下面我们来自己动手编写文章开始部分展示的模板。</p><p>首先在刚才提到的自定义的模板下创建如下图所示的目录结构</p><ul><li><code>DebugActivity</code><ul><li><code>root</code><ul><li><code>src</code><ul><li><code>app_package</code><ul><li><code>DebugActivity.java.ftl</code></li><li><code>JumpActivity.java.ftl</code></li><li><code>SimpleActivity.java.ftl</code></li></ul></li></ul></li><li><code>AndroidManifest.xml.ftl</code></li></ul></li><li><code>globals.xml.ftl</code></li><li><code>recipe.xml.ftl</code></li><li><code>template.xml</code></li><li><code>template_debug_activity.png</code></li></ul></li></ul><p>然后将下面的代码对应贴进去（图片部分随便找一张代替好了…）</p><p><code>globals.xml.ftl</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">globals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"resOut"</span> <span class="attr">value</span>=<span class="string">"$&#123;resDir&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"srcOut"</span> <span class="attr">value</span>=<span class="string">"$&#123;srcDir&#125;/$&#123;slashedPackageName(packageName)&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"relativePackage"</span> <span class="attr">value</span>=<span class="string">"&lt;#if relativePackage?has_content&gt;$&#123;relativePackage&#125;&lt;#else&gt;$&#123;packageName&#125;&lt;/#if&gt;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">globals</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>recipe.xml.ftl</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">recipe</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/DebugActivity.java.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/DebugActivity.java"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/SimpleActivity.java.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;activityClass&#125;.java"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">#if</span> <span class="attr">addJumpActivity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/JumpActivity.java.ftl"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/JumpActivity.java"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">merge</span> <span class="attr">from</span>=<span class="string">"root/AndroidManifest.xml.ftl"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">to</span>=<span class="string">"$&#123;escapeXmlAttribute(manifestOut)&#125;/AndroidManifest.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/$&#123;activityClass&#125;.java"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"$&#123;escapeXmlAttribute(srcOut)&#125;/DebugActivity.java"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">recipe</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>template.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span></span></span><br><span class="line"><span class="tag">    <span class="attr">format</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">revision</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"Debug Activity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minApi</span>=<span class="string">"7"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minBuildApi</span>=<span class="string">"14"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">description</span>=<span class="string">"创建一个Debug的Activity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">value</span>=<span class="string">"Activity"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formfactor</span> <span class="attr">value</span>=<span class="string">"Mobile"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"activityClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Activity名称"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"SetupActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"创建Activity的名称"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"addExample"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"是否添加按钮使用示例"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"选择时会自动生成测试按钮；否则不生成"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"addJumpActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"是否添加跳转Activity示例"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"选择时会自动生成跳转Activity相关逻辑；否则不生成"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"isLauncher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"设为启动页面"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"boolean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"选择时设置该页面为启动页面；否则不设"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"packageName"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"包名"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"package"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"com.mycompany.myapp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"输入Application包名"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 128x128 thumbnails relative to template.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thumbs</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- default thumbnail is required --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thumb</span>&gt;</span>template_debug_activity.png<span class="tag">&lt;/<span class="name">thumb</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thumbs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">globals</span> <span class="attr">file</span>=<span class="string">"globals.xml.ftl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execute</span> <span class="attr">file</span>=<span class="string">"recipe.xml.ftl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>AndroidManifest.xml.ftl</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#if</span> <span class="attr">addJumpActivity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"$&#123;relativePackage&#125;.JumpActivity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"$&#123;relativePackage&#125;.SetupActivity"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">#if</span> !(<span class="attr">isLibraryProject</span>!<span class="attr">false</span>) &amp;&amp; <span class="attr">isLauncher</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>DebugActivity.java.ftl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.LinearLayout;</span><br><span class="line"><span class="keyword">import</span> android.widget.ScrollView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Debug测试类,快速调试Demo工程&lt;hr /&gt;</span></span><br><span class="line"><span class="comment"> * 使用姿势:&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * 1. 新建一个子类继承该类&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * 2. 跳转Activity: 在子类配置&#123;<span class="doctag">@link</span> Jump&#125;注解, 然后在注解中配置跳转Activity的类型&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * 3. 点击按钮触发方法: 在子类声明一个名称以"_"开头的方法(支持任意修饰符),最终生成按钮的文字便是改方法截去"_"&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * 4. 方法参数支持缺省参数和单个参数&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * 5. 如果是单个参数,参数类型必须是Button或Button的父类类型,当方法执行时,该参数会被赋值为该Buttom对象&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * https://github.com/puke3615/DebugActivity&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zijiao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 16/10/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DebugActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIXED_PREFIX = <span class="string">"_"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = getClass().getName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ButtonItem&gt; buttonItems = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">protected</span> LinearLayout linearLayout;</span><br><span class="line">    <span class="keyword">protected</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line">    <span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Jump &#123;</span><br><span class="line">        Class&lt;? extends Activity&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">this</span>.context = <span class="keyword">this</span>;</span><br><span class="line">        ScrollView scrollView = <span class="keyword">new</span> ScrollView(<span class="keyword">this</span>);</span><br><span class="line">        setContentView(scrollView);</span><br><span class="line">        <span class="keyword">this</span>.linearLayout = <span class="keyword">new</span> LinearLayout(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.linearLayout.setOrientation(LinearLayout.VERTICAL);</span><br><span class="line">        scrollView.addView(linearLayout);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resolveConfig();</span><br><span class="line">            createButton();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createButton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ButtonItem buttonItem : buttonItems) &#123;</span><br><span class="line">            linearLayout.addView(buildButton(buttonItem));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> View <span class="title">buildButton</span><span class="params">(<span class="keyword">final</span> ButtonItem buttonItem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Button button = <span class="keyword">new</span> Button(<span class="keyword">this</span>);</span><br><span class="line">        button.setText(buttonItem.name);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (buttonItem.target != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    to(buttonItem.target);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Method method = buttonItem.method;</span><br><span class="line">                    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">                    <span class="keyword">int</span> paramSize = parameterTypes.length;</span><br><span class="line">                    <span class="keyword">switch</span> (paramSize) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                method.invoke(DebugActivity.<span class="keyword">this</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                                error(e.getMessage());</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            <span class="keyword">if</span> (parameterTypes[<span class="number">0</span>].isAssignableFrom(Button.class)) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    method.invoke(DebugActivity.<span class="keyword">this</span>, button);</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                                    e.printStackTrace();</span><br><span class="line">                                    error(e.getMessage());</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            error(method.getName() + <span class="string">"方法参数配置错误."</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> button;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resolveConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; cls = getClass();</span><br><span class="line">        <span class="comment">//读取跳转配置</span></span><br><span class="line">        <span class="keyword">if</span> (cls.isAnnotationPresent(Jump.class)) &#123;</span><br><span class="line">            Jump annotation = cls.getAnnotation(Jump.class);</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;? extends Activity&gt; activityClass : annotation.value()) &#123;</span><br><span class="line">                buttonItems.add(buildJumpActivityItem(activityClass));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读取方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : cls.getDeclaredMethods()) &#123;</span><br><span class="line">            handleMethod(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        <span class="keyword">if</span> (methodName.startsWith(FIXED_PREFIX)) &#123;</span><br><span class="line">            methodName = methodName.replaceFirst(FIXED_PREFIX, <span class="string">""</span>);</span><br><span class="line">            ButtonItem buttonItem = <span class="keyword">new</span> ButtonItem();</span><br><span class="line">            buttonItem.method = method;</span><br><span class="line">            buttonItem.name = methodName;</span><br><span class="line">            buttonItems.add(buttonItem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ButtonItem <span class="title">buildJumpActivityItem</span><span class="params">(Class&lt;? extends Activity&gt; activityClass)</span> </span>&#123;</span><br><span class="line">        ButtonItem buttonItem = <span class="keyword">new</span> ButtonItem();</span><br><span class="line">        buttonItem.name = <span class="string">"跳转到"</span> + activityClass.getSimpleName();</span><br><span class="line">        buttonItem.target = activityClass;</span><br><span class="line">        <span class="keyword">return</span> buttonItem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">L</span><span class="params">(Object s)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, s + <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(String errorMessage)</span> </span>&#123;</span><br><span class="line">        T(<span class="string">"[错误信息]\n"</span> + errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">T</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(context, String.valueOf(message), Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">to</span><span class="params">(Class&lt;? extends Activity&gt; target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, target));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">T</span><span class="params">(String format, Object... values)</span> </span>&#123;</span><br><span class="line">        T(String.format(format, values));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ButtonItem</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        <span class="keyword">public</span> Method method;</span><br><span class="line">        <span class="keyword">public</span> Class&lt;? extends Activity&gt; target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JumpActivity.java.ftl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zijiao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 16/10/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        TextView text = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</span><br><span class="line">        text.setText(<span class="string">"跳转Activity成功"</span>);</span><br><span class="line">        setContentView(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SimpleActivity.java.ftl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DebugActivity</span>.Jump(&#123;</span><br><span class="line">&lt;#if addJumpActivity&gt;</span><br><span class="line">    JumpActivity.class,</span><br><span class="line">&lt;#else&gt;</span><br><span class="line"></span><br><span class="line">&lt;/#if&gt;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;activityClass&#125; extends DebugActivity &#123;</span><br><span class="line"></span><br><span class="line">&lt;#if addExample&gt;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> _无参方法调用() &#123;</span><br><span class="line">    T(<span class="string">"无参方法调用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> _有参方法调用(Button button) &#123;</span><br><span class="line">        button.setText(<span class="string">"number is "</span> + number++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代码执行不到,直接弹出toast提示报错</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> _错误参数调用(String msg) &#123;</span><br><span class="line">        T(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法名没有以"_"开头,按钮无法创建成功</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 无效调用() &#123;</span><br><span class="line">        T(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//crash会被会被catch住,以toast方式弹出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> _Crash测试() &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/#if&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok，到此对于该模板的编写过程就结束了，接下来重启下Android Studio，然后<code>New Project</code>一路next下去，直到这个界面，这里就是我们自定义的DebugActivity模板了</p><p><img src="/2016/10/16/Android-Studio-Template-For-File-Group/step4.png" alt="step4"></p><p>下面是该模板的Github源码</p><p><a href="https://github.com/puke3615/DebugActivity.git" target="_blank" rel="noopener">https://github.com/puke3615/DebugActivity.git</a></p>]]></content>
    
    <summary type="html">
    
      文件组模板是基于FreeMarker模板语言的一个功能很强大的Android开发模板，可以这样说，代码片段模板和文件模板是一种提高编码效率的工具，而文件组模板可以算是一种模板引擎。
    
    </summary>
    
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android Studio" scheme="http://puke3615.github.io/tags/Android-Studio/"/>
    
      <category term="Template" scheme="http://puke3615.github.io/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio模板之文件</title>
    <link href="http://puke3615.github.io/2016/10/15/Android-Studio-Template-For-File/"/>
    <id>http://puke3615.github.io/2016/10/15/Android-Studio-Template-For-File/</id>
    <published>2016-10-15T03:49:07.000Z</published>
    <updated>2018-07-27T14:51:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们开发的过程中可能会遇到有些类在不同的工程下都需要使用，单独抽成jar包可能又有点小题大做了，而且还得在下次使用的时候去依赖它，这个时候我们AS中的FileTemplate便派上用场了。</p><h5 id="FileTemplate使用"><a href="#FileTemplate使用" class="headerlink" title="FileTemplate使用"></a>FileTemplate使用</h5><p><img src="/2016/10/15/Android-Studio-Template-For-File/fileTemplate1.gif" alt="fileTemplate1"></p><p>我们开发中可能经常去写一个继承BaseAdapter的子Adapter，而且里面有一大串无脑代码，于是我写了这个DataAdapter的模板。</p><p>Android Studio给我提供了创建模板的快捷方式，我们可以打开任意一个类，然后选择顶部的Tools—Save File As Template便可以快速创建一个当前类的模板文件</p><p><img src="/2016/10/15/Android-Studio-Template-For-File/fileTemplate2.gif" alt="fileTemplate2"></p><p>或者直接通过Preferences — Editor — File and Code Templates右边的加号创建</p><p><img src="/2016/10/15/Android-Studio-Template-For-File/step1.png" alt="step1"></p><p>然后IDE会自动打开这个界面</p><p><img src="/2016/10/15/Android-Studio-Template-For-File/step2.png" alt="step2"></p><p>大致说下这几个区域</p><ul><li>区域1：模板的名称，唯一标识一个文件模板</li><li>区域2：模板的后缀名，填写当前属于哪种文件的模板</li><li>区域3：模板编辑区</li><li>区域4：一些可选配置</li><li>区域5：官方对FileTemplate的简单描述，往下滑我们可以看到系统的预设变量（类似于上一章中的预设变量），这里的内容不是很多但营养价值很高，建议看一下</li></ul><p>接下来我们编辑模板，把这段模板内容直接粘贴到编辑区，然后给模板命名为User即保存关闭该弹窗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != "")package $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $&#123;USER&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $&#123;DATE&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;NAME&#125; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] name = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们来引入刚写的模板，右键选择待添加模板的包 — New — User</p><p><img src="/2016/10/15/Android-Studio-Template-For-File/step3.png" alt="step3"></p><p>也可以New一个Java Class然后在弹窗中通过上下方向键或者下拉列表来选择找到创建的User模板</p><p><img src="/2016/10/15/Android-Studio-Template-For-File/fileTemplate3.gif" alt="fileTemplate3"></p><p>还可以直接在New下面选择</p><p><img src="/2016/10/15/Android-Studio-Template-For-File/fileTemplate4.gif" alt="fileTemplate4"></p><p>创建模板之后的引入方式有很多，我们可以使用自己比较喜欢的方式去引入。最终输入文件名点确定，代码直接生成出来。</p><p>上面说的是最基本的文件模板需求，当我们的文件需要多个参数时，例如User这个模板的name属性名可能是多边的，只有引入模板时才能确定下来，这时我们可以用自定义变量来表示，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != "")package $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $&#123;USER&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $&#123;DATE&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;NAME&#125; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] $&#123;fieldName&#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候我们再引入模板时，IDE会扫描有没有自定义变量，如果有的并且没有被初始化赋值的话就在弹出的对话框中多一个可编辑的区域，如下图</p><p><img src="/2016/10/15/Android-Studio-Template-For-File/step5.png" alt="step5"></p><p>这便支持自定义参数的场景，到这一步为止，一般的文件模板需求我们都可以自己满足了。下面介绍一些相对深一点的使用方式，有兴趣的可以看看。</p><p>Android Studio的FileTemplate使用Velocity Template Language（简称VTL）进行逻辑判断和流程控制，有兴趣的可以直接看下Velocity的<a href="http://velocity.apache.org/engine/devel/user-guide.html#Velocity_Template_Language_VTL:_An_Introduction" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      文件模板是指以一个文件为基础的模板，这种形式的模板比代码片段级别的模板要复杂一些，模板中设计到VTL(Velocity Template Language)语法。文件级别比代码级别能够存储更多的代码内容，而且能够通过VTL很大程度上提高模板的灵活度，让模板不再是一个不变的文本字符串。
    
    </summary>
    
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android Studio" scheme="http://puke3615.github.io/tags/Android-Studio/"/>
    
      <category term="Template" scheme="http://puke3615.github.io/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio模板之代码片段</title>
    <link href="http://puke3615.github.io/2016/10/14/Android-Studio-Template-For-Part/"/>
    <id>http://puke3615.github.io/2016/10/14/Android-Studio-Template-For-Part/</id>
    <published>2016-10-13T16:48:17.000Z</published>
    <updated>2018-07-27T14:51:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>下面先直接上几张演示效果图</p><p><img src="/2016/10/14/Android-Studio-Template-For-Part/LiveTemplate1.gif" alt="UserManager"></p><p>创建一个单例类</p><p><img src="/2016/10/14/Android-Studio-Template-For-Part/LiveTemplate2.gif" alt="FileUtil"></p><p>写一个将InputStream转化为String的方法</p><p><img src="/2016/10/14/Android-Studio-Template-For-Part/LiveTemplate3.gif" alt="Test"></p><p>生成main方法并打印数字</p><p><img src="/2016/10/14/Android-Studio-Template-For-Part/LiveTemplate4.gif" alt="FileUtil"></p><p>用try catch来包装代码块</p><p>上面的这些有的是IDE自带的，有的是自定义的。具体位置我们可以进入IDE，Preserences，Editor，Live Templates，我们可以在右边栏看到一些列IDE预设的template，如下图</p><p><img src="/2016/10/14/Android-Studio-Template-For-Part/step1.png" alt="step1"></p><p>这里我们展开Android，可以看到下图</p><p><img src="/2016/10/14/Android-Studio-Template-For-Part/step2.png" alt="step2"></p><p>这里面所有的我们都可以使用，括号后面的内容是为了描述该模板的，你也可以取消前面的勾选来取消该模板。</p><p>其实系统预设的有很多都是很实用的，有兴趣的可以去试一试，不多说。这里主要看一下如何自定义模板，把一些常用的代码片段DIY到自己的模板库中，当下次再需要同样代码的时候只需要一个标识符就能迅速自动生成。</p><p>我们点击右上角的加号，我们可以看到两个选项一个是Live Template，这个表示一个模板，另一个是Template Group，这个表示一个模板所属的分组，就像上面看到的Android，它就属于一个分组。</p><p><img src="/2016/10/14/Android-Studio-Template-For-Part/step3.png" alt="step3"></p><p>接下来我们先创建一个自己的Template Group，名称随便取，不要与已有的分组重名就行，这里就取为Custom。然后我们选中新建的这个Custom分组再创建Live Template，会看到如下界面</p><p><img src="/2016/10/14/Android-Studio-Template-For-Part/step4.png" alt="step4"></p><p>我对这个界面做了数字标志，大致说下每个区域代表的含义</p><ul><li>区域1：表示模板的缩写，也是我们最终使用时在编辑区输入的指令</li><li>区域2：表示模板的提示，当输入对应缩写时，就会弹出这个提示</li><li>区域3：这里就是最关键的模板区了，模板区包含两部分，一个是模板内容，它可以是任意字符串，另一个是模板变量，它有自己特殊的含义并且格式固定，首尾都是”$”符。模板变量又包含预设变量和自定义变量，比如”$END$”就是一个预设变量，它指定了模板导入结束后鼠标光标最终要停留的位置，而自定义变量则表示模板中一些动态性的部分，比如类名，它在不同的类中引入的结果是不同的。在多个自定义变量的情况下引入模板时，默认按TAB键切换至下个自定义变量位置。</li><li>区域4：自定义变量的配置入口，可以给我们的自定义变量添加一些约束条件</li><li>区域5：指定该模板的作用域，例如指定用于Java还是groovy等等</li><li>区域6：提供一些引入模板的可选操作</li></ul><p>这里我们来写一个生成单例的模板，我们按照下图定义好缩写，描述与模板内容</p><p><img src="/2016/10/14/Android-Studio-Template-For-Part/step5.png" alt="step5"></p><p>模板内容的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] sInstanceLock = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> $className$ sInstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> $className$() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> $className$ <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (sInstanceLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sInstance = <span class="keyword">new</span> $className$();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们选择区域4来编辑我们的自定义变量，我们进去后可以看到如下弹窗</p><p><img src="/2016/10/14/Android-Studio-Template-For-Part/step6.png" alt="step6"></p><ul><li>Name为自定义的变量名称</li><li>Expression表示系统提供的一些方法</li><li>Default value为改变量的默认值</li><li>Skip if define勾选后，如果该变量被赋值则跳过，相当于引入过程中一次手动的TAB</li></ul><p>接着我们在Expression中选择className()，并勾选Skip if define，并点击确定</p><p><img src="/2016/10/14/Android-Studio-Template-For-Part/step7.png" alt="step7"></p><p>最后我们点击区域5来选择模板的作用域，我们选择Java—Declaration</p><p><img src="/2016/10/14/Android-Studio-Template-For-Part/stepl.png" alt="stepl"></p><p>然后保存，我们的单例模板便生成成功了。测试下，在IDE中新建个Java类，在类的内部输入single便出现最上面的那个UserManager的效果。</p><p>当然除此之外还有使用”$SELECTION$”来包装代码块的模板，这个使用场景相对较少这里就不举例了，主要使用的就是这种直接的模板模式。感觉一些常用的，特别是工具类中静态方法相关的，我们都可以抽取成模板，提高开发效率。</p>]]></content>
    
    <summary type="html">
    
      代码片段是Template上的最小单位，因此它也具有最大的灵活性，支持多参数配置、TAB切换、代码块包装等多种特性（IDEA同样适用）。
    
    </summary>
    
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android Studio" scheme="http://puke3615.github.io/tags/Android-Studio/"/>
    
      <category term="Template" scheme="http://puke3615.github.io/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>CallbackProxy模式</title>
    <link href="http://puke3615.github.io/2016/09/04/CallbackProxy/"/>
    <id>http://puke3615.github.io/2016/09/04/CallbackProxy/</id>
    <published>2016-09-04T04:19:43.000Z</published>
    <updated>2017-03-02T07:39:04.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、-Callback问题"><a href="#一、-Callback问题" class="headerlink" title="一、 Callback问题"></a>一、 Callback问题</h4><h5 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a();</span><br><span class="line">        b();</span><br><span class="line">        c();</span><br><span class="line">        d();</span><br><span class="line">        e();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个简单的Manager类，模拟的是一个底层框架向上层提供的管理类，这里先假设我们这个类的使用方有10个(在这里我们就编号C1~C10)，而他们最终的运行环境都是一致的，只是开发期的环境不一致。我想过直接把一些真实场景中的代码拿出来举例，但是偏向业务的代码往往比较复杂且冗余，所以这里我们就简单粗暴地写了几个空方法模拟。其中operate()方法是提供给外部调用的方法，operate()方法中会调用到内部的a~e的一系列方法。</p><h5 id="2-需求叠加"><a href="#2-需求叠加" class="headerlink" title="2. 需求叠加"></a>2. 需求叠加</h5><p>本来是一个简单的业务逻辑，但是突然有个业务方C1说他们需要在Manager的operate()方法的a()方法中添加一个回调，给业务方去处理。于是便有了我们的Callback接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callA</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且我们还要改造我们的Manager类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Callback mCallback;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a();</span><br><span class="line">        b();</span><br><span class="line">        c();</span><br><span class="line">        d();</span><br><span class="line">        e();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mCallback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mCallback.callA();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在Manger类中添加一个Callback变量，并向业务方提供了setCakkback(CallbackA callback)方法为了方便外部把自己想在a()方法中做的操作set进来，这样处理既能让我们的业务方C1能够在a()方法中做他们定制化的处理，也不会影响到其他业务方的正常使用。</p><p>下面便是业务方C1的代码实现部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientA</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">        manager.setCallbackA(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//do something   </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        manager.operate();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-需求再叠加"><a href="#3-需求再叠加" class="headerlink" title="3. 需求再叠加"></a>3. 需求再叠加</h5><p>由于业务是多变的，业务会随着许多主观以及客观的情况不断发生改变，某一天我们的业务方C2突然跟我们说，他们需要在b()方法中添加一个回调以处理他们内部的业务逻辑。于是我们开始考虑，上次C1提到要在a()方法中添加回调的时候，我们有创建了一个Callback的接口，并且有在Manager类中提供了setCallback()方法，那我们能不能为了代码的复用性而直接在Callback接口中添加一个回调方法callB()呢。但答案是否认的，因为如果你这样做了，业务方C1会莫名躺枪的……</p><p>既然我们不能添加Callback中的方法，又不想想我们对业务方C2支持的同时又去影响到C1，那我们只能新建一个接口CallbackB了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallbackB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callB</span><span class="params">()</span></span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是，我们的Manager又得这样改变：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Callback mCallback;</span><br><span class="line">    <span class="keyword">private</span> CallbackB mCallbackB;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a();</span><br><span class="line">        b();</span><br><span class="line">        c();</span><br><span class="line">        d();</span><br><span class="line">        e();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mCallback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mCallback.callA();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallbackB</span><span class="params">(CallbackB callbackB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mCallbackB = callbackB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallbackB != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mCallbackB.callB();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们开始看一下我们对Manager类的改动，我们这次的代码增量是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 新增的CallbackB属性</span></span><br><span class="line"><span class="keyword">private</span> CallbackB mCallbackB;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 新增的CallbackB的set方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallbackB</span><span class="params">(CallbackB callbackB)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mCallbackB = callbackB;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 新增的回调逻辑的调用时机</span></span><br><span class="line"><span class="keyword">if</span> (mCallbackB != <span class="keyword">null</span>) &#123;</span><br><span class="line">mCallbackB.callB();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里将增量部分切分为1、2、3三个部分。我们来仔细分析一下这三个部分，其中1和2其实是一种“无脑操作”，就是新增加一个回调接口，并提供回调接口的set方法而已，更甚至来说，3中的非空判断也都是冗余的。</p><p>仅仅为了满足C2的回调处理其实是简单的，只是既然今天C2会过来说是需要b()方法的回调，那接下来谁也不敢保证C3、C4、C5会不会再过来提出要在c()方法，d()方法，e()方法中添加对应的回调，甚至C3要abc的回调，C4要ace的回调。业务简单的时候，代码不一定是简单的，但是业务复杂的时候，代码一定是复杂的。</p><p>而且，站在职责单一的角度来看，对于我们的Manager类是不应该去维护这样一系列繁琐的Callback，并且还要在每个回调时机时进行非空判断的。</p><h4 id="二、-CallbackProxy模式"><a href="#二、-CallbackProxy模式" class="headerlink" title="二、 CallbackProxy模式"></a>二、 CallbackProxy模式</h4><h5 id="1-CallbackProxy的引入"><a href="#1-CallbackProxy的引入" class="headerlink" title="1. CallbackProxy的引入"></a>1. CallbackProxy的引入</h5><p>这里我们引入CallbackProxy模式，我们先定义一个空接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口就是对于Manager类的一个统一协定，协定所有Manager向外的回调都必须继承该接口。</p><p>接下来便有我们的一系列Callback：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallbackA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callA</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallbackB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallbackC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后有一个类来实现所有的Manager需要向外回调的Callback，然后都是一些空实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCallback</span> <span class="keyword">implements</span> <span class="title">CallbackA</span>, <span class="title">CallbackB</span>, <span class="title">CallbackC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callC</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后便有我们的重头戏CallbackProxy，它继承于SimpleCallback，然后内部存储一个真实的Callback，并向外提供一个setCallback()方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackProxy</span> <span class="keyword">extends</span> <span class="title">SimpleCallback</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Callback mCallback;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mCallback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> CallbackA) &#123;</span><br><span class="line">            ((CallbackA) mCallback).callA();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> CallbackB) &#123;</span><br><span class="line">            ((CallbackB) mCallback).callB();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> CallbackC) &#123;</span><br><span class="line">            ((CallbackC) mCallback).callC();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们来看一下我们的引入CallbackProxy之后的Manager类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CallbackProxy mCallbackProxy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a();</span><br><span class="line">        b();</span><br><span class="line">        c();</span><br><span class="line">        d();</span><br><span class="line">        e();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback callback)</span> </span>&#123;</span><br><span class="line">        mCallbackProxy.setCallback(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mCallbackProxy.callA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mCallbackProxy.callB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mCallbackProxy.callC();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，现在的Manager类不需要再声明一系列的Callback，再提供一系列的setCallback方法，再来一堆的非空判断，这些都让我们的CallbackProxy来做了。而我们的Manger类只需要专注于他自己的业务逻辑处理和选择合适的时机进行回调即可。</p><h5 id="2-拓展性"><a href="#2-拓展性" class="headerlink" title="2. 拓展性"></a>2. 拓展性</h5><p>上面的引入Callback的例子中我们写了a~c的回调，现在假如某个业务方还需要我们提供d()方法的回调，接下来我们只需要在新建一个CallbackD类，并在SimpleCallback和CallbackProxy做出对应的改变，然后在我们的真正做回调处理的Manager类中直接在d()方法中调用mCallback的callD()方法即可，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallbackD</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callD</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCallback</span> <span class="keyword">implements</span> <span class="title">CallbackA</span>, <span class="title">CallbackB</span>, <span class="title">CallbackC</span>, <span class="title">CallbackD</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callC</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackProxy</span> <span class="keyword">extends</span> <span class="title">SimpleCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Callback mCallback;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mCallback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> CallbackA) &#123;</span><br><span class="line">            ((CallbackA) mCallback).callA();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> CallbackB) &#123;</span><br><span class="line">            ((CallbackB) mCallback).callB();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> CallbackC) &#123;</span><br><span class="line">            ((CallbackC) mCallback).callC();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> CallbackD) &#123;</span><br><span class="line">            ((CallbackD) mCallback).callD();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CallbackProxy mCallbackProxy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a();</span><br><span class="line">        b();</span><br><span class="line">        c();</span><br><span class="line">        d();</span><br><span class="line">        e();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback callback)</span> </span>&#123;</span><br><span class="line">        mCallbackProxy.setCallback(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mCallbackProxy.callA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mCallbackProxy.callB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mCallbackProxy.callC();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mCallbackProxy.callD();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会发现我们的逻辑变得很清晰，类虽然多点，但是各司其职、有条不紊。</p><h5 id="3-更高效开发"><a href="#3-更高效开发" class="headerlink" title="3. 更高效开发"></a>3. 更高效开发</h5><p>其实到了上面，CallbackProxy的介绍已经是完成了，但有一点需要说明，就是关于对Callback拓展的时候。我们发现其实我们真正做的回调操作仅仅是定义CallbackD和在Manager的d()方法中添加callB()的回调这两个地方。其他的在SimpleCallback和CallbackProxy的处理都是绝对无脑的，于是我们应用APT技术来简化我们的SimpleCallback和CallbackkProxy的处理(由于该篇不是为了介绍APT的，这里只把简单的使用效果贴出来)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ProxyGenerator</span>(</span><br><span class="line">        rootClass = Callback.class</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> <span class="keyword">extends</span> <span class="title">Base</span>, <span class="title">CallbackHolder</span>.<span class="title">Callback1</span>, <span class="title">CallbackHolder</span>.<span class="title">Callback2</span>, <span class="title">CallbackHolder</span>.<span class="title">Callback3</span>, <span class="title">CallbackHolder</span>.<span class="title">Callback4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">login</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们只需要写一个接口继承我们所有需要添加的Callback，然后加上一些注解配置，即可自动生成对应的SimpleCallback和CallbackProxy类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleApi</span> <span class="keyword">implements</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">commonOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call2</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">call3</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">call4</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiProxy</span> <span class="keyword">implements</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Callback mCallback;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> Api) &#123;</span><br><span class="line">    <span class="keyword">return</span> ((Api) mCallback).login(username);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> Base) &#123;</span><br><span class="line">    ((Base) mCallback).base();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">commonOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> Base) &#123;</span><br><span class="line">    <span class="keyword">return</span> ((Base) mCallback).commonOperation();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> CallbackHolder.Callback1) &#123;</span><br><span class="line">    ((CallbackHolder.Callback1) mCallback).call1();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call2</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> CallbackHolder.Callback2) &#123;</span><br><span class="line">    ((CallbackHolder.Callback2) mCallback).call2(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">call3</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> CallbackHolder.Callback3) &#123;</span><br><span class="line">    <span class="keyword">return</span> ((CallbackHolder.Callback3) mCallback).call3(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">call4</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mCallback <span class="keyword">instanceof</span> CallbackHolder.Callback4) &#123;</span><br><span class="line">    <span class="keyword">return</span> ((CallbackHolder.Callback4) mCallback).call4(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback mCallback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mCallback = mCallback;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说当我们需要拓展一个新的Callback时，只需要让Api这个接口多继承一个新的Callback并generate，然后</p><p>就可以在Manager类中添加对应的回调就ok了。</p>]]></content>
    
    <summary type="html">
    
      对于一个核心类或者框架来说，通常会在运行时向外部回调多种操作以便于使用方做出一些主流程上面的AOP或者Intercept操作。而很多操作可能是预留不足以提供的，当我们逐渐去拓展我们的Callback时，使用方的代码将会大量增加，于是引入CallbackProxy的模式解决这个问题。
    
    </summary>
    
      <category term="Develop" scheme="http://puke3615.github.io/categories/Develop/"/>
    
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="APT" scheme="http://puke3615.github.io/tags/APT/"/>
    
      <category term="CallbackProxy" scheme="http://puke3615.github.io/tags/CallbackProxy/"/>
    
  </entry>
  
  <entry>
    <title>CodeGenerator</title>
    <link href="http://puke3615.github.io/2016/08/29/CodeGenerator/"/>
    <id>http://puke3615.github.io/2016/08/29/CodeGenerator/</id>
    <published>2016-08-29T02:15:22.000Z</published>
    <updated>2018-07-27T16:08:33.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-单例生成"><a href="#1-单例生成" class="headerlink" title="1. 单例生成"></a>1. 单例生成</h5><p><img src="/2016/08/29/CodeGenerator/gif/Singleton.gif" alt="单例生成"></p><h5 id="2-Copy生成"><a href="#2-Copy生成" class="headerlink" title="2. Copy生成"></a>2. Copy生成</h5><p><img src="/2016/08/29/CodeGenerator/gif/Copy.gif" alt="Copy生成"></p><h5 id="3-FindView生成"><a href="#3-FindView生成" class="headerlink" title="3. FindView生成"></a>3. FindView生成</h5><p><img src="/2016/08/29/CodeGenerator/gif/FindView.gif" alt="FindView生成"></p><h5 id="4-MainMethod生成"><a href="#4-MainMethod生成" class="headerlink" title="4. MainMethod生成"></a>4. MainMethod生成</h5><p><img src="/2016/08/29/CodeGenerator/gif/MainMethod.gif" alt="MainMethod生成"></p><h5 id="5-Activity添加到AndroidManifest-xml"><a href="#5-Activity添加到AndroidManifest-xml" class="headerlink" title="5. Activity添加到AndroidManifest.xml"></a>5. Activity添加到AndroidManifest.xml</h5><p><img src="/2016/08/29/CodeGenerator/gif/Activity.gif" alt="Activity添加到AndroidManifest.xml"></p>]]></content>
    
    <summary type="html">
    
      Android Studio的一些拓展插件使用，简化我们的日常开发。
    
    </summary>
    
      <category term="Develop" scheme="http://puke3615.github.io/categories/Develop/"/>
    
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android Studio Plugin" scheme="http://puke3615.github.io/tags/Android-Studio-Plugin/"/>
    
      <category term="Generaotr" scheme="http://puke3615.github.io/tags/Generaotr/"/>
    
  </entry>
  
  <entry>
    <title>BuilderGenerator</title>
    <link href="http://puke3615.github.io/2016/08/29/BuilderGenerator/"/>
    <id>http://puke3615.github.io/2016/08/29/BuilderGenerator/</id>
    <published>2016-08-29T02:12:30.000Z</published>
    <updated>2017-03-02T07:39:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>日常开发中，我们经常会使用到Builder模式，我们一般都是直接手动地去写一个Builder类来使用。这里我们采用APT的方式进行配置生成Builder类</em></p><h4 id="一、-快速接入"><a href="#一、-快速接入" class="headerlink" title="一、 快速接入"></a>一、 快速接入</h4><h5 id="1-配置apt依赖"><a href="#1-配置apt依赖" class="headerlink" title="1. 配置apt依赖"></a>1. 配置apt依赖</h5><p>外层gradle添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.4'</span></span><br></pre></td></tr></table></figure><p>内层build.gradle添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.neenbedankt.android-apt'</span></span><br></pre></td></tr></table></figure><h5 id="2-配置该框架依赖"><a href="#2-配置该框架依赖" class="headerlink" title="2. 配置该框架依赖"></a>2. 配置该框架依赖</h5><p>内层build.gradle添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.puke:buildergenerator-api:1.0.0'</span></span><br><span class="line">apt <span class="string">'com.puke:buildergenerator-compiler:1.0.0'</span></span><br></pre></td></tr></table></figure><p>到这里，配置部分就结束了，接下来就是使用过程。</p><h5 id="3-使用姿势"><a href="#3-使用姿势" class="headerlink" title="3. 使用姿势"></a>3. 使用姿势</h5><p>这里我们模拟一个需要使用Builder模式的类Dog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Color color;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span>(<span class="string">"configure"</span>)</span><br><span class="line">    Dog(<span class="meta">@Item</span>(<span class="string">"customName"</span>) String name, <span class="meta">@Item</span> <span class="keyword">int</span> age, <span class="meta">@Item</span> String sex, Color color) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后只需要build一下Project就ok了</p><p>我们可以在该Module的“build/generated/source/apt”目录下找到对应的DogBuilder类，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this is a generated file.</span></span><br><span class="line"><span class="keyword">package</span> com.puke.buildergeneator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DogBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String customName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> DogBuilder <span class="title">configureCustomName</span><span class="params">(String customName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.customName = customName;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> DogBuilder <span class="title">configureAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> DogBuilder <span class="title">configureSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Dog <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dog(customName, age, sex, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-几点说明"><a href="#4-几点说明" class="headerlink" title="4. 几点说明"></a>4. 几点说明</h5><p>整体比较轻巧，使用起来也比较简单，我们可以重点看一下该类的构造方法，接下来几点说明：</p><blockquote><p> 构造方法上面加了@Builder注解</p></blockquote><p>表示该类是要生成Builder类</p><blockquote><p>@Builder中注入了“configure”</p></blockquote><p>表示生成注解类的组装子Item的方法前面全部都要加上”configure“关键字，当然这个是可选的，如果不加的话就会直接就直接取方法名</p><blockquote><p>构造方法中加入了@Item注解</p></blockquote><p>加入了@Item注解的参数表示Builder类中可以加入的参数，未加则不能通过Builder加入</p><blockquote><p>@Item中注入“customName”</p></blockquote><p>表示在Builder类中给对应的属性设置的别名，不设时默认去参数名</p><h4 id="二、-项目源码"><a href="#二、-项目源码" class="headerlink" title="二、 项目源码"></a>二、 项目源码</h4><p><a href="https://github.com/puke3615/BuilderGeneator.git" target="_blank" rel="noopener">https://github.com/puke3615/BuilderGeneator.git</a></p>]]></content>
    
    <summary type="html">
    
      日常开发中，我们经常会使用到Builder模式，我们一般都是直接手动地去写一个Builder类来使用。这里我们采用APT的方式进行配置生成Builder类。
    
    </summary>
    
      <category term="APT" scheme="http://puke3615.github.io/categories/APT/"/>
    
    
      <category term="Java" scheme="http://puke3615.github.io/tags/Java/"/>
    
      <category term="注解" scheme="http://puke3615.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="APT" scheme="http://puke3615.github.io/tags/APT/"/>
    
      <category term="Generator" scheme="http://puke3615.github.io/tags/Generator/"/>
    
  </entry>
  
  <entry>
    <title>Android注解</title>
    <link href="http://puke3615.github.io/2016/08/29/Android-Annotation/"/>
    <id>http://puke3615.github.io/2016/08/29/Android-Annotation/</id>
    <published>2016-08-29T02:08:09.000Z</published>
    <updated>2017-03-02T07:39:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>在Java中经常会用到注解，通过注解的方式可以实现很多灵活性的东西。很多优秀的框架都支持注解的方式，如Spring的中对Bean的注解，Hibernate中对POJO类的注解，Mybatis中对Mapper的注解，ButterKnife中对View的注解，Dagger中对各个Component的注解， Retrofit对Api的注解。一言以蔽之，使用注解可以让整个代码风格看起来清爽明了。</em></p><h4 id="一、-传统的代码风格"><a href="#一、-传统的代码风格" class="headerlink" title="一、 传统的代码风格"></a>一、 传统的代码风格</h4><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/username"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"请输入用户名.."</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/submit"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>很简单的一个界面，只有一个EditText和一个Button，就不过多解释了。</p><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.puke.annotationdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText mUsername;</span><br><span class="line">    <span class="keyword">private</span> Button mSubmit;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        findView();</span><br><span class="line">        initListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mUsername = (EditText) findViewById(R.id.username);</span><br><span class="line">        mSubmit = (Button) findViewById(R.id.submit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mSubmit.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                String username = mUsername.getText().toString().trim();</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, username, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里要做到是用户点击提交的时候，Toast弹出EditText输入的内容，比较简单，略过~</p><p>传统的风格是这样的，这样看来也许觉得没什么问题，但是实际的开发当中我们一个页面当中包含的View，以及对应的View的一些事件回调要远远比这个繁琐。我相信一个Activity中要处理十几二十几个View也不算是什么稀奇的事情，那这样会造成什么结果呢。。。</p><p>你的属性声明会是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Button mButton1;</span><br><span class="line"><span class="keyword">private</span> Button mButton2;</span><br><span class="line"><span class="keyword">private</span> Button mButton3;</span><br><span class="line"><span class="keyword">private</span> Button mButton4;</span><br><span class="line"><span class="keyword">private</span> Button mButton5;</span><br><span class="line"><span class="keyword">private</span> Button mButton6;</span><br><span class="line"><span class="keyword">private</span> Button mButton7;</span><br><span class="line"><span class="keyword">private</span> Button mButton8;</span><br></pre></td></tr></table></figure><p>你的findView会是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mButton1 = (Button) findViewById(R.id.button1);</span><br><span class="line">mButton2 = (Button) findViewById(R.id.button2);</span><br><span class="line">mButton3 = (Button) findViewById(R.id.button3);</span><br><span class="line">mButton4 = (Button) findViewById(R.id.button4);</span><br><span class="line">mButton5 = (Button) findViewById(R.id.button5);</span><br><span class="line">mButton6 = (Button) findViewById(R.id.button6);</span><br><span class="line">mButton7 = (Button) findViewById(R.id.button7);</span><br><span class="line">mButton8 = (Button) findViewById(R.id.button8);</span><br></pre></td></tr></table></figure><p>你的事件监听会是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">mButton1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mButton2.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mButton3.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mButton4.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mButton5.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mButton6.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mButton7.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mButton8.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>例子举得不怎么恰当，但是足以说明随着业务代码的不断扩大，这些看上去的”无脑操作“也会让我们广大coder变得愈加的不耐烦，而且会使得我们的类变得庞大而臃肿。</p><p>那么，接下来我们就通过注解的方式来搞一发~</p><h4 id="二、-注解的编码风格"><a href="#二、-注解的编码风格" class="headerlink" title="二、 注解的编码风格"></a>二、 注解的编码风格</h4><p>我们打算使用注解的方式实现</p><blockquote><ol><li>xml的配置</li><li>View的注入</li><li>点击事件的绑定</li></ol></blockquote><p>接下来就是具体实现逻辑</p><ol><li>首先我们先定义一个Bind注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.puke.annotationdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zijiao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 16/8/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bind &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后写Bind注解对应的注解处理器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.puke.annotationdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zijiao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 16/8/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理对Activity的注解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity 目标Activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleBind</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        Class cls = activity.getClass();</span><br><span class="line">        handleSetContentView(activity);</span><br><span class="line">        handleFindView(cls.getDeclaredFields(), activity);</span><br><span class="line">        handleClickEvent(cls.getDeclaredMethods(), activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定xml布局</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleSetContentView</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; cls = activity.getClass();</span><br><span class="line">        <span class="keyword">if</span> (cls.isAnnotationPresent(Bind.class)) &#123;</span><br><span class="line">            <span class="comment">//Activity中加入Bind注解时取出注解配置</span></span><br><span class="line">            Bind bind = cls.getAnnotation(Bind.class);</span><br><span class="line">            <span class="keyword">int</span> layout = bind.value();</span><br><span class="line">            <span class="keyword">if</span> (layout != <span class="number">0</span>) &#123;</span><br><span class="line">                activity.setContentView(layout);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//View的注入</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleFindView</span><span class="params">(Field[] declaredFields, Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (declaredFields == <span class="keyword">null</span> || declaredFields.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">            <span class="comment">//找到被Bind注解且是View的所有属性</span></span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(Bind.class) &amp;&amp; View.class.isAssignableFrom(field.getType())) &#123;</span><br><span class="line">                Bind bind = field.getAnnotation(Bind.class);</span><br><span class="line">                <span class="keyword">int</span> id = bind.value();</span><br><span class="line">                <span class="keyword">if</span> (id != <span class="number">0</span>) &#123;</span><br><span class="line">                    View view = activity.findViewById(id);</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//直接通过反射set进去</span></span><br><span class="line">                        field.set(activity, view);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击事件的绑定</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleClickEvent</span><span class="params">(Method[] declaredMethods, <span class="keyword">final</span> Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (declaredMethods == <span class="keyword">null</span> || declaredMethods.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> Method method : declaredMethods) &#123;</span><br><span class="line">            <span class="comment">//找到被Bind注解且无参的所有方法（注意这里限制无参是为了与下面调用method.invoke(activity)的无参保持一致）</span></span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(Bind.class) &amp;&amp; method.getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">                Bind bind = method.getAnnotation(Bind.class);</span><br><span class="line">                <span class="keyword">int</span> id = bind.value();</span><br><span class="line">                <span class="keyword">if</span> (id != <span class="number">0</span>) &#123;</span><br><span class="line">                    activity.findViewById(id).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                method.invoke(activity);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，到了这一步，我们的注解工作算是结束了，代码相对有点多，但这个是一劳永逸的。</p><ol start="3"><li>接下来就是对注解的使用了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.puke.annotationdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bind</span>(R.layout.activity_main)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bind</span>(R.id.username)</span><br><span class="line">    <span class="keyword">private</span> EditText mUsername;</span><br><span class="line">    <span class="meta">@Bind</span>(R.id.submit)</span><br><span class="line">    <span class="keyword">private</span> Button mSubmit;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        BindHandler.handleBind(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bind</span>(R.id.submit)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String username = mUsername.getText().toString().trim();</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, username, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run一下，完美运行~</p><p>我们这里可以看到，使用注解之后</p><blockquote><p>setContentView方法没了</p><p>findViewById方法没了</p><p>setOnClickListener方法没了</p><p>MainActivity整个类减肥了</p></blockquote><p>所有的所有，都让注解处理器一手承包了。而我们要做的是什么，要做的是真正应该由coder做的事情，在对应的地方加上对应的注解配置就ok了。</p><p>然后我们可以回过头看一下Bind这个注解，细心的同学可能发现注解声明value()的时候理论上来讲不应该有一个default为0的默认值。原因很简单啊，因为就目前的使用场景来看，无论注入一个layout还是一个id都不会为0，那这里干嘛还要再写一个default 0呢，直接不要default可以限制业务方的使用，强约束业务方一旦使用注解就必须要在注解里面set一个值进来。这里我要说明一下，我们写注解就是为了方便使用，快速开发，既然要懒，我们就懒到家，干脆就让我们的注解处理器能在业务方没有在Bind中注入值的时候也能生效。</p><p>就是要实现下面这种效果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.puke.annotationdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bind</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bind</span></span><br><span class="line">    <span class="keyword">private</span> EditText mUsername;</span><br><span class="line">    <span class="meta">@Bind</span></span><br><span class="line">    <span class="keyword">private</span> Button mSubmit;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        BindHandler.handleBind(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bind</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String username = mUsername.getText().toString().trim();</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, username, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，只需要几个全裸的注解一顿狂注之后，就完事了。后面这种的实现方式我这里就不写了，大致说一下思路，注解处理器要制定类名—layout，属性名—id，方法名—id，这样一套转换标准出来，然后注解处理器的处理逻辑是先看业务方有没有手动注入，没有手动注入的情况（也就是前面提到的default 0）下，注解处理器再按照这套标准利用反射来取出对应的R类的对应资源值，只要找到对应的资源值，就和手动注入处理结果的完全一样。</p><h4 id="三、-一些问题"><a href="#三、-一些问题" class="headerlink" title="三、 一些问题"></a>三、 一些问题</h4><p>每当一种事物出现时，只要不是太极端，总会有人拥护，也有人异议。单单站在coder的角度，这种注解的方式给我带来的好处是显而易见的，算是治愈代码密集恐惧症的偏方了。</p><p>但是值得深思的是，这里大量使用了反射，在Java中反射的性能问题总是尴尬的不要不要的。虽然jdk每次升级时基本上都在对反射进行优化，但是毕竟是反射，纯理论上讲，它确实没有直接的方法调用高效。</p><p>当然针对这个问题，我也有见过这样一种说法，假如我们对所谓”高效“的时间容忍度是1000t(t为一个时间粒度单位)，直接方法调用耗时是1t，反射是50 - 200t。也就是说，反射是耗性能，是不效率，但是这个也只是相对与直接方法调用而言的，而还远远没达到我们对性能指标的容忍值。</p><p>我曾经也在高效开发和反射性能消耗之间纠结很久，在这里就不去过多评价，仁者见仁，智者见智了~</p>]]></content>
    
    <summary type="html">
    
      在Java中经常会用到注解，通过注解的方式可以实现很多灵活性的东西。很多优秀的框架都支持注解的方式，如Spring的中对Bean的注解，Hibernate中对POJO类的注解，Mybatis中对Mapper的注解，ButterKnife中对View的注解，Dagger中对各个Component的注解， Retrofit对Api的注解。一言以蔽之，使用注解可以让整个代码风格看起来清爽明了。
    
    </summary>
    
      <category term="Develop" scheme="http://puke3615.github.io/categories/Develop/"/>
    
    
      <category term="Android" scheme="http://puke3615.github.io/tags/Android/"/>
    
      <category term="Java" scheme="http://puke3615.github.io/tags/Java/"/>
    
      <category term="注解" scheme="http://puke3615.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="高效开发" scheme="http://puke3615.github.io/tags/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
